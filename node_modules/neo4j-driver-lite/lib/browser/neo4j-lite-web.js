(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.neo4j = factory());
})(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var lib$2 = {};

	var version$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(version$1, "__esModule", { value: true });
	// DO NOT CHANGE THE VERSION BELOW HERE
	// This is set by the build system at release time, using
	//
	// gulp set --x <releaseversion>
	//
	// This is set up this way to keep the version in the code in
	// sync with the npm package version, and to allow the build
	// system to control version names at packaging time.
	version$1.default = '5.4.0';

	var logging = {};

	Object.defineProperty(logging, "__esModule", { value: true });
	logging.logging = void 0;
	/**
	 * Object containing predefined logging configurations. These are expected to be used as values of the driver config's `logging` property.
	 * @property {function(level: ?string): object} console the function to create a logging config that prints all messages to `console.log` with
	 * timestamp, level and message. It takes an optional `level` parameter which represents the maximum log level to be logged. Default value is 'info'.
	 */
	logging.logging = {
	    console: function (level) {
	        return {
	            level: level,
	            logger: function (level, message) {
	                return console.log("".concat(Date.now(), " ").concat(level.toUpperCase(), " ").concat(message));
	            }
	            // Note: This 'logging' object is in its own file so we can easily access the global Date object here without conflicting
	            // with the Neo4j Date class, and without relying on 'globalThis' which isn't compatible with Node 10.
	        };
	    }
	};

	var lib$1 = {};

	var error = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$q = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(error, "__esModule", { value: true });
	error.PROTOCOL_ERROR = error.SESSION_EXPIRED = error.SERVICE_UNAVAILABLE = error.Neo4jError = error.isRetriableError = error.newError = void 0;
	// A common place for constructing error objects, to keep them
	// uniform across the driver surface.
	/**
	 * Error code representing complete loss of service. Used by {@link Neo4jError#code}.
	 * @type {string}
	 */
	var SERVICE_UNAVAILABLE$5 = 'ServiceUnavailable';
	error.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE$5;
	/**
	 * Error code representing transient loss of service. Used by {@link Neo4jError#code}.
	 * @type {string}
	 */
	var SESSION_EXPIRED$2 = 'SessionExpired';
	error.SESSION_EXPIRED = SESSION_EXPIRED$2;
	/**
	 * Error code representing serialization/deserialization issue in the Bolt protocol. Used by {@link Neo4jError#code}.
	 * @type {string}
	 */
	var PROTOCOL_ERROR$6 = 'ProtocolError';
	error.PROTOCOL_ERROR = PROTOCOL_ERROR$6;
	/**
	 * Error code representing an no classified error. Used by {@link Neo4jError#code}.
	 * @type {string}
	 */
	var NOT_AVAILABLE = 'N/A';
	/// TODO: Remove definitions of this.constructor and this.__proto__
	/**
	 * Class for all errors thrown/returned by the driver.
	 */
	var Neo4jError = /** @class */ (function (_super) {
	    __extends$q(Neo4jError, _super);
	    /**
	     * @constructor
	     * @param {string} message - the error message
	     * @param {string} code - Optional error code. Will be populated when error originates in the database.
	     */
	    function Neo4jError(message, code, cause) {
	        var _this = 
	        // eslint-disable-next-line
	        // @ts-ignore: not available in ES6 yet
	        _super.call(this, message, cause != null ? { cause: cause } : undefined) || this;
	        _this.constructor = Neo4jError;
	        // eslint-disable-next-line no-proto
	        _this.__proto__ = Neo4jError.prototype;
	        _this.code = code;
	        _this.name = 'Neo4jError';
	        /**
	         * Indicates if the error is retriable.
	         * @type {boolean} - true if the error is retriable
	         */
	        _this.retriable = _isRetriableCode(code);
	        return _this;
	    }
	    /**
	     * Verifies if the given error is retriable.
	     *
	     * @param {object|undefined|null} error the error object
	     * @returns {boolean} true if the error is retriable
	     */
	    Neo4jError.isRetriable = function (error) {
	        return error !== null &&
	            error !== undefined &&
	            error instanceof Neo4jError &&
	            error.retriable;
	    };
	    return Neo4jError;
	}(Error));
	error.Neo4jError = Neo4jError;
	/**
	 * Create a new error from a message and error code
	 * @param message the error message
	 * @param code the error code
	 * @return {Neo4jError} an {@link Neo4jError}
	 * @private
	 */
	function newError(message, code, cause) {
	    return new Neo4jError(message, code !== null && code !== void 0 ? code : NOT_AVAILABLE, cause);
	}
	error.newError = newError;
	/**
	 * Verifies if the given error is retriable.
	 *
	 * @public
	 * @param {object|undefined|null} error the error object
	 * @returns {boolean} true if the error is retriable
	 */
	var isRetriableError = Neo4jError.isRetriable;
	error.isRetriableError = isRetriableError;
	/**
	 * @private
	 * @param {string} code the error code
	 * @returns {boolean} true if the error is a retriable error
	 */
	function _isRetriableCode(code) {
	    return code === SERVICE_UNAVAILABLE$5 ||
	        code === SESSION_EXPIRED$2 ||
	        _isAuthorizationExpired(code) ||
	        _isTransientError(code);
	}
	/**
	 * @private
	 * @param {string} code the error to check
	 * @return {boolean} true if the error is a transient error
	 */
	function _isTransientError(code) {
	    return (code === null || code === void 0 ? void 0 : code.includes('TransientError')) === true;
	}
	/**
	 * @private
	 * @param {string} code the error to check
	 * @returns {boolean} true if the error is a service unavailable error
	 */
	function _isAuthorizationExpired(code) {
	    return code === 'Neo.ClientError.Security.AuthorizationExpired';
	}

	var integer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(integer, "__esModule", { value: true });
	integer.toString = integer.toNumber = integer.inSafeRange = integer.isInt = integer.int = void 0;
	// 64-bit Integer library, originally from Long.js by dcodeIO
	// https://github.com/dcodeIO/Long.js
	// License Apache 2
	var error_1$9 = error;
	/**
	 * A cache of the Integer representations of small integer values.
	 * @type {!Object}
	 * @inner
	 * @private
	 */
	// eslint-disable-next-line no-use-before-define
	var INT_CACHE = new Map();
	/**
	 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
	 * See exported functions for more convenient ways of operating integers.
	 * Use `int()` function to create new integers, `isInt()` to check if given object is integer,
	 * `inSafeRange()` to check if it is safe to convert given value to native number,
	 * `toNumber()` and `toString()` to convert given integer to number or string respectively.
	 * @access public
	 * @exports Integer
	 * @class A Integer class for representing a 64 bit two's-complement integer value.
	 * @param {number} low The low (signed) 32 bits of the long
	 * @param {number} high The high (signed) 32 bits of the long
	 *
	 * @constructor
	 */
	var Integer = /** @class */ (function () {
	    function Integer(low, high) {
	        /**
	         * The low 32 bits as a signed value.
	         * @type {number}
	         * @expose
	         */
	        this.low = low !== null && low !== void 0 ? low : 0;
	        /**
	         * The high 32 bits as a signed value.
	         * @type {number}
	         * @expose
	         */
	        this.high = high !== null && high !== void 0 ? high : 0;
	    }
	    // The internal representation of an Integer is the two given signed, 32-bit values.
	    // We use 32-bit pieces because these are the size of integers on which
	    // JavaScript performs bit-operations.  For operations like addition and
	    // multiplication, we split each number into 16 bit pieces, which can easily be
	    // multiplied within JavaScript's floating-point representation without overflow
	    // or change in sign.
	    //
	    // In the algorithms below, we frequently reduce the negative case to the
	    // positive case by negating the input(s) and then post-processing the result.
	    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
	    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	    // a positive number, it overflows back into a negative).  Not handling this
	    // case would often result in infinite recursion.
	    //
	    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
	    // methods on which they depend.
	    Integer.prototype.inSafeRange = function () {
	        return (this.greaterThanOrEqual(Integer.MIN_SAFE_VALUE) &&
	            this.lessThanOrEqual(Integer.MAX_SAFE_VALUE));
	    };
	    /**
	     * Converts the Integer to an exact javascript Number, assuming it is a 32 bit integer.
	     * @returns {number}
	     * @expose
	     */
	    Integer.prototype.toInt = function () {
	        return this.low;
	    };
	    /**
	     * Converts the Integer to a the nearest floating-point representation of this value (double, 53 bit mantissa).
	     * @returns {number}
	     * @expose
	     */
	    Integer.prototype.toNumber = function () {
	        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
	    };
	    /**
	     * Converts the Integer to a BigInt representation of this value
	     * @returns {bigint}
	     * @expose
	     */
	    Integer.prototype.toBigInt = function () {
	        if (this.isZero()) {
	            return BigInt(0);
	        }
	        else if (this.isPositive()) {
	            return (BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) +
	                BigInt(this.low >>> 0));
	        }
	        else {
	            var negate = this.negate();
	            return (BigInt(-1) *
	                (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) +
	                    BigInt(negate.low >>> 0)));
	        }
	    };
	    /**
	     * Converts the Integer to native number or -Infinity/+Infinity when it does not fit.
	     * @return {number}
	     * @package
	     */
	    Integer.prototype.toNumberOrInfinity = function () {
	        if (this.lessThan(Integer.MIN_SAFE_VALUE)) {
	            return Number.NEGATIVE_INFINITY;
	        }
	        else if (this.greaterThan(Integer.MAX_SAFE_VALUE)) {
	            return Number.POSITIVE_INFINITY;
	        }
	        else {
	            return this.toNumber();
	        }
	    };
	    /**
	     * Converts the Integer to a string written in the specified radix.
	     * @param {number=} radix Radix (2-36), defaults to 10
	     * @returns {string}
	     * @override
	     * @throws {RangeError} If `radix` is out of range
	     * @expose
	     */
	    Integer.prototype.toString = function (radix) {
	        radix = radix !== null && radix !== void 0 ? radix : 10;
	        if (radix < 2 || radix > 36) {
	            throw RangeError('radix out of range: ' + radix.toString());
	        }
	        if (this.isZero()) {
	            return '0';
	        }
	        var rem;
	        if (this.isNegative()) {
	            if (this.equals(Integer.MIN_VALUE)) {
	                // We need to change the Integer value before it can be negated, so we remove
	                // the bottom-most digit in this base and then recurse to do the rest.
	                var radixInteger = Integer.fromNumber(radix);
	                var div = this.div(radixInteger);
	                rem = div.multiply(radixInteger).subtract(this);
	                return div.toString(radix) + rem.toInt().toString(radix);
	            }
	            else {
	                return '-' + this.negate().toString(radix);
	            }
	        }
	        // Do several (6) digits each time through the loop, so as to
	        // minimize the calls to the very expensive emulated div.
	        var radixToPower = Integer.fromNumber(Math.pow(radix, 6));
	        rem = this;
	        var result = '';
	        while (true) {
	            var remDiv = rem.div(radixToPower);
	            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
	            var digits = intval.toString(radix);
	            rem = remDiv;
	            if (rem.isZero()) {
	                return digits + result;
	            }
	            else {
	                while (digits.length < 6) {
	                    digits = '0' + digits;
	                }
	                result = '' + digits + result;
	            }
	        }
	    };
	    /**
	     * Converts the Integer to it primitive value.
	     *
	     * @since 5.4.0
	     * @returns {bigint}
	     *
	     * @see {@link Integer#toBigInt}
	     * @see {@link Integer#toInt}
	     * @see {@link Integer#toNumber}
	     * @see {@link Integer#toString}
	     */
	    Integer.prototype.valueOf = function () {
	        return this.toBigInt();
	    };
	    /**
	     * Gets the high 32 bits as a signed integer.
	     * @returns {number} Signed high bits
	     * @expose
	     */
	    Integer.prototype.getHighBits = function () {
	        return this.high;
	    };
	    /**
	     * Gets the low 32 bits as a signed integer.
	     * @returns {number} Signed low bits
	     * @expose
	     */
	    Integer.prototype.getLowBits = function () {
	        return this.low;
	    };
	    /**
	     * Gets the number of bits needed to represent the absolute value of this Integer.
	     * @returns {number}
	     * @expose
	     */
	    Integer.prototype.getNumBitsAbs = function () {
	        if (this.isNegative()) {
	            return this.equals(Integer.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
	        }
	        var val = this.high !== 0 ? this.high : this.low;
	        var bit = 0;
	        for (bit = 31; bit > 0; bit--) {
	            if ((val & (1 << bit)) !== 0) {
	                break;
	            }
	        }
	        return this.high !== 0 ? bit + 33 : bit + 1;
	    };
	    /**
	     * Tests if this Integer's value equals zero.
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.isZero = function () {
	        return this.high === 0 && this.low === 0;
	    };
	    /**
	     * Tests if this Integer's value is negative.
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.isNegative = function () {
	        return this.high < 0;
	    };
	    /**
	     * Tests if this Integer's value is positive.
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.isPositive = function () {
	        return this.high >= 0;
	    };
	    /**
	     * Tests if this Integer's value is odd.
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.isOdd = function () {
	        return (this.low & 1) === 1;
	    };
	    /**
	     * Tests if this Integer's value is even.
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.isEven = function () {
	        return (this.low & 1) === 0;
	    };
	    /**
	     * Tests if this Integer's value equals the specified's.
	     * @param {!Integer|number|string} other Other value
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.equals = function (other) {
	        var theOther = Integer.fromValue(other);
	        return this.high === theOther.high && this.low === theOther.low;
	    };
	    /**
	     * Tests if this Integer's value differs from the specified's.
	     * @param {!Integer|number|string} other Other value
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.notEquals = function (other) {
	        return !this.equals(/* validates */ other);
	    };
	    /**
	     * Tests if this Integer's value is less than the specified's.
	     * @param {!Integer|number|string} other Other value
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.lessThan = function (other) {
	        return this.compare(/* validates */ other) < 0;
	    };
	    /**
	     * Tests if this Integer's value is less than or equal the specified's.
	     * @param {!Integer|number|string} other Other value
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.lessThanOrEqual = function (other) {
	        return this.compare(/* validates */ other) <= 0;
	    };
	    /**
	     * Tests if this Integer's value is greater than the specified's.
	     * @param {!Integer|number|string} other Other value
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.greaterThan = function (other) {
	        return this.compare(/* validates */ other) > 0;
	    };
	    /**
	     * Tests if this Integer's value is greater than or equal the specified's.
	     * @param {!Integer|number|string} other Other value
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.prototype.greaterThanOrEqual = function (other) {
	        return this.compare(/* validates */ other) >= 0;
	    };
	    /**
	     * Compares this Integer's value with the specified's.
	     * @param {!Integer|number|string} other Other value
	     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	     *  if the given one is greater
	     * @expose
	     */
	    Integer.prototype.compare = function (other) {
	        var theOther = Integer.fromValue(other);
	        if (this.equals(theOther)) {
	            return 0;
	        }
	        var thisNeg = this.isNegative();
	        var otherNeg = theOther.isNegative();
	        if (thisNeg && !otherNeg) {
	            return -1;
	        }
	        if (!thisNeg && otherNeg) {
	            return 1;
	        }
	        // At this point the sign bits are the same
	        return this.subtract(theOther).isNegative() ? -1 : 1;
	    };
	    /**
	     * Negates this Integer's value.
	     * @returns {!Integer} Negated Integer
	     * @expose
	     */
	    Integer.prototype.negate = function () {
	        if (this.equals(Integer.MIN_VALUE)) {
	            return Integer.MIN_VALUE;
	        }
	        return this.not().add(Integer.ONE);
	    };
	    /**
	     * Returns the sum of this and the specified Integer.
	     * @param {!Integer|number|string} addend Addend
	     * @returns {!Integer} Sum
	     * @expose
	     */
	    Integer.prototype.add = function (addend) {
	        var theAddend = Integer.fromValue(addend);
	        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
	        var a48 = this.high >>> 16;
	        var a32 = this.high & 0xffff;
	        var a16 = this.low >>> 16;
	        var a00 = this.low & 0xffff;
	        var b48 = theAddend.high >>> 16;
	        var b32 = theAddend.high & 0xffff;
	        var b16 = theAddend.low >>> 16;
	        var b00 = theAddend.low & 0xffff;
	        var c48 = 0;
	        var c32 = 0;
	        var c16 = 0;
	        var c00 = 0;
	        c00 += a00 + b00;
	        c16 += c00 >>> 16;
	        c00 &= 0xffff;
	        c16 += a16 + b16;
	        c32 += c16 >>> 16;
	        c16 &= 0xffff;
	        c32 += a32 + b32;
	        c48 += c32 >>> 16;
	        c32 &= 0xffff;
	        c48 += a48 + b48;
	        c48 &= 0xffff;
	        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	    };
	    /**
	     * Returns the difference of this and the specified Integer.
	     * @param {!Integer|number|string} subtrahend Subtrahend
	     * @returns {!Integer} Difference
	     * @expose
	     */
	    Integer.prototype.subtract = function (subtrahend) {
	        var theSubtrahend = Integer.fromValue(subtrahend);
	        return this.add(theSubtrahend.negate());
	    };
	    /**
	     * Returns the product of this and the specified Integer.
	     * @param {!Integer|number|string} multiplier Multiplier
	     * @returns {!Integer} Product
	     * @expose
	     */
	    Integer.prototype.multiply = function (multiplier) {
	        if (this.isZero()) {
	            return Integer.ZERO;
	        }
	        var theMultiplier = Integer.fromValue(multiplier);
	        if (theMultiplier.isZero()) {
	            return Integer.ZERO;
	        }
	        if (this.equals(Integer.MIN_VALUE)) {
	            return theMultiplier.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;
	        }
	        if (theMultiplier.equals(Integer.MIN_VALUE)) {
	            return this.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;
	        }
	        if (this.isNegative()) {
	            if (theMultiplier.isNegative()) {
	                return this.negate().multiply(theMultiplier.negate());
	            }
	            else {
	                return this.negate()
	                    .multiply(theMultiplier)
	                    .negate();
	            }
	        }
	        else if (theMultiplier.isNegative()) {
	            return this.multiply(theMultiplier.negate()).negate();
	        }
	        // If both longs are small, use float multiplication
	        if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {
	            return Integer.fromNumber(this.toNumber() * theMultiplier.toNumber());
	        }
	        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	        // We can skip products that would overflow.
	        var a48 = this.high >>> 16;
	        var a32 = this.high & 0xffff;
	        var a16 = this.low >>> 16;
	        var a00 = this.low & 0xffff;
	        var b48 = theMultiplier.high >>> 16;
	        var b32 = theMultiplier.high & 0xffff;
	        var b16 = theMultiplier.low >>> 16;
	        var b00 = theMultiplier.low & 0xffff;
	        var c48 = 0;
	        var c32 = 0;
	        var c16 = 0;
	        var c00 = 0;
	        c00 += a00 * b00;
	        c16 += c00 >>> 16;
	        c00 &= 0xffff;
	        c16 += a16 * b00;
	        c32 += c16 >>> 16;
	        c16 &= 0xffff;
	        c16 += a00 * b16;
	        c32 += c16 >>> 16;
	        c16 &= 0xffff;
	        c32 += a32 * b00;
	        c48 += c32 >>> 16;
	        c32 &= 0xffff;
	        c32 += a16 * b16;
	        c48 += c32 >>> 16;
	        c32 &= 0xffff;
	        c32 += a00 * b32;
	        c48 += c32 >>> 16;
	        c32 &= 0xffff;
	        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	        c48 &= 0xffff;
	        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	    };
	    /**
	     * Returns this Integer divided by the specified.
	     * @param {!Integer|number|string} divisor Divisor
	     * @returns {!Integer} Quotient
	     * @expose
	     */
	    Integer.prototype.div = function (divisor) {
	        var theDivisor = Integer.fromValue(divisor);
	        if (theDivisor.isZero()) {
	            throw (0, error_1$9.newError)('division by zero');
	        }
	        if (this.isZero()) {
	            return Integer.ZERO;
	        }
	        var approx, rem, res;
	        if (this.equals(Integer.MIN_VALUE)) {
	            if (theDivisor.equals(Integer.ONE) ||
	                theDivisor.equals(Integer.NEG_ONE)) {
	                return Integer.MIN_VALUE;
	            }
	            if (theDivisor.equals(Integer.MIN_VALUE)) {
	                return Integer.ONE;
	            }
	            else {
	                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	                var halfThis = this.shiftRight(1);
	                approx = halfThis.div(theDivisor).shiftLeft(1);
	                if (approx.equals(Integer.ZERO)) {
	                    return theDivisor.isNegative() ? Integer.ONE : Integer.NEG_ONE;
	                }
	                else {
	                    rem = this.subtract(theDivisor.multiply(approx));
	                    res = approx.add(rem.div(theDivisor));
	                    return res;
	                }
	            }
	        }
	        else if (theDivisor.equals(Integer.MIN_VALUE)) {
	            return Integer.ZERO;
	        }
	        if (this.isNegative()) {
	            if (theDivisor.isNegative()) {
	                return this.negate().div(theDivisor.negate());
	            }
	            return this.negate()
	                .div(theDivisor)
	                .negate();
	        }
	        else if (theDivisor.isNegative()) {
	            return this.div(theDivisor.negate()).negate();
	        }
	        // Repeat the following until the remainder is less than other:  find a
	        // floating-point that approximates remainder / other *from below*, add this
	        // into the result, and subtract it from the remainder.  It is critical that
	        // the approximate value is less than or equal to the real value so that the
	        // remainder never becomes negative.
	        res = Integer.ZERO;
	        rem = this;
	        while (rem.greaterThanOrEqual(theDivisor)) {
	            // Approximate the result of division. This may be a little greater or
	            // smaller than the actual value.
	            approx = Math.max(1, Math.floor(rem.toNumber() / theDivisor.toNumber()));
	            // We will tweak the approximate result by changing it in the 48-th digit or
	            // the smallest non-fractional digit, whichever is larger.
	            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
	            // Decrease the approximation until it is smaller than the remainder.  Note
	            // that if it is too large, the product overflows and is negative.
	            var approxRes = Integer.fromNumber(approx);
	            var approxRem = approxRes.multiply(theDivisor);
	            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	                approx -= delta;
	                approxRes = Integer.fromNumber(approx);
	                approxRem = approxRes.multiply(theDivisor);
	            }
	            // We know the answer can't be zero... and actually, zero would cause
	            // infinite recursion since we would make no progress.
	            if (approxRes.isZero()) {
	                approxRes = Integer.ONE;
	            }
	            res = res.add(approxRes);
	            rem = rem.subtract(approxRem);
	        }
	        return res;
	    };
	    /**
	     * Returns this Integer modulo the specified.
	     * @param {!Integer|number|string} divisor Divisor
	     * @returns {!Integer} Remainder
	     * @expose
	     */
	    Integer.prototype.modulo = function (divisor) {
	        var theDivisor = Integer.fromValue(divisor);
	        return this.subtract(this.div(theDivisor).multiply(theDivisor));
	    };
	    /**
	     * Returns the bitwise NOT of this Integer.
	     * @returns {!Integer}
	     * @expose
	     */
	    Integer.prototype.not = function () {
	        return Integer.fromBits(~this.low, ~this.high);
	    };
	    /**
	     * Returns the bitwise AND of this Integer and the specified.
	     * @param {!Integer|number|string} other Other Integer
	     * @returns {!Integer}
	     * @expose
	     */
	    Integer.prototype.and = function (other) {
	        var theOther = Integer.fromValue(other);
	        return Integer.fromBits(this.low & theOther.low, this.high & theOther.high);
	    };
	    /**
	     * Returns the bitwise OR of this Integer and the specified.
	     * @param {!Integer|number|string} other Other Integer
	     * @returns {!Integer}
	     * @expose
	     */
	    Integer.prototype.or = function (other) {
	        var theOther = Integer.fromValue(other);
	        return Integer.fromBits(this.low | theOther.low, this.high | theOther.high);
	    };
	    /**
	     * Returns the bitwise XOR of this Integer and the given one.
	     * @param {!Integer|number|string} other Other Integer
	     * @returns {!Integer}
	     * @expose
	     */
	    Integer.prototype.xor = function (other) {
	        var theOther = Integer.fromValue(other);
	        return Integer.fromBits(this.low ^ theOther.low, this.high ^ theOther.high);
	    };
	    /**
	     * Returns this Integer with bits shifted to the left by the given amount.
	     * @param {number|!Integer} numBits Number of bits
	     * @returns {!Integer} Shifted Integer
	     * @expose
	     */
	    Integer.prototype.shiftLeft = function (numBits) {
	        var bitsCount = Integer.toNumber(numBits);
	        if ((bitsCount &= 63) === 0) {
	            return Integer.ZERO;
	        }
	        else if (bitsCount < 32) {
	            return Integer.fromBits(this.low << bitsCount, (this.high << bitsCount) | (this.low >>> (32 - bitsCount)));
	        }
	        else {
	            return Integer.fromBits(0, this.low << (bitsCount - 32));
	        }
	    };
	    /**
	     * Returns this Integer with bits arithmetically shifted to the right by the given amount.
	     * @param {number|!Integer} numBits Number of bits
	     * @returns {!Integer} Shifted Integer
	     * @expose
	     */
	    Integer.prototype.shiftRight = function (numBits) {
	        var bitsCount = Integer.toNumber(numBits);
	        if ((bitsCount &= 63) === 0) {
	            return Integer.ZERO;
	        }
	        else if (numBits < 32) {
	            return Integer.fromBits((this.low >>> bitsCount) | (this.high << (32 - bitsCount)), this.high >> bitsCount);
	        }
	        else {
	            return Integer.fromBits(this.high >> (bitsCount - 32), this.high >= 0 ? 0 : -1);
	        }
	    };
	    /**
	     * Tests if the specified object is a Integer.
	     * @access private
	     * @param {*} obj Object
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.isInteger = function (obj) {
	        return (obj === null || obj === void 0 ? void 0 : obj.__isInteger__) === true;
	    };
	    /**
	     * Returns a Integer representing the given 32 bit integer value.
	     * @access private
	     * @param {number} value The 32 bit integer in question
	     * @returns {!Integer} The corresponding Integer value
	     * @expose
	     */
	    Integer.fromInt = function (value) {
	        var cachedObj;
	        value = value | 0;
	        if (value >= -128 && value < 128) {
	            cachedObj = INT_CACHE.get(value);
	            if (cachedObj != null) {
	                return cachedObj;
	            }
	        }
	        var obj = new Integer(value, value < 0 ? -1 : 0);
	        if (value >= -128 && value < 128) {
	            INT_CACHE.set(value, obj);
	        }
	        return obj;
	    };
	    /**
	     * Returns a Integer representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
	     *  assumed to use 32 bits.
	     * @access private
	     * @param {number} lowBits The low 32 bits
	     * @param {number} highBits The high 32 bits
	     * @returns {!Integer} The corresponding Integer value
	     * @expose
	     */
	    Integer.fromBits = function (lowBits, highBits) {
	        return new Integer(lowBits, highBits);
	    };
	    /**
	     * Returns a Integer representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	     * @access private
	     * @param {number} value The number in question
	     * @returns {!Integer} The corresponding Integer value
	     * @expose
	     */
	    Integer.fromNumber = function (value) {
	        if (isNaN(value) || !isFinite(value)) {
	            return Integer.ZERO;
	        }
	        if (value <= -TWO_PWR_63_DBL) {
	            return Integer.MIN_VALUE;
	        }
	        if (value + 1 >= TWO_PWR_63_DBL) {
	            return Integer.MAX_VALUE;
	        }
	        if (value < 0) {
	            return Integer.fromNumber(-value).negate();
	        }
	        return new Integer(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0);
	    };
	    /**
	     * Returns a Integer representation of the given string, written using the specified radix.
	     * @access private
	     * @param {string} str The textual representation of the Integer
	     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
	     * @param {Object} [opts={}] Configuration options
	     * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.
	     * @returns {!Integer} The corresponding Integer value
	     * @expose
	     */
	    Integer.fromString = function (str, radix, _a) {
	        var _b = _a === void 0 ? {} : _a, strictStringValidation = _b.strictStringValidation;
	        if (str.length === 0) {
	            throw (0, error_1$9.newError)('number format error: empty string');
	        }
	        if (str === 'NaN' ||
	            str === 'Infinity' ||
	            str === '+Infinity' ||
	            str === '-Infinity') {
	            return Integer.ZERO;
	        }
	        radix = radix !== null && radix !== void 0 ? radix : 10;
	        if (radix < 2 || radix > 36) {
	            throw (0, error_1$9.newError)('radix out of range: ' + radix.toString());
	        }
	        var p;
	        if ((p = str.indexOf('-')) > 0) {
	            throw (0, error_1$9.newError)('number format error: interior "-" character: ' + str);
	        }
	        else if (p === 0) {
	            return Integer.fromString(str.substring(1), radix).negate();
	        }
	        // Do several (8) digits each time through the loop, so as to
	        // minimize the calls to the very expensive emulated div.
	        var radixToPower = Integer.fromNumber(Math.pow(radix, 8));
	        var result = Integer.ZERO;
	        for (var i = 0; i < str.length; i += 8) {
	            var size = Math.min(8, str.length - i);
	            var valueString = str.substring(i, i + size);
	            var value = parseInt(valueString, radix);
	            if (strictStringValidation === true && !_isValidNumberFromString(valueString, value, radix)) {
	                throw (0, error_1$9.newError)("number format error: \"".concat(valueString, "\" is NaN in radix ").concat(radix, ": ").concat(str));
	            }
	            if (size < 8) {
	                var power = Integer.fromNumber(Math.pow(radix, size));
	                result = result.multiply(power).add(Integer.fromNumber(value));
	            }
	            else {
	                result = result.multiply(radixToPower);
	                result = result.add(Integer.fromNumber(value));
	            }
	        }
	        return result;
	    };
	    /**
	     * Converts the specified value to a Integer.
	     * @access private
	     * @param {!Integer|number|string|bigint|!{low: number, high: number}} val Value
	     * @param {Object} [opts={}] Configuration options
	     * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.
	     * @returns {!Integer}
	     * @expose
	     */
	    Integer.fromValue = function (val, opts) {
	        if (opts === void 0) { opts = {}; }
	        if (val /* is compatible */ instanceof Integer) {
	            return val;
	        }
	        if (typeof val === 'number') {
	            return Integer.fromNumber(val);
	        }
	        if (typeof val === 'string') {
	            return Integer.fromString(val, undefined, opts);
	        }
	        if (typeof val === 'bigint') {
	            return Integer.fromString(val.toString());
	        }
	        // Throws for non-objects, converts non-instanceof Integer:
	        return new Integer(val.low, val.high);
	    };
	    /**
	     * Converts the specified value to a number.
	     * @access private
	     * @param {!Integer|number|string|!{low: number, high: number}} val Value
	     * @returns {number}
	     * @expose
	     */
	    Integer.toNumber = function (val) {
	        switch (typeof val) {
	            case 'number':
	                return val;
	            case 'bigint':
	                return Number(val);
	            default:
	                return Integer.fromValue(val).toNumber();
	        }
	    };
	    /**
	     * Converts the specified value to a string.
	     * @access private
	     * @param {!Integer|number|string|!{low: number, high: number}} val Value
	     * @param {number} radix optional radix for string conversion, defaults to 10
	     * @returns {string}
	     * @expose
	     */
	    Integer.toString = function (val, radix) {
	        return Integer.fromValue(val).toString(radix);
	    };
	    /**
	     * Checks if the given value is in the safe range in order to be converted to a native number
	     * @access private
	     * @param {!Integer|number|string|!{low: number, high: number}} val Value
	     * @param {number} radix optional radix for string conversion, defaults to 10
	     * @returns {boolean}
	     * @expose
	     */
	    Integer.inSafeRange = function (val) {
	        return Integer.fromValue(val).inSafeRange();
	    };
	    /**
	     * Signed zero.
	     * @type {!Integer}
	     * @expose
	     */
	    Integer.ZERO = Integer.fromInt(0);
	    /**
	     * Signed one.
	     * @type {!Integer}
	     * @expose
	     */
	    Integer.ONE = Integer.fromInt(1);
	    /**
	     * Signed negative one.
	     * @type {!Integer}
	     * @expose
	     */
	    Integer.NEG_ONE = Integer.fromInt(-1);
	    /**
	     * Maximum signed value.
	     * @type {!Integer}
	     * @expose
	     */
	    Integer.MAX_VALUE = Integer.fromBits(0xffffffff | 0, 0x7fffffff | 0);
	    /**
	     * Minimum signed value.
	     * @type {!Integer}
	     * @expose
	     */
	    Integer.MIN_VALUE = Integer.fromBits(0, 0x80000000 | 0);
	    /**
	     * Minimum safe value.
	     * @type {!Integer}
	     * @expose
	     */
	    Integer.MIN_SAFE_VALUE = Integer.fromBits(0x1 | 0, 0xffffffffffe00000 | 0);
	    /**
	     * Maximum safe value.
	     * @type {!Integer}
	     * @expose
	     */
	    Integer.MAX_SAFE_VALUE = Integer.fromBits(0xffffffff | 0, 0x1fffff | 0);
	    /**
	     * An indicator used to reliably determine if an object is a Integer or not.
	     * @type {boolean}
	     * @const
	     * @expose
	     * @private
	     */
	    Integer.__isInteger__ = true;
	    return Integer;
	}());
	/**
	 * @private
	 * @param num
	 * @param radix
	 * @param minSize
	 * @returns {string}
	 */
	function _convertNumberToString(num, radix, minSize) {
	    var theNumberString = num.toString(radix);
	    var paddingLength = Math.max(minSize - theNumberString.length, 0);
	    var padding = '0'.repeat(paddingLength);
	    return "".concat(padding).concat(theNumberString);
	}
	/**
	 *
	 * @private
	 * @param theString
	 * @param theNumber
	 * @param radix
	 * @return {boolean} True if valid
	 */
	function _isValidNumberFromString(theString, theNumber, radix) {
	    return !Number.isNaN(theString) &&
	        !Number.isNaN(theNumber) &&
	        _convertNumberToString(theNumber, radix, theString.length) === theString.toLowerCase();
	}
	Object.defineProperty(Integer.prototype, '__isInteger__', {
	    value: true,
	    enumerable: false,
	    configurable: false
	});
	/**
	 * @type {number}
	 * @const
	 * @inner
	 * @private
	 */
	var TWO_PWR_16_DBL = 1 << 16;
	/**
	 * @type {number}
	 * @const
	 * @inner
	 * @private
	 */
	var TWO_PWR_24_DBL = 1 << 24;
	/**
	 * @type {number}
	 * @const
	 * @inner
	 * @private
	 */
	var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
	/**
	 * @type {number}
	 * @const
	 * @inner
	 * @private
	 */
	var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
	/**
	 * @type {number}
	 * @const
	 * @inner
	 * @private
	 */
	var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
	/**
	 * @type {!Integer}
	 * @const
	 * @inner
	 * @private
	 */
	var TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);
	/**
	 * Cast value to Integer type.
	 * @access public
	 * @param {Mixed} value - The value to use.
	 * @param {Object} [opts={}] Configuration options
	 * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.
	 * @return {Integer} - An object of type Integer.
	 */
	var int = Integer.fromValue;
	integer.int = int;
	/**
	 * Check if a variable is of Integer type.
	 * @access public
	 * @param {Mixed} value - The variable to check.
	 * @return {Boolean} - Is it of the Integer type?
	 */
	var isInt = Integer.isInteger;
	integer.isInt = isInt;
	/**
	 * Check if a variable can be safely converted to a number
	 * @access public
	 * @param {Mixed} value - The variable to check
	 * @return {Boolean} - true if it is safe to call toNumber on variable otherwise false
	 */
	var inSafeRange = Integer.inSafeRange;
	integer.inSafeRange = inSafeRange;
	/**
	 * Converts a variable to a number
	 * @access public
	 * @param {Mixed} value - The variable to convert
	 * @return {number} - the variable as a number
	 */
	var toNumber = Integer.toNumber;
	integer.toNumber = toNumber;
	/**
	 * Converts the integer to a string representation
	 * @access public
	 * @param {Mixed} value - The variable to convert
	 * @param {number} radix - radix to use in string conversion, defaults to 10
	 * @return {string} - returns a string representation of the integer
	 */
	var toString = Integer.toString;
	integer.toString = toString;
	integer.default = Integer;

	var temporalTypes = {};

	var temporalUtil$1 = {};

	var util$4 = {};

	var json = {};

	var objectUtil$2 = {};

	Object.defineProperty(objectUtil$2, "__esModule", { value: true });
	objectUtil$2.getBrokenObjectReason = objectUtil$2.isBrokenObject = objectUtil$2.createBrokenObject = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// eslint-disable-next-line @typescript-eslint/naming-convention
	var __isBrokenObject__ = '__isBrokenObject__';
	// eslint-disable-next-line @typescript-eslint/naming-convention
	var __reason__ = '__reason__';
	/**
	 * Creates a object which all method call will throw the given error
	 *
	 * @param {Error} error The error
	 * @param {any} object The object. Default: {}
	 * @returns {any} A broken object
	 */
	function createBrokenObject(error, object) {
	    if (object === void 0) { object = {}; }
	    var fail = function () {
	        throw error;
	    };
	    return new Proxy(object, {
	        get: function (_, p) {
	            if (p === __isBrokenObject__) {
	                return true;
	            }
	            else if (p === __reason__) {
	                return error;
	            }
	            else if (p === 'toJSON') {
	                return undefined;
	            }
	            fail();
	        },
	        set: fail,
	        apply: fail,
	        construct: fail,
	        defineProperty: fail,
	        deleteProperty: fail,
	        getOwnPropertyDescriptor: fail,
	        getPrototypeOf: fail,
	        has: fail,
	        isExtensible: fail,
	        ownKeys: fail,
	        preventExtensions: fail,
	        setPrototypeOf: fail
	    });
	}
	objectUtil$2.createBrokenObject = createBrokenObject;
	/**
	 * Verifies if it is a Broken Object
	 * @param {any} object The object
	 * @returns {boolean} If it was created with createBrokenObject
	 */
	function isBrokenObject(object) {
	    return object !== null && typeof object === 'object' && object[__isBrokenObject__] === true;
	}
	objectUtil$2.isBrokenObject = isBrokenObject;
	/**
	 * Returns if the reason the object is broken.
	 *
	 * This method should only be called with instances create with {@link createBrokenObject}
	 *
	 * @param {any} object The object
	 * @returns {Error} The reason the object is broken
	 */
	function getBrokenObjectReason(object) {
	    return object[__reason__];
	}
	objectUtil$2.getBrokenObjectReason = getBrokenObjectReason;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(json, "__esModule", { value: true });
	json.stringify = void 0;
	var object_util_1 = objectUtil$2;
	/**
	 * Custom version on JSON.stringify that can handle values that normally don't support serialization, such as BigInt.
	 * @private
	 * @param val A JavaScript value, usually an object or array, to be converted.
	 * @returns A JSON string representing the given value.
	 */
	function stringify(val) {
	    return JSON.stringify(val, function (_, value) {
	        if ((0, object_util_1.isBrokenObject)(value)) {
	            return {
	                __isBrokenObject__: true,
	                __reason__: (0, object_util_1.getBrokenObjectReason)(value)
	            };
	        }
	        if (typeof value === 'bigint') {
	            return "".concat(value, "n");
	        }
	        return value;
	    });
	}
	json.stringify = stringify;

	Object.defineProperty(util$4, "__esModule", { value: true });
	util$4.ENCRYPTION_OFF = util$4.ENCRYPTION_ON = util$4.validateQueryAndParameters = util$4.assertValidDate = util$4.assertNumberOrInteger = util$4.assertNumber = util$4.assertString = util$4.assertObject = util$4.isString = util$4.isObject = util$4.isEmptyObjectOrNull = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	var integer_1$3 = integer;
	var json_1$1 = json;
	var ENCRYPTION_ON$2 = 'ENCRYPTION_ON';
	util$4.ENCRYPTION_ON = ENCRYPTION_ON$2;
	var ENCRYPTION_OFF$2 = 'ENCRYPTION_OFF';
	util$4.ENCRYPTION_OFF = ENCRYPTION_OFF$2;
	/**
	 * Verifies if the object is null or empty
	 * @param obj The subject object
	 * @returns {boolean} True if it's empty object or null
	 */
	function isEmptyObjectOrNull(obj) {
	    if (obj === null) {
	        return true;
	    }
	    if (!isObject(obj)) {
	        return false;
	    }
	    for (var prop in obj) {
	        if (obj[prop] !== undefined) {
	            return false;
	        }
	    }
	    return true;
	}
	util$4.isEmptyObjectOrNull = isEmptyObjectOrNull;
	/**
	 * Verify if it's an object
	 * @param obj The subject
	 * @returns {boolean} True if it's an object
	 */
	function isObject(obj) {
	    return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;
	}
	util$4.isObject = isObject;
	/**
	 * Check and normalize given query and parameters.
	 * @param {string|{text: string, parameters: Object}} query the query to check.
	 * @param {Object} parameters
	 * @return {{validatedQuery: string|{text: string, parameters: Object}, params: Object}} the normalized query with parameters.
	 * @throws TypeError when either given query or parameters are invalid.
	 */
	function validateQueryAndParameters(query, parameters, opt) {
	    var _a, _b;
	    var validatedQuery = '';
	    var params = parameters !== null && parameters !== void 0 ? parameters : {};
	    var skipAsserts = (_a = opt === null || opt === void 0 ? void 0 : opt.skipAsserts) !== null && _a !== void 0 ? _a : false;
	    if (typeof query === 'string') {
	        validatedQuery = query;
	    }
	    else if (query instanceof String) {
	        validatedQuery = query.toString();
	    }
	    else if (typeof query === 'object' && query.text != null) {
	        validatedQuery = query.text;
	        params = (_b = query.parameters) !== null && _b !== void 0 ? _b : {};
	    }
	    if (!skipAsserts) {
	        assertCypherQuery(validatedQuery);
	        assertQueryParameters(params);
	    }
	    return { validatedQuery: validatedQuery, params: params };
	}
	util$4.validateQueryAndParameters = validateQueryAndParameters;
	/**
	 * Assert it's a object
	 * @param {any} obj The subject
	 * @param {string} objName The object name
	 * @returns {object} The subject object
	 * @throws {TypeError} when the supplied param is not an object
	 */
	function assertObject(obj, objName) {
	    if (!isObject(obj)) {
	        throw new TypeError(objName + ' expected to be an object but was: ' + (0, json_1$1.stringify)(obj));
	    }
	    return obj;
	}
	util$4.assertObject = assertObject;
	/**
	 * Assert it's a string
	 * @param {any} obj The subject
	 * @param {string} objName The object name
	 * @returns {string} The subject string
	 * @throws {TypeError} when the supplied param is not a string
	 */
	function assertString$1(obj, objName) {
	    if (!isString(obj)) {
	        throw new TypeError((0, json_1$1.stringify)(objName) + ' expected to be string but was: ' + (0, json_1$1.stringify)(obj));
	    }
	    return obj;
	}
	util$4.assertString = assertString$1;
	/**
	 * Assert it's a number
	 * @param {any} obj The subject
	 * @param {string} objName The object name
	 * @returns {number} The number
	 * @throws {TypeError} when the supplied param is not a number
	 */
	function assertNumber(obj, objName) {
	    if (typeof obj !== 'number') {
	        throw new TypeError(objName + ' expected to be a number but was: ' + (0, json_1$1.stringify)(obj));
	    }
	    return obj;
	}
	util$4.assertNumber = assertNumber;
	/**
	 * Assert it's a number or integer
	 * @param {any} obj The subject
	 * @param {string} objName The object name
	 * @returns {number|Integer} The subject object
	 * @throws {TypeError} when the supplied param is not a number or integer
	 */
	function assertNumberOrInteger(obj, objName) {
	    if (typeof obj !== 'number' && typeof obj !== 'bigint' && !(0, integer_1$3.isInt)(obj)) {
	        throw new TypeError(objName +
	            ' expected to be either a number or an Integer object but was: ' +
	            (0, json_1$1.stringify)(obj));
	    }
	    return obj;
	}
	util$4.assertNumberOrInteger = assertNumberOrInteger;
	/**
	 * Assert it's a valid datae
	 * @param {any} obj The subject
	 * @param {string} objName The object name
	 * @returns {Date} The valida date
	 * @throws {TypeError} when the supplied param is not a valid date
	 */
	function assertValidDate(obj, objName) {
	    if (Object.prototype.toString.call(obj) !== '[object Date]') {
	        throw new TypeError(objName +
	            ' expected to be a standard JavaScript Date but was: ' +
	            (0, json_1$1.stringify)(obj));
	    }
	    if (Number.isNaN(obj.getTime())) {
	        throw new TypeError(objName +
	            ' expected to be valid JavaScript Date but its time was NaN: ' +
	            (0, json_1$1.stringify)(obj));
	    }
	    return obj;
	}
	util$4.assertValidDate = assertValidDate;
	/**
	 * Validates a cypher query string
	 * @param {any} obj The query
	 * @returns {void}
	 * @throws {TypeError} if the query is not valid
	 */
	function assertCypherQuery(obj) {
	    assertString$1(obj, 'Cypher query');
	    if (obj.trim().length === 0) {
	        throw new TypeError('Cypher query is expected to be a non-empty string.');
	    }
	}
	/**
	 * Validates if the query parameters is an object
	 * @param {any} obj The parameters
	 * @returns {void}
	 * @throws {TypeError} if the parameters is not valid
	 */
	function assertQueryParameters(obj) {
	    if (!isObject(obj)) {
	        // objects created with `Object.create(null)` do not have a constructor property
	        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
	        var constructor = obj.constructor != null ? ' ' + obj.constructor.name : '';
	        throw new TypeError("Query parameters are expected to either be undefined/null or an object, given:".concat(constructor, " ").concat(JSON.stringify(obj)));
	    }
	}
	/**
	 * Verify if the supplied object is a string
	 *
	 * @param str The string
	 * @returns {boolean} True if the supplied object is an string
	 */
	function isString(str) {
	    return Object.prototype.toString.call(str) === '[object String]';
	}
	util$4.isString = isString;

	(function (exports) {
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.floorMod = exports.floorDiv = exports.assertValidZoneId = exports.assertValidNanosecond = exports.assertValidSecond = exports.assertValidMinute = exports.assertValidHour = exports.assertValidDay = exports.assertValidMonth = exports.assertValidYear = exports.timeZoneOffsetInSeconds = exports.totalNanoseconds = exports.newDate = exports.toStandardDate = exports.isoStringToStandardDate = exports.dateToIsoString = exports.timeZoneOffsetToIsoString = exports.timeToIsoString = exports.durationToIsoString = exports.dateToEpochDay = exports.localDateTimeToEpochSecond = exports.localTimeToNanoOfDay = exports.normalizeNanosecondsForDuration = exports.normalizeSecondsForDuration = exports.SECONDS_PER_DAY = exports.DAYS_PER_400_YEAR_CYCLE = exports.DAYS_0000_TO_1970 = exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE = exports.NANOS_PER_MILLISECOND = exports.NANOS_PER_SECOND = exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE = exports.MINUTES_PER_HOUR = exports.NANOSECOND_OF_SECOND_RANGE = exports.SECOND_OF_MINUTE_RANGE = exports.MINUTE_OF_HOUR_RANGE = exports.HOUR_OF_DAY_RANGE = exports.DAY_OF_MONTH_RANGE = exports.MONTH_OF_YEAR_RANGE = exports.YEAR_RANGE = void 0;
	var integer_1 = __importStar(integer);
	var error_1 = error;
	var util_1 = util$4;
	/*
	  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.

	  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived
	  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere
	  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.

	  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the
	  conversion functions.
	 */
	var ValueRange = /** @class */ (function () {
	    function ValueRange(min, max) {
	        this._minNumber = min;
	        this._maxNumber = max;
	        this._minInteger = (0, integer_1.int)(min);
	        this._maxInteger = (0, integer_1.int)(max);
	    }
	    ValueRange.prototype.contains = function (value) {
	        if ((0, integer_1.isInt)(value) && value instanceof integer_1.default) {
	            return (value.greaterThanOrEqual(this._minInteger) &&
	                value.lessThanOrEqual(this._maxInteger));
	        }
	        else if (typeof value === 'bigint') {
	            var intValue = (0, integer_1.int)(value);
	            return (intValue.greaterThanOrEqual(this._minInteger) &&
	                intValue.lessThanOrEqual(this._maxInteger));
	        }
	        else {
	            return value >= this._minNumber && value <= this._maxNumber;
	        }
	    };
	    ValueRange.prototype.toString = function () {
	        return "[".concat(this._minNumber, ", ").concat(this._maxNumber, "]");
	    };
	    return ValueRange;
	}());
	exports.YEAR_RANGE = new ValueRange(-999999999, 999999999);
	exports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);
	exports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);
	exports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);
	exports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);
	exports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);
	exports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);
	exports.MINUTES_PER_HOUR = 60;
	exports.SECONDS_PER_MINUTE = 60;
	exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;
	exports.NANOS_PER_SECOND = 1000000000;
	exports.NANOS_PER_MILLISECOND = 1000000;
	exports.NANOS_PER_MINUTE = exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;
	exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;
	exports.DAYS_0000_TO_1970 = 719528;
	exports.DAYS_PER_400_YEAR_CYCLE = 146097;
	exports.SECONDS_PER_DAY = 86400;
	function normalizeSecondsForDuration(seconds, nanoseconds) {
	    return (0, integer_1.int)(seconds).add(floorDiv(nanoseconds, exports.NANOS_PER_SECOND));
	}
	exports.normalizeSecondsForDuration = normalizeSecondsForDuration;
	function normalizeNanosecondsForDuration(nanoseconds) {
	    return floorMod(nanoseconds, exports.NANOS_PER_SECOND);
	}
	exports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;
	/**
	 * Converts given local time into a single integer representing this same time in nanoseconds of the day.
	 * @param {Integer|number|string} hour the hour of the local time to convert.
	 * @param {Integer|number|string} minute the minute of the local time to convert.
	 * @param {Integer|number|string} second the second of the local time to convert.
	 * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.
	 * @return {Integer} nanoseconds representing the given local time.
	 */
	function localTimeToNanoOfDay(hour, minute, second, nanosecond) {
	    hour = (0, integer_1.int)(hour);
	    minute = (0, integer_1.int)(minute);
	    second = (0, integer_1.int)(second);
	    nanosecond = (0, integer_1.int)(nanosecond);
	    var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);
	    totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));
	    totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));
	    return totalNanos.add(nanosecond);
	}
	exports.localTimeToNanoOfDay = localTimeToNanoOfDay;
	/**
	 * Converts given local date time into a single integer representing this same time in epoch seconds UTC.
	 * @param {Integer|number|string} year the year of the local date-time to convert.
	 * @param {Integer|number|string} month the month of the local date-time to convert.
	 * @param {Integer|number|string} day the day of the local date-time to convert.
	 * @param {Integer|number|string} hour the hour of the local date-time to convert.
	 * @param {Integer|number|string} minute the minute of the local date-time to convert.
	 * @param {Integer|number|string} second the second of the local date-time to convert.
	 * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.
	 * @return {Integer} epoch second in UTC representing the given local date time.
	 */
	function localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {
	    var epochDay = dateToEpochDay(year, month, day);
	    var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);
	    return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);
	}
	exports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;
	/**
	 * Converts given local date into a single integer representing it's epoch day.
	 * @param {Integer|number|string} year the year of the local date to convert.
	 * @param {Integer|number|string} month the month of the local date to convert.
	 * @param {Integer|number|string} day the day of the local date to convert.
	 * @return {Integer} epoch day representing the given date.
	 */
	function dateToEpochDay(year, month, day) {
	    year = (0, integer_1.int)(year);
	    month = (0, integer_1.int)(month);
	    day = (0, integer_1.int)(day);
	    var epochDay = year.multiply(365);
	    if (year.greaterThanOrEqual(0)) {
	        epochDay = epochDay.add(year
	            .add(3)
	            .div(4)
	            .subtract(year.add(99).div(100))
	            .add(year.add(399).div(400)));
	    }
	    else {
	        epochDay = epochDay.subtract(year
	            .div(-4)
	            .subtract(year.div(-100))
	            .add(year.div(-400)));
	    }
	    epochDay = epochDay.add(month
	        .multiply(367)
	        .subtract(362)
	        .div(12));
	    epochDay = epochDay.add(day.subtract(1));
	    if (month.greaterThan(2)) {
	        epochDay = epochDay.subtract(1);
	        if (!isLeapYear(year)) {
	            epochDay = epochDay.subtract(1);
	        }
	    }
	    return epochDay.subtract(exports.DAYS_0000_TO_1970);
	}
	exports.dateToEpochDay = dateToEpochDay;
	/**
	 * Format given duration to an ISO 8601 string.
	 * @param {Integer|number|string} months the number of months.
	 * @param {Integer|number|string} days the number of days.
	 * @param {Integer|number|string} seconds the number of seconds.
	 * @param {Integer|number|string} nanoseconds the number of nanoseconds.
	 * @return {string} ISO string that represents given duration.
	 */
	function durationToIsoString(months, days, seconds, nanoseconds) {
	    var monthsString = formatNumber(months);
	    var daysString = formatNumber(days);
	    var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);
	    return "P".concat(monthsString, "M").concat(daysString, "DT").concat(secondsAndNanosecondsString, "S");
	}
	exports.durationToIsoString = durationToIsoString;
	/**
	 * Formats given time to an ISO 8601 string.
	 * @param {Integer|number|string} hour the hour value.
	 * @param {Integer|number|string} minute the minute value.
	 * @param {Integer|number|string} second the second value.
	 * @param {Integer|number|string} nanosecond the nanosecond value.
	 * @return {string} ISO string that represents given time.
	 */
	function timeToIsoString(hour, minute, second, nanosecond) {
	    var hourString = formatNumber(hour, 2);
	    var minuteString = formatNumber(minute, 2);
	    var secondString = formatNumber(second, 2);
	    var nanosecondString = formatNanosecond(nanosecond);
	    return "".concat(hourString, ":").concat(minuteString, ":").concat(secondString).concat(nanosecondString);
	}
	exports.timeToIsoString = timeToIsoString;
	/**
	 * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.
	 * @param {Integer|number|string} offsetSeconds the offset in seconds.
	 * @return {string} ISO string that represents given offset.
	 */
	function timeZoneOffsetToIsoString(offsetSeconds) {
	    offsetSeconds = (0, integer_1.int)(offsetSeconds);
	    if (offsetSeconds.equals(0)) {
	        return 'Z';
	    }
	    var isNegative = offsetSeconds.isNegative();
	    if (isNegative) {
	        offsetSeconds = offsetSeconds.multiply(-1);
	    }
	    var signPrefix = isNegative ? '-' : '+';
	    var hours = formatNumber(offsetSeconds.div(exports.SECONDS_PER_HOUR), 2);
	    var minutes = formatNumber(offsetSeconds.div(exports.SECONDS_PER_MINUTE).modulo(exports.MINUTES_PER_HOUR), 2);
	    var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);
	    var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);
	    return seconds != null
	        ? "".concat(signPrefix).concat(hours, ":").concat(minutes, ":").concat(seconds)
	        : "".concat(signPrefix).concat(hours, ":").concat(minutes);
	}
	exports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;
	/**
	 * Formats given date to an ISO 8601 string.
	 * @param {Integer|number|string} year the date year.
	 * @param {Integer|number|string} month the date month.
	 * @param {Integer|number|string} day the date day.
	 * @return {string} ISO string that represents given date.
	 */
	function dateToIsoString(year, month, day) {
	    var yearString = formatYear(year);
	    var monthString = formatNumber(month, 2);
	    var dayString = formatNumber(day, 2);
	    return "".concat(yearString, "-").concat(monthString, "-").concat(dayString);
	}
	exports.dateToIsoString = dateToIsoString;
	/**
	 * Convert the given iso date string to a JavaScript Date object
	 *
	 * @param {string} isoString The iso date string
	 * @returns {Date} the date
	 */
	function isoStringToStandardDate(isoString) {
	    return new Date(isoString);
	}
	exports.isoStringToStandardDate = isoStringToStandardDate;
	/**
	 * Convert the given utc timestamp to a JavaScript Date object
	 *
	 * @param {number} utc Timestamp in UTC
	 * @returns {Date} the date
	 */
	function toStandardDate(utc) {
	    return new Date(utc);
	}
	exports.toStandardDate = toStandardDate;
	/**
	 * Shortcut for creating a new StandardDate
	 * @param date
	 * @returns {Date} the standard date
	 */
	function newDate(date) {
	    return new Date(date);
	}
	exports.newDate = newDate;
	/**
	 * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.
	 * @param {global.Date} standardDate the standard JavaScript date.
	 * @param {Integer|number|bigint|undefined} nanoseconds the optional number of nanoseconds.
	 * @return {Integer|number|bigint} the total amount of nanoseconds.
	 */
	function totalNanoseconds(standardDate, nanoseconds) {
	    nanoseconds = nanoseconds !== null && nanoseconds !== void 0 ? nanoseconds : 0;
	    var nanosFromMillis = standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;
	    return add(nanoseconds, nanosFromMillis);
	}
	exports.totalNanoseconds = totalNanoseconds;
	/**
	 * Get the time zone offset in seconds from the given standard JavaScript date.
	 *
	 * <b>Implementation note:</b>
	 * Time zone offset returned by the standard JavaScript date is the difference, in minutes, from local time to UTC.
	 * So positive value means offset is behind UTC and negative value means it is ahead.
	 * For Neo4j temporal types, like `Time` or `DateTime` offset is in seconds and represents difference from UTC to local time.
	 * This is different from standard JavaScript dates and that's why implementation negates the returned value.
	 *
	 * @param {global.Date} standardDate the standard JavaScript date.
	 * @return {number} the time zone offset in seconds.
	 */
	function timeZoneOffsetInSeconds(standardDate) {
	    var secondsPortion = standardDate.getSeconds() >= standardDate.getUTCSeconds()
	        ? standardDate.getSeconds() - standardDate.getUTCSeconds()
	        : standardDate.getSeconds() - standardDate.getUTCSeconds() + 60;
	    var offsetInMinutes = standardDate.getTimezoneOffset();
	    if (offsetInMinutes === 0) {
	        return 0 + secondsPortion;
	    }
	    return -1 * offsetInMinutes * exports.SECONDS_PER_MINUTE + secondsPortion;
	}
	exports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;
	/**
	 * Assert that the year value is valid.
	 * @param {Integer|number} year the value to check.
	 * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.
	 */
	function assertValidYear(year) {
	    return assertValidTemporalValue(year, exports.YEAR_RANGE, 'Year');
	}
	exports.assertValidYear = assertValidYear;
	/**
	 * Assert that the month value is valid.
	 * @param {Integer|number} month the value to check.
	 * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.
	 */
	function assertValidMonth(month) {
	    return assertValidTemporalValue(month, exports.MONTH_OF_YEAR_RANGE, 'Month');
	}
	exports.assertValidMonth = assertValidMonth;
	/**
	 * Assert that the day value is valid.
	 * @param {Integer|number} day the value to check.
	 * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.
	 */
	function assertValidDay(day) {
	    return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, 'Day');
	}
	exports.assertValidDay = assertValidDay;
	/**
	 * Assert that the hour value is valid.
	 * @param {Integer|number} hour the value to check.
	 * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.
	 */
	function assertValidHour(hour) {
	    return assertValidTemporalValue(hour, exports.HOUR_OF_DAY_RANGE, 'Hour');
	}
	exports.assertValidHour = assertValidHour;
	/**
	 * Assert that the minute value is valid.
	 * @param {Integer|number} minute the value to check.
	 * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.
	 */
	function assertValidMinute(minute) {
	    return assertValidTemporalValue(minute, exports.MINUTE_OF_HOUR_RANGE, 'Minute');
	}
	exports.assertValidMinute = assertValidMinute;
	/**
	 * Assert that the second value is valid.
	 * @param {Integer|number} second the value to check.
	 * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.
	 */
	function assertValidSecond(second) {
	    return assertValidTemporalValue(second, exports.SECOND_OF_MINUTE_RANGE, 'Second');
	}
	exports.assertValidSecond = assertValidSecond;
	/**
	 * Assert that the nanosecond value is valid.
	 * @param {Integer|number} nanosecond the value to check.
	 * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.
	 */
	function assertValidNanosecond(nanosecond) {
	    return assertValidTemporalValue(nanosecond, exports.NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');
	}
	exports.assertValidNanosecond = assertValidNanosecond;
	function assertValidZoneId(fieldName, zoneId) {
	    try {
	        Intl.DateTimeFormat(undefined, { timeZone: zoneId });
	    }
	    catch (e) {
	        throw (0, error_1.newError)("".concat(fieldName, " is expected to be a valid ZoneId but was: \"").concat(zoneId, "\""));
	    }
	}
	exports.assertValidZoneId = assertValidZoneId;
	/**
	 * Check if the given value is of expected type and is in the expected range.
	 * @param {Integer|number} value the value to check.
	 * @param {ValueRange} range the range.
	 * @param {string} name the name of the value.
	 * @return {Integer|number} the value if valid. Exception is thrown otherwise.
	 */
	function assertValidTemporalValue(value, range, name) {
	    (0, util_1.assertNumberOrInteger)(value, name);
	    if (!range.contains(value)) {
	        throw (0, error_1.newError)("".concat(name, " is expected to be in range ").concat(range.toString(), " but was: ").concat(value.toString()));
	    }
	    return value;
	}
	/**
	 * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.
	 * @param {Integer|number|string} hour the hour of the local time.
	 * @param {Integer|number|string} minute the minute of the local time.
	 * @param {Integer|number|string} second the second of the local time.
	 * @return {Integer} seconds representing the given local time.
	 */
	function localTimeToSecondOfDay(hour, minute, second) {
	    hour = (0, integer_1.int)(hour);
	    minute = (0, integer_1.int)(minute);
	    second = (0, integer_1.int)(second);
	    var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);
	    totalSeconds = totalSeconds.add(minute.multiply(exports.SECONDS_PER_MINUTE));
	    return totalSeconds.add(second);
	}
	/**
	 * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.
	 * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.
	 * @return {boolean} `true` if given year is a leap year, `false` otherwise.
	 */
	function isLeapYear(year) {
	    year = (0, integer_1.int)(year);
	    if (!year.modulo(4).equals(0)) {
	        return false;
	    }
	    else if (!year.modulo(100).equals(0)) {
	        return true;
	    }
	    else if (!year.modulo(400).equals(0)) {
	        return false;
	    }
	    else {
	        return true;
	    }
	}
	/**
	 * @param {Integer|number|string} x the divident.
	 * @param {Integer|number|string} y the divisor.
	 * @return {Integer} the result.
	 */
	function floorDiv(x, y) {
	    x = (0, integer_1.int)(x);
	    y = (0, integer_1.int)(y);
	    var result = x.div(y);
	    if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {
	        result = result.subtract(1);
	    }
	    return result;
	}
	exports.floorDiv = floorDiv;
	/**
	 * @param {Integer|number|string} x the divident.
	 * @param {Integer|number|string} y the divisor.
	 * @return {Integer} the result.
	 */
	function floorMod(x, y) {
	    x = (0, integer_1.int)(x);
	    y = (0, integer_1.int)(y);
	    return x.subtract(floorDiv(x, y).multiply(y));
	}
	exports.floorMod = floorMod;
	/**
	 * @param {Integer|number|string} seconds the number of seconds to format.
	 * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.
	 * @return {string} formatted value.
	 */
	function formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {
	    seconds = (0, integer_1.int)(seconds);
	    nanoseconds = (0, integer_1.int)(nanoseconds);
	    var secondsString;
	    var nanosecondsString;
	    var secondsNegative = seconds.isNegative();
	    var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);
	    if (secondsNegative && nanosecondsGreaterThanZero) {
	        if (seconds.equals(-1)) {
	            secondsString = '-0';
	        }
	        else {
	            secondsString = seconds.add(1).toString();
	        }
	    }
	    else {
	        secondsString = seconds.toString();
	    }
	    if (nanosecondsGreaterThanZero) {
	        if (secondsNegative) {
	            nanosecondsString = formatNanosecond(nanoseconds
	                .negate()
	                .add(2 * exports.NANOS_PER_SECOND)
	                .modulo(exports.NANOS_PER_SECOND));
	        }
	        else {
	            nanosecondsString = formatNanosecond(nanoseconds.add(exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));
	        }
	    }
	    return nanosecondsString != null ? secondsString + nanosecondsString : secondsString;
	}
	/**
	 * @param {Integer|number|string} value the number of nanoseconds to format.
	 * @return {string} formatted and possibly left-padded nanoseconds part as string.
	 */
	function formatNanosecond(value) {
	    value = (0, integer_1.int)(value);
	    return value.equals(0) ? '' : '.' + formatNumber(value, 9);
	}
	/**
	 *
	 * @param {Integer|number|string} year The year to be formatted
	 * @return {string} formatted year
	 */
	function formatYear(year) {
	    var yearInteger = (0, integer_1.int)(year);
	    if (yearInteger.isNegative() || yearInteger.greaterThan(9999)) {
	        return formatNumber(yearInteger, 6, { usePositiveSign: true });
	    }
	    return formatNumber(yearInteger, 4);
	}
	/**
	 * @param {Integer|number|string} num the number to format.
	 * @param {number} [stringLength=undefined] the string length to left-pad to.
	 * @return {string} formatted and possibly left-padded number as string.
	 */
	function formatNumber(num, stringLength, params) {
	    num = (0, integer_1.int)(num);
	    var isNegative = num.isNegative();
	    if (isNegative) {
	        num = num.negate();
	    }
	    var numString = num.toString();
	    if (stringLength != null) {
	        // left pad the string with zeroes
	        while (numString.length < stringLength) {
	            numString = '0' + numString;
	        }
	    }
	    if (isNegative) {
	        return '-' + numString;
	    }
	    else if ((params === null || params === void 0 ? void 0 : params.usePositiveSign) === true) {
	        return '+' + numString;
	    }
	    return numString;
	}
	function add(x, y) {
	    if (x instanceof integer_1.default) {
	        return x.add(y);
	    }
	    else if (typeof x === 'bigint') {
	        return x + BigInt(y);
	    }
	    return x + y;
	}
	}(temporalUtil$1));

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding$a = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$a = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$a = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$a(result, mod, k);
	    __setModuleDefault$a(result, mod);
	    return result;
	};
	var __read$b = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	Object.defineProperty(temporalTypes, "__esModule", { value: true });
	temporalTypes.isDateTime = temporalTypes.DateTime = temporalTypes.isLocalDateTime = temporalTypes.LocalDateTime = temporalTypes.isDate = temporalTypes.Date = temporalTypes.isTime = temporalTypes.Time = temporalTypes.isLocalTime = temporalTypes.LocalTime = temporalTypes.isDuration = temporalTypes.Duration = void 0;
	var util$3 = __importStar$a(temporalUtil$1);
	var util_1$7 = util$4;
	var error_1$8 = error;
	var integer_1$2 = __importStar$a(integer);
	var IDENTIFIER_PROPERTY_ATTRIBUTES$1 = {
	    value: true,
	    enumerable: false,
	    configurable: false,
	    writable: false
	};
	var DURATION_IDENTIFIER_PROPERTY = '__isDuration__';
	var LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';
	var TIME_IDENTIFIER_PROPERTY = '__isTime__';
	var DATE_IDENTIFIER_PROPERTY = '__isDate__';
	var LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';
	var DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';
	/**
	 * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).
	 * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.
	 */
	var Duration = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {NumberOrInteger} months - The number of months for the new duration.
	     * @param {NumberOrInteger} days - The number of days for the new duration.
	     * @param {NumberOrInteger} seconds - The number of seconds for the new duration.
	     * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.
	     */
	    function Duration(months, days, seconds, nanoseconds) {
	        /**
	         * The number of months.
	         * @type {NumberOrInteger}
	         */
	        this.months = (0, util_1$7.assertNumberOrInteger)(months, 'Months');
	        /**
	         * The number of days.
	         * @type {NumberOrInteger}
	         */
	        this.days = (0, util_1$7.assertNumberOrInteger)(days, 'Days');
	        (0, util_1$7.assertNumberOrInteger)(seconds, 'Seconds');
	        (0, util_1$7.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');
	        /**
	         * The number of seconds.
	         * @type {NumberOrInteger}
	         */
	        this.seconds = util$3.normalizeSecondsForDuration(seconds, nanoseconds);
	        /**
	         * The number of nanoseconds.
	         * @type {NumberOrInteger}
	         */
	        this.nanoseconds = util$3.normalizeNanosecondsForDuration(nanoseconds);
	        Object.freeze(this);
	    }
	    /**
	     * @ignore
	     */
	    Duration.prototype.toString = function () {
	        return util$3.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);
	    };
	    return Duration;
	}());
	temporalTypes.Duration = Duration;
	Object.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES$1);
	/**
	 * Test if given object is an instance of {@link Duration} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.
	 */
	function isDuration(obj) {
	    return hasIdentifierProperty$1(obj, DURATION_IDENTIFIER_PROPERTY);
	}
	temporalTypes.isDuration = isDuration;
	/**
	 * Represents an instant capturing the time of day, but not the date, nor the timezone.
	 * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.
	 */
	var LocalTime = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {NumberOrInteger} hour - The hour for the new local time.
	     * @param {NumberOrInteger} minute - The minute for the new local time.
	     * @param {NumberOrInteger} second - The second for the new local time.
	     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.
	     */
	    function LocalTime(hour, minute, second, nanosecond) {
	        /**
	         * The hour.
	         * @type {NumberOrInteger}
	         */
	        this.hour = util$3.assertValidHour(hour);
	        /**
	         * The minute.
	         * @type {NumberOrInteger}
	         */
	        this.minute = util$3.assertValidMinute(minute);
	        /**
	         * The second.
	         * @type {NumberOrInteger}
	         */
	        this.second = util$3.assertValidSecond(second);
	        /**
	         * The nanosecond.
	         * @type {NumberOrInteger}
	         */
	        this.nanosecond = util$3.assertValidNanosecond(nanosecond);
	        Object.freeze(this);
	    }
	    /**
	     * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.
	     * Year, month, day and time zone offset components of the given date are ignored.
	     * @param {global.Date} standardDate - The standard JavaScript date to convert.
	     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.
	     * @return {LocalTime<number>} New LocalTime.
	     */
	    LocalTime.fromStandardDate = function (standardDate, nanosecond) {
	        verifyStandardDateAndNanos(standardDate, nanosecond);
	        var totalNanoseconds = util$3.totalNanoseconds(standardDate, nanosecond);
	        return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1$2.default
	            ? totalNanoseconds.toInt()
	            : typeof totalNanoseconds === 'bigint'
	                ? (0, integer_1$2.int)(totalNanoseconds).toInt()
	                : totalNanoseconds);
	    };
	    /**
	     * @ignore
	     */
	    LocalTime.prototype.toString = function () {
	        return util$3.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);
	    };
	    return LocalTime;
	}());
	temporalTypes.LocalTime = LocalTime;
	Object.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES$1);
	/**
	 * Test if given object is an instance of {@link LocalTime} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.
	 */
	function isLocalTime(obj) {
	    return hasIdentifierProperty$1(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);
	}
	temporalTypes.isLocalTime = isLocalTime;
	/**
	 * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.
	 * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.
	 */
	var Time = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {NumberOrInteger} hour - The hour for the new local time.
	     * @param {NumberOrInteger} minute - The minute for the new local time.
	     * @param {NumberOrInteger} second - The second for the new local time.
	     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.
	     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.
	     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.
	     */
	    function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {
	        /**
	         * The hour.
	         * @type {NumberOrInteger}
	         */
	        this.hour = util$3.assertValidHour(hour);
	        /**
	         * The minute.
	         * @type {NumberOrInteger}
	         */
	        this.minute = util$3.assertValidMinute(minute);
	        /**
	         * The second.
	         * @type {NumberOrInteger}
	         */
	        this.second = util$3.assertValidSecond(second);
	        /**
	         * The nanosecond.
	         * @type {NumberOrInteger}
	         */
	        this.nanosecond = util$3.assertValidNanosecond(nanosecond);
	        /**
	         * The time zone offset in seconds.
	         * @type {NumberOrInteger}
	         */
	        this.timeZoneOffsetSeconds = (0, util_1$7.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');
	        Object.freeze(this);
	    }
	    /**
	     * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.
	     * Year, month and day components of the given date are ignored.
	     * @param {global.Date} standardDate - The standard JavaScript date to convert.
	     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.
	     * @return {Time<number>} New Time.
	     */
	    Time.fromStandardDate = function (standardDate, nanosecond) {
	        verifyStandardDateAndNanos(standardDate, nanosecond);
	        return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1$2.toNumber)(util$3.totalNanoseconds(standardDate, nanosecond)), util$3.timeZoneOffsetInSeconds(standardDate));
	    };
	    /**
	     * @ignore
	     */
	    Time.prototype.toString = function () {
	        return (util$3.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util$3.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds));
	    };
	    return Time;
	}());
	temporalTypes.Time = Time;
	Object.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES$1);
	/**
	 * Test if given object is an instance of {@link Time} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.
	 */
	function isTime(obj) {
	    return hasIdentifierProperty$1(obj, TIME_IDENTIFIER_PROPERTY);
	}
	temporalTypes.isTime = isTime;
	/**
	 * Represents an instant capturing the date, but not the time, nor the timezone.
	 * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.
	 */
	var Date$1 = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {NumberOrInteger} year - The year for the new local date.
	     * @param {NumberOrInteger} month - The month for the new local date.
	     * @param {NumberOrInteger} day - The day for the new local date.
	     */
	    function Date(year, month, day) {
	        /**
	         * The year.
	         * @type {NumberOrInteger}
	         */
	        this.year = util$3.assertValidYear(year);
	        /**
	         * The month.
	         * @type {NumberOrInteger}
	         */
	        this.month = util$3.assertValidMonth(month);
	        /**
	         * The day.
	         * @type {NumberOrInteger}
	         */
	        this.day = util$3.assertValidDay(day);
	        Object.freeze(this);
	    }
	    /**
	     * Create a {@link Date} object from the given standard JavaScript `Date`.
	     * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.
	     * @param {global.Date} standardDate - The standard JavaScript date to convert.
	     * @return {Date} New Date.
	     */
	    Date.fromStandardDate = function (standardDate) {
	        verifyStandardDateAndNanos(standardDate);
	        return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());
	    };
	    /**
	     * Convert date to standard JavaScript `Date`.
	     *
	     * The time component of the returned `Date` is set to midnight
	     * and the time zone is set to UTC.
	     *
	     * @returns {StandardDate} Standard JavaScript `Date` at `00:00:00.000` UTC.
	     */
	    Date.prototype.toStandardDate = function () {
	        return util$3.isoStringToStandardDate(this.toString());
	    };
	    /**
	     * @ignore
	     */
	    Date.prototype.toString = function () {
	        return util$3.dateToIsoString(this.year, this.month, this.day);
	    };
	    return Date;
	}());
	temporalTypes.Date = Date$1;
	Object.defineProperty(Date$1.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES$1);
	/**
	 * Test if given object is an instance of {@link Date} class.
	 * @param {Object} obj - The object to test.
	 * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.
	 */
	function isDate(obj) {
	    return hasIdentifierProperty$1(obj, DATE_IDENTIFIER_PROPERTY);
	}
	temporalTypes.isDate = isDate;
	/**
	 * Represents an instant capturing the date and the time, but not the timezone.
	 * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.
	 */
	var LocalDateTime = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {NumberOrInteger} year - The year for the new local date.
	     * @param {NumberOrInteger} month - The month for the new local date.
	     * @param {NumberOrInteger} day - The day for the new local date.
	     * @param {NumberOrInteger} hour - The hour for the new local time.
	     * @param {NumberOrInteger} minute - The minute for the new local time.
	     * @param {NumberOrInteger} second - The second for the new local time.
	     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.
	     */
	    function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {
	        /**
	         * The year.
	         * @type {NumberOrInteger}
	         */
	        this.year = util$3.assertValidYear(year);
	        /**
	         * The month.
	         * @type {NumberOrInteger}
	         */
	        this.month = util$3.assertValidMonth(month);
	        /**
	         * The day.
	         * @type {NumberOrInteger}
	         */
	        this.day = util$3.assertValidDay(day);
	        /**
	         * The hour.
	         * @type {NumberOrInteger}
	         */
	        this.hour = util$3.assertValidHour(hour);
	        /**
	         * The minute.
	         * @type {NumberOrInteger}
	         */
	        this.minute = util$3.assertValidMinute(minute);
	        /**
	         * The second.
	         * @type {NumberOrInteger}
	         */
	        this.second = util$3.assertValidSecond(second);
	        /**
	         * The nanosecond.
	         * @type {NumberOrInteger}
	         */
	        this.nanosecond = util$3.assertValidNanosecond(nanosecond);
	        Object.freeze(this);
	    }
	    /**
	     * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.
	     * Time zone offset component of the given date is ignored.
	     * @param {global.Date} standardDate - The standard JavaScript date to convert.
	     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.
	     * @return {LocalDateTime} New LocalDateTime.
	     */
	    LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {
	        verifyStandardDateAndNanos(standardDate, nanosecond);
	        return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1$2.toNumber)(util$3.totalNanoseconds(standardDate, nanosecond)));
	    };
	    /**
	     * Convert date to standard JavaScript `Date`.
	     *
	     * @returns {StandardDate} Standard JavaScript `Date` at the local timezone
	     */
	    LocalDateTime.prototype.toStandardDate = function () {
	        return util$3.isoStringToStandardDate(this.toString());
	    };
	    /**
	     * @ignore
	     */
	    LocalDateTime.prototype.toString = function () {
	        return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);
	    };
	    return LocalDateTime;
	}());
	temporalTypes.LocalDateTime = LocalDateTime;
	Object.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES$1);
	/**
	 * Test if given object is an instance of {@link LocalDateTime} class.
	 * @param {Object} obj - The object to test.
	 * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.
	 */
	function isLocalDateTime(obj) {
	    return hasIdentifierProperty$1(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);
	}
	temporalTypes.isLocalDateTime = isLocalDateTime;
	/**
	 * Represents an instant capturing the date, the time and the timezone identifier.
	 * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.
	 */
	var DateTime = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {NumberOrInteger} year - The year for the new date-time.
	     * @param {NumberOrInteger} month - The month for the new date-time.
	     * @param {NumberOrInteger} day - The day for the new date-time.
	     * @param {NumberOrInteger} hour - The hour for the new date-time.
	     * @param {NumberOrInteger} minute - The minute for the new date-time.
	     * @param {NumberOrInteger} second - The second for the new date-time.
	     * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.
	     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.
	     * Value represents the difference, in seconds, from UTC to local time.
	     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.
	     * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.
	     */
	    function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {
	        /**
	         * The year.
	         * @type {NumberOrInteger}
	         */
	        this.year = util$3.assertValidYear(year);
	        /**
	         * The month.
	         * @type {NumberOrInteger}
	         */
	        this.month = util$3.assertValidMonth(month);
	        /**
	         * The day.
	         * @type {NumberOrInteger}
	         */
	        this.day = util$3.assertValidDay(day);
	        /**
	         * The hour.
	         * @type {NumberOrInteger}
	         */
	        this.hour = util$3.assertValidHour(hour);
	        /**
	         * The minute.
	         * @type {NumberOrInteger}
	         */
	        this.minute = util$3.assertValidMinute(minute);
	        /**
	         * The second.
	         * @type {NumberOrInteger}
	         */
	        this.second = util$3.assertValidSecond(second);
	        /**
	         * The nanosecond.
	         * @type {NumberOrInteger}
	         */
	        this.nanosecond = util$3.assertValidNanosecond(nanosecond);
	        var _a = __read$b(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2), offset = _a[0], id = _a[1];
	        /**
	         * The time zone offset in seconds.
	         *
	         * *Either this or {@link timeZoneId} is defined.*
	         *
	         * @type {NumberOrInteger}
	         */
	        this.timeZoneOffsetSeconds = offset;
	        /**
	         * The time zone id.
	         *
	         * *Either this or {@link timeZoneOffsetSeconds} is defined.*
	         *
	         * @type {string}
	         */
	        this.timeZoneId = id !== null && id !== void 0 ? id : undefined;
	        Object.freeze(this);
	    }
	    /**
	     * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.
	     * @param {global.Date} standardDate - The standard JavaScript date to convert.
	     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.
	     * @return {DateTime} New DateTime.
	     */
	    DateTime.fromStandardDate = function (standardDate, nanosecond) {
	        verifyStandardDateAndNanos(standardDate, nanosecond);
	        return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1$2.toNumber)(util$3.totalNanoseconds(standardDate, nanosecond)), util$3.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);
	    };
	    /**
	     * Convert date to standard JavaScript `Date`.
	     *
	     * @returns {StandardDate} Standard JavaScript `Date` at the defined time zone offset
	     * @throws {Error} If the time zone offset is not defined in the object.
	     */
	    DateTime.prototype.toStandardDate = function () {
	        return util$3.toStandardDate(this._toUTC());
	    };
	    /**
	     * @ignore
	     */
	    DateTime.prototype.toString = function () {
	        var _a;
	        var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);
	        var timeOffset = this.timeZoneOffsetSeconds != null
	            ? util$3.timeZoneOffsetToIsoString((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0)
	            : '';
	        var timeZoneStr = this.timeZoneId != null
	            ? "[".concat(this.timeZoneId, "]")
	            : '';
	        return localDateTimeStr + timeOffset + timeZoneStr;
	    };
	    /**
	     * @private
	     * @returns {number}
	     */
	    DateTime.prototype._toUTC = function () {
	        var _a;
	        if (this.timeZoneOffsetSeconds === undefined) {
	            throw new Error('Requires DateTime created with time zone offset');
	        }
	        var epochSecond = util$3.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);
	        var utcSecond = epochSecond.subtract((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0);
	        return (0, integer_1$2.int)(utcSecond)
	            .multiply(1000)
	            .add((0, integer_1$2.int)(this.nanosecond).div(1000000))
	            .toNumber();
	    };
	    return DateTime;
	}());
	temporalTypes.DateTime = DateTime;
	Object.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES$1);
	/**
	 * Test if given object is an instance of {@link DateTime} class.
	 * @param {Object} obj - The object to test.
	 * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.
	 */
	function isDateTime(obj) {
	    return hasIdentifierProperty$1(obj, DATE_TIME_IDENTIFIER_PROPERTY);
	}
	temporalTypes.isDateTime = isDateTime;
	function hasIdentifierProperty$1(obj, property) {
	    return obj != null && obj[property] === true;
	}
	function localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {
	    return (util$3.dateToIsoString(year, month, day) +
	        'T' +
	        util$3.timeToIsoString(hour, minute, second, nanosecond));
	}
	/**
	 * @private
	 * @param {NumberOrInteger} timeZoneOffsetSeconds
	 * @param {string | null } timeZoneId
	 * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}
	 */
	function verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {
	    var offsetDefined = timeZoneOffsetSeconds !== null && timeZoneOffsetSeconds !== undefined;
	    var idDefined = timeZoneId !== null && timeZoneId !== undefined && timeZoneId !== '';
	    if (!offsetDefined && !idDefined) {
	        throw (0, error_1$8.newError)(
	        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
	        "Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: ".concat(timeZoneOffsetSeconds, " and id: ").concat(timeZoneId));
	    }
	    var result = [undefined, undefined];
	    if (offsetDefined) {
	        (0, util_1$7.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');
	        result[0] = timeZoneOffsetSeconds;
	    }
	    if (idDefined) {
	        (0, util_1$7.assertString)(timeZoneId, 'Time zone ID');
	        util$3.assertValidZoneId('Time zone ID', timeZoneId);
	        result[1] = timeZoneId;
	    }
	    return result;
	}
	/**
	 * @private
	 * @param {StandardDate} standardDate
	 * @param {NumberOrInteger} nanosecond
	 * @returns {void}
	 */
	function verifyStandardDateAndNanos(standardDate, nanosecond) {
	    (0, util_1$7.assertValidDate)(standardDate, 'Standard date');
	    if (nanosecond !== null && nanosecond !== undefined) {
	        (0, util_1$7.assertNumberOrInteger)(nanosecond, 'Nanosecond');
	    }
	}

	var graphTypes = {};

	Object.defineProperty(graphTypes, "__esModule", { value: true });
	graphTypes.isPathSegment = graphTypes.PathSegment = graphTypes.isPath = graphTypes.Path = graphTypes.isUnboundRelationship = graphTypes.UnboundRelationship = graphTypes.isRelationship = graphTypes.Relationship = graphTypes.isNode = graphTypes.Node = void 0;
	var json_1 = json;
	var IDENTIFIER_PROPERTY_ATTRIBUTES = {
	    value: true,
	    enumerable: false,
	    configurable: false,
	    writable: false
	};
	var NODE_IDENTIFIER_PROPERTY = '__isNode__';
	var RELATIONSHIP_IDENTIFIER_PROPERTY = '__isRelationship__';
	var UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY = '__isUnboundRelationship__';
	var PATH_IDENTIFIER_PROPERTY = '__isPath__';
	var PATH_SEGMENT_IDENTIFIER_PROPERTY = '__isPathSegment__';
	function hasIdentifierProperty(obj, property) {
	    return obj != null && obj[property] === true;
	}
	/**
	 * Class for Node Type.
	 */
	var Node = /** @class */ (function () {
	    /**
	     * @constructor
	     * @protected
	     * @param {NumberOrInteger} identity - Unique identity
	     * @param {Array<string>} labels - Array for all labels
	     * @param {Properties} properties - Map with node properties
	     * @param {string} elementId - Node element identifier
	     */
	    function Node(identity, labels, properties, elementId) {
	        /**
	         * Identity of the node.
	         * @type {NumberOrInteger}
	         * @deprecated use {@link Node#elementId} instead
	         */
	        this.identity = identity;
	        /**
	         * Labels of the node.
	         * @type {string[]}
	         */
	        this.labels = labels;
	        /**
	         * Properties of the node.
	         * @type {Properties}
	         */
	        this.properties = properties;
	        /**
	         * The Node element identifier.
	         * @type {string}
	         */
	        this.elementId = _valueOrGetDefault(elementId, function () { return identity.toString(); });
	    }
	    /**
	     * @ignore
	     */
	    Node.prototype.toString = function () {
	        var s = '(' + this.elementId;
	        for (var i = 0; i < this.labels.length; i++) {
	            s += ':' + this.labels[i];
	        }
	        var keys = Object.keys(this.properties);
	        if (keys.length > 0) {
	            s += ' {';
	            for (var i = 0; i < keys.length; i++) {
	                if (i > 0)
	                    s += ',';
	                s += keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);
	            }
	            s += '}';
	        }
	        s += ')';
	        return s;
	    };
	    return Node;
	}());
	graphTypes.Node = Node;
	Object.defineProperty(Node.prototype, NODE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
	/**
	 * Test if given object is an instance of {@link Node} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link Node}, `false` otherwise.
	 */
	function isNode(obj) {
	    return hasIdentifierProperty(obj, NODE_IDENTIFIER_PROPERTY);
	}
	graphTypes.isNode = isNode;
	/**
	 * Class for Relationship Type.
	 */
	var Relationship = /** @class */ (function () {
	    /**
	     * @constructor
	     * @protected
	     * @param {NumberOrInteger} identity - Unique identity
	     * @param {NumberOrInteger} start - Identity of start Node
	     * @param {NumberOrInteger} end - Identity of end Node
	     * @param {string} type - Relationship type
	     * @param {Properties} properties - Map with relationship properties
	     * @param {string} elementId - Relationship element identifier
	     * @param {string} startNodeElementId - Start Node element identifier
	     * @param {string} endNodeElementId - End Node element identifier
	     */
	    function Relationship(identity, start, end, type, properties, elementId, startNodeElementId, endNodeElementId) {
	        /**
	         * Identity of the relationship.
	         * @type {NumberOrInteger}
	         * @deprecated use {@link Relationship#elementId} instead
	         */
	        this.identity = identity;
	        /**
	         * Identity of the start node.
	         * @type {NumberOrInteger}
	         * @deprecated use {@link Relationship#startNodeElementId} instead
	         */
	        this.start = start;
	        /**
	         * Identity of the end node.
	         * @type {NumberOrInteger}
	         * @deprecated use {@link Relationship#endNodeElementId} instead
	         */
	        this.end = end;
	        /**
	         * Type of the relationship.
	         * @type {string}
	         */
	        this.type = type;
	        /**
	         * Properties of the relationship.
	         * @type {Properties}
	         */
	        this.properties = properties;
	        /**
	         * The Relationship element identifier.
	         * @type {string}
	         */
	        this.elementId = _valueOrGetDefault(elementId, function () { return identity.toString(); });
	        /**
	         * The Start Node element identifier.
	         * @type {string}
	         */
	        this.startNodeElementId = _valueOrGetDefault(startNodeElementId, function () { return start.toString(); });
	        /**
	         * The End Node element identifier.
	         * @type {string}
	         */
	        this.endNodeElementId = _valueOrGetDefault(endNodeElementId, function () { return end.toString(); });
	    }
	    /**
	     * @ignore
	     */
	    Relationship.prototype.toString = function () {
	        var s = '(' + this.startNodeElementId + ')-[:' + this.type;
	        var keys = Object.keys(this.properties);
	        if (keys.length > 0) {
	            s += ' {';
	            for (var i = 0; i < keys.length; i++) {
	                if (i > 0)
	                    s += ',';
	                s += keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);
	            }
	            s += '}';
	        }
	        s += ']->(' + this.endNodeElementId + ')';
	        return s;
	    };
	    return Relationship;
	}());
	graphTypes.Relationship = Relationship;
	Object.defineProperty(Relationship.prototype, RELATIONSHIP_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
	/**
	 * Test if given object is an instance of {@link Relationship} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link Relationship}, `false` otherwise.
	 */
	function isRelationship(obj) {
	    return hasIdentifierProperty(obj, RELATIONSHIP_IDENTIFIER_PROPERTY);
	}
	graphTypes.isRelationship = isRelationship;
	/**
	 * Class for UnboundRelationship Type.
	 * @access private
	 */
	var UnboundRelationship = /** @class */ (function () {
	    /**
	     * @constructor
	     * @protected
	     * @param {NumberOrInteger} identity - Unique identity
	     * @param {string} type - Relationship type
	     * @param {Properties} properties - Map with relationship properties
	     * @param {string} elementId - Relationship element identifier
	     */
	    function UnboundRelationship(identity, type, properties, elementId) {
	        /**
	         * Identity of the relationship.
	         * @type {NumberOrInteger}
	         * @deprecated use {@link UnboundRelationship#elementId} instead
	         */
	        this.identity = identity;
	        /**
	         * Type of the relationship.
	         * @type {string}
	         */
	        this.type = type;
	        /**
	         * Properties of the relationship.
	         * @type {Properties}
	         */
	        this.properties = properties;
	        /**
	         * The Relationship element identifier.
	         * @type {string}
	         */
	        this.elementId = _valueOrGetDefault(elementId, function () { return identity.toString(); });
	    }
	    /**
	     * Bind relationship
	     *
	     * @protected
	     * @deprecated use {@link UnboundRelationship#bindTo} instead
	     * @param {Integer} start - Identity of start node
	     * @param {Integer} end - Identity of end node
	     * @return {Relationship} - Created relationship
	     */
	    UnboundRelationship.prototype.bind = function (start, end) {
	        return new Relationship(this.identity, start, end, this.type, this.properties, this.elementId);
	    };
	    /**
	     * Bind relationship
	     *
	     * @protected
	     * @param {Node} start - Start Node
	     * @param {Node} end - End Node
	     * @return {Relationship} - Created relationship
	     */
	    UnboundRelationship.prototype.bindTo = function (start, end) {
	        return new Relationship(this.identity, start.identity, end.identity, this.type, this.properties, this.elementId, start.elementId, end.elementId);
	    };
	    /**
	     * @ignore
	     */
	    UnboundRelationship.prototype.toString = function () {
	        var s = '-[:' + this.type;
	        var keys = Object.keys(this.properties);
	        if (keys.length > 0) {
	            s += ' {';
	            for (var i = 0; i < keys.length; i++) {
	                if (i > 0)
	                    s += ',';
	                s += keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);
	            }
	            s += '}';
	        }
	        s += ']->';
	        return s;
	    };
	    return UnboundRelationship;
	}());
	graphTypes.UnboundRelationship = UnboundRelationship;
	Object.defineProperty(UnboundRelationship.prototype, UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
	/**
	 * Test if given object is an instance of {@link UnboundRelationship} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link UnboundRelationship}, `false` otherwise.
	 */
	function isUnboundRelationship(obj) {
	    return hasIdentifierProperty(obj, UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY);
	}
	graphTypes.isUnboundRelationship = isUnboundRelationship;
	/**
	 * Class for PathSegment Type.
	 */
	var PathSegment = /** @class */ (function () {
	    /**
	     * @constructor
	     * @protected
	     * @param {Node} start - start node
	     * @param {Relationship} rel - relationship that connects start and end node
	     * @param {Node} end - end node
	     */
	    function PathSegment(start, rel, end) {
	        /**
	         * Start node.
	         * @type {Node}
	         */
	        this.start = start;
	        /**
	         * Relationship.
	         * @type {Relationship}
	         */
	        this.relationship = rel;
	        /**
	         * End node.
	         * @type {Node}
	         */
	        this.end = end;
	    }
	    return PathSegment;
	}());
	graphTypes.PathSegment = PathSegment;
	Object.defineProperty(PathSegment.prototype, PATH_SEGMENT_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
	/**
	 * Test if given object is an instance of {@link PathSegment} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link PathSegment}, `false` otherwise.
	 */
	function isPathSegment(obj) {
	    return hasIdentifierProperty(obj, PATH_SEGMENT_IDENTIFIER_PROPERTY);
	}
	graphTypes.isPathSegment = isPathSegment;
	/**
	 * Class for Path Type.
	 */
	var Path = /** @class */ (function () {
	    /**
	     * @constructor
	     * @protected
	     * @param {Node} start  - start node
	     * @param {Node} end - end node
	     * @param {Array<PathSegment>} segments - Array of Segments
	     */
	    function Path(start, end, segments) {
	        /**
	         * Start node.
	         * @type {Node}
	         */
	        this.start = start;
	        /**
	         * End node.
	         * @type {Node}
	         */
	        this.end = end;
	        /**
	         * Segments.
	         * @type {Array<PathSegment>}
	         */
	        this.segments = segments;
	        /**
	         * Length of the segments.
	         * @type {Number}
	         */
	        this.length = segments.length;
	    }
	    return Path;
	}());
	graphTypes.Path = Path;
	Object.defineProperty(Path.prototype, PATH_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);
	/**
	 * Test if given object is an instance of {@link Path} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link Path}, `false` otherwise.
	 */
	function isPath(obj) {
	    return hasIdentifierProperty(obj, PATH_IDENTIFIER_PROPERTY);
	}
	graphTypes.isPath = isPath;
	function _valueOrGetDefault(value, getDefault) {
	    return value === undefined || value === null ? getDefault() : value;
	}

	var record = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __generator$b = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __values$2 = (commonjsGlobal && commonjsGlobal.__values) || function(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	};
	var __read$a = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	Object.defineProperty(record, "__esModule", { value: true });
	var error_1$7 = error;
	function generateFieldLookup(keys) {
	    var lookup = {};
	    keys.forEach(function (name, idx) {
	        lookup[name] = idx;
	    });
	    return lookup;
	}
	/**
	 * Records make up the contents of the {@link Result}, and is how you access
	 * the output of a query. A simple query might yield a result stream
	 * with a single record, for instance:
	 *
	 *     MATCH (u:User) RETURN u.name, u.age
	 *
	 * This returns a stream of records with two fields, named `u.name` and `u.age`,
	 * each record represents one user found by the query above. You can access
	 * the values of each field either by name:
	 *
	 *     record.get("u.name")
	 *
	 * Or by it's position:
	 *
	 *     record.get(0)
	 *
	 * @access public
	 */
	var Record = /** @class */ (function () {
	    /**
	     * Create a new record object.
	     * @constructor
	     * @protected
	     * @param {string[]} keys An array of field keys, in the order the fields appear in the record
	     * @param {Array} fields An array of field values
	     * @param {Object} fieldLookup An object of fieldName -> value index, used to map
	     *                            field names to values. If this is null, one will be
	     *                            generated.
	     */
	    function Record(keys, fields, fieldLookup) {
	        /**
	         * Field keys, in the order the fields appear in the record.
	         * @type {string[]}
	         */
	        this.keys = keys;
	        /**
	         * Number of fields
	         * @type {Number}
	         */
	        this.length = keys.length;
	        this._fields = fields;
	        this._fieldLookup = fieldLookup !== null && fieldLookup !== void 0 ? fieldLookup : generateFieldLookup(keys);
	    }
	    /**
	     * Run the given function for each field in this record. The function
	     * will get three arguments - the value, the key and this record, in that
	     * order.
	     *
	     * @param {function(value: Object, key: string, record: Record)} visitor the function to apply to each field.
	     * @returns {void} Nothing
	     */
	    Record.prototype.forEach = function (visitor) {
	        var e_1, _a;
	        try {
	            for (var _b = __values$2(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read$a(_c.value, 2), key = _d[0], value = _d[1];
	                visitor(value, key, this);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /**
	     * Run the given function for each field in this record. The function
	     * will get three arguments - the value, the key and this record, in that
	     * order.
	     *
	     * @param {function(value: Object, key: string, record: Record)} visitor the function to apply on each field
	     * and return a value that is saved to the returned Array.
	     *
	     * @returns {Array}
	     */
	    Record.prototype.map = function (visitor) {
	        var e_2, _a;
	        var resultArray = [];
	        try {
	            for (var _b = __values$2(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read$a(_c.value, 2), key = _d[0], value = _d[1];
	                resultArray.push(visitor(value, key, this));
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        return resultArray;
	    };
	    /**
	     * Iterate over results. Each iteration will yield an array
	     * of exactly two items - the key, and the value (in order).
	     *
	     * @generator
	     * @returns {IterableIterator<Array>}
	     */
	    Record.prototype.entries = function () {
	        var i;
	        return __generator$b(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    i = 0;
	                    _a.label = 1;
	                case 1:
	                    if (!(i < this.keys.length)) return [3 /*break*/, 4];
	                    return [4 /*yield*/, [this.keys[i], this._fields[i]]];
	                case 2:
	                    _a.sent();
	                    _a.label = 3;
	                case 3:
	                    i++;
	                    return [3 /*break*/, 1];
	                case 4: return [2 /*return*/];
	            }
	        });
	    };
	    /**
	     * Iterate over values.
	     *
	     * @generator
	     * @returns {IterableIterator<Object>}
	     */
	    Record.prototype.values = function () {
	        var i;
	        return __generator$b(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    i = 0;
	                    _a.label = 1;
	                case 1:
	                    if (!(i < this.keys.length)) return [3 /*break*/, 4];
	                    return [4 /*yield*/, this._fields[i]];
	                case 2:
	                    _a.sent();
	                    _a.label = 3;
	                case 3:
	                    i++;
	                    return [3 /*break*/, 1];
	                case 4: return [2 /*return*/];
	            }
	        });
	    };
	    /**
	     * Iterate over values. Delegates to {@link Record#values}
	     *
	     * @generator
	     * @returns {IterableIterator<Object>}
	     */
	    Record.prototype[Symbol.iterator] = function () {
	        var i;
	        return __generator$b(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    i = 0;
	                    _a.label = 1;
	                case 1:
	                    if (!(i < this.keys.length)) return [3 /*break*/, 4];
	                    return [4 /*yield*/, this._fields[i]];
	                case 2:
	                    _a.sent();
	                    _a.label = 3;
	                case 3:
	                    i++;
	                    return [3 /*break*/, 1];
	                case 4: return [2 /*return*/];
	            }
	        });
	    };
	    /**
	     * Generates an object out of the current Record
	     *
	     * @returns {Object}
	     */
	    Record.prototype.toObject = function () {
	        var e_3, _a;
	        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
	        var obj = {};
	        try {
	            for (var _b = __values$2(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read$a(_c.value, 2), key = _d[0], value = _d[1];
	                obj[key] = value;
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        return obj;
	    };
	    /**
	     * Get a value from this record, either by index or by field key.
	     *
	     * @param {string|Number} key Field key, or the index of the field.
	     * @returns {*}
	     */
	    Record.prototype.get = function (key) {
	        var index;
	        if (!(typeof key === 'number')) {
	            index = this._fieldLookup[key];
	            if (index === undefined) {
	                throw (0, error_1$7.newError)("This record has no field with key '".concat(key.toString(), "', available keys are: [") +
	                    this.keys.toString() +
	                    '].');
	            }
	        }
	        else {
	            index = key;
	        }
	        if (index > this._fields.length - 1 || index < 0) {
	            throw (0, error_1$7.newError)("This record has no field with index '" +
	                index.toString() +
	                "'. Remember that indexes start at `0`, " +
	                'and make sure your query returns records in the shape you meant it to.');
	        }
	        return this._fields[index];
	    };
	    /**
	     * Check if a value from this record, either by index or by field key, exists.
	     *
	     * @param {string|Number} key Field key, or the index of the field.
	     * @returns {boolean}
	     */
	    Record.prototype.has = function (key) {
	        // if key is a number, we check if it is in the _fields array
	        if (typeof key === 'number') {
	            return key >= 0 && key < this._fields.length;
	        }
	        // if it's not a number, we check _fieldLookup dictionary directly
	        return this._fieldLookup[key] !== undefined;
	    };
	    return Record;
	}());
	record.default = Record;

	var spatialTypes = {};

	Object.defineProperty(spatialTypes, "__esModule", { value: true });
	spatialTypes.isPoint = spatialTypes.Point = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var util_1$6 = util$4;
	var POINT_IDENTIFIER_PROPERTY = '__isPoint__';
	/**
	 * Represents a single two or three-dimensional point in a particular coordinate reference system.
	 * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.
	 */
	var Point = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {T} srid - The coordinate reference system identifier.
	     * @param {number} x - The `x` coordinate of the point.
	     * @param {number} y - The `y` coordinate of the point.
	     * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.
	     */
	    function Point(srid, x, y, z) {
	        /**
	         * The coordinate reference system identifier.
	         * @type {T}
	         */
	        this.srid = (0, util_1$6.assertNumberOrInteger)(srid, 'SRID');
	        /**
	         * The `x` coordinate of the point.
	         * @type {number}
	         */
	        this.x = (0, util_1$6.assertNumber)(x, 'X coordinate');
	        /**
	         * The `y` coordinate of the point.
	         * @type {number}
	         */
	        this.y = (0, util_1$6.assertNumber)(y, 'Y coordinate');
	        /**
	         * The `z` coordinate of the point or `undefined` if point is 2-dimensional.
	         * @type {number}
	         */
	        this.z = z === null || z === undefined ? z : (0, util_1$6.assertNumber)(z, 'Z coordinate');
	        Object.freeze(this);
	    }
	    /**
	     * @ignore
	     */
	    Point.prototype.toString = function () {
	        return this.z != null && !isNaN(this.z)
	            ? "Point{srid=".concat(formatAsFloat(this.srid), ", x=").concat(formatAsFloat(this.x), ", y=").concat(formatAsFloat(this.y), ", z=").concat(formatAsFloat(this.z), "}")
	            : "Point{srid=".concat(formatAsFloat(this.srid), ", x=").concat(formatAsFloat(this.x), ", y=").concat(formatAsFloat(this.y), "}");
	    };
	    return Point;
	}());
	spatialTypes.Point = Point;
	function formatAsFloat(number) {
	    return Number.isInteger(number) ? number.toString() + '.0' : number.toString();
	}
	Object.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {
	    value: true,
	    enumerable: false,
	    configurable: false,
	    writable: false
	});
	/**
	 * Test if given object is an instance of {@link Point} class.
	 * @param {Object} obj the object to test.
	 * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.
	 */
	function isPoint(obj) {
	    var anyObj = obj;
	    return obj != null && anyObj[POINT_IDENTIFIER_PROPERTY] === true;
	}
	spatialTypes.isPoint = isPoint;

	var resultSummary = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding$9 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$9 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$9 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$9(result, mod, k);
	    __setModuleDefault$9(result, mod);
	    return result;
	};
	Object.defineProperty(resultSummary, "__esModule", { value: true });
	resultSummary.Stats = resultSummary.QueryStatistics = resultSummary.ProfiledPlan = resultSummary.Plan = resultSummary.Notification = resultSummary.ServerInfo = resultSummary.queryType = void 0;
	var integer_1$1 = __importStar$9(integer);
	/**
	 * A ResultSummary instance contains structured metadata for a {@link Result}.
	 * @access public
	 */
	var ResultSummary = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {string} query - The query this summary is for
	     * @param {Object} parameters - Parameters for the query
	     * @param {Object} metadata - Query metadata
	     * @param {number|undefined} protocolVersion - Bolt Protocol Version
	     */
	    function ResultSummary(query, parameters, metadata, protocolVersion) {
	        var _a, _b, _c;
	        /**
	         * The query and parameters this summary is for.
	         * @type {{text: string, parameters: Object}}
	         * @public
	         */
	        this.query = { text: query, parameters: parameters };
	        /**
	         * The type of query executed. Can be "r" for read-only query, "rw" for read-write query,
	         * "w" for write-only query and "s" for schema-write query.
	         * String constants are available in {@link queryType} object.
	         * @type {string}
	         * @public
	         */
	        this.queryType = metadata.type;
	        /**
	         * Counters for operations the query triggered.
	         * @type {QueryStatistics}
	         * @public
	         */
	        this.counters = new QueryStatistics((_a = metadata.stats) !== null && _a !== void 0 ? _a : {});
	        // for backwards compatibility, remove in future version
	        /**
	         * Use {@link ResultSummary.counters} instead.
	         * @type {QueryStatistics}
	         * @deprecated
	         */
	        this.updateStatistics = this.counters;
	        /**
	         * This describes how the database will execute the query.
	         * Query plan for the executed query if available, otherwise undefined.
	         * Will only be populated for queries that start with "EXPLAIN".
	         * @type {Plan|false}
	         * @public
	         */
	        this.plan =
	            metadata.plan != null || metadata.profile != null
	                ? new Plan((_b = metadata.plan) !== null && _b !== void 0 ? _b : metadata.profile)
	                : false;
	        /**
	         * This describes how the database did execute your query. This will contain detailed information about what
	         * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.
	         * Will only be populated for queries that start with "PROFILE".
	         * @type {ProfiledPlan}
	         * @public
	         */
	        this.profile = metadata.profile != null ? new ProfiledPlan(metadata.profile) : false;
	        /**
	         * An array of notifications that might arise when executing the query. Notifications can be warnings about
	         * problematic queries or other valuable information that can be presented in a client. Unlike failures
	         * or errors, notifications do not affect the execution of a query.
	         * @type {Array<Notification>}
	         * @public
	         */
	        this.notifications = this._buildNotifications(metadata.notifications);
	        /**
	         * The basic information of the server where the result is obtained from.
	         * @type {ServerInfo}
	         * @public
	         */
	        this.server = new ServerInfo(metadata.server, protocolVersion);
	        /**
	         * The time it took the server to consume the result.
	         * @type {number}
	         * @public
	         */
	        this.resultConsumedAfter = metadata.result_consumed_after;
	        /**
	         * The time it took the server to make the result available for consumption in milliseconds.
	         * @type {number}
	         * @public
	         */
	        this.resultAvailableAfter = metadata.result_available_after;
	        /**
	         * The database name where this summary is obtained from.
	         * @type {{name: string}}
	         * @public
	         */
	        this.database = { name: (_c = metadata.db) !== null && _c !== void 0 ? _c : null };
	    }
	    ResultSummary.prototype._buildNotifications = function (notifications) {
	        if (notifications == null) {
	            return [];
	        }
	        return notifications.map(function (n) {
	            return new Notification(n);
	        });
	    };
	    /**
	     * Check if the result summary has a plan
	     * @return {boolean}
	     */
	    ResultSummary.prototype.hasPlan = function () {
	        return this.plan instanceof Plan;
	    };
	    /**
	     * Check if the result summary has a profile
	     * @return {boolean}
	     */
	    ResultSummary.prototype.hasProfile = function () {
	        return this.profile instanceof ProfiledPlan;
	    };
	    return ResultSummary;
	}());
	/**
	 * Class for execution plan received by prepending Cypher with EXPLAIN.
	 * @access public
	 */
	var Plan = /** @class */ (function () {
	    /**
	     * Create a Plan instance
	     * @constructor
	     * @param {Object} plan - Object with plan data
	     */
	    function Plan(plan) {
	        this.operatorType = plan.operatorType;
	        this.identifiers = plan.identifiers;
	        this.arguments = plan.args;
	        this.children = plan.children != null
	            ? plan.children.map(function (child) { return new Plan(child); })
	            : [];
	    }
	    return Plan;
	}());
	resultSummary.Plan = Plan;
	/**
	 * Class for execution plan received by prepending Cypher with PROFILE.
	 * @access public
	 */
	var ProfiledPlan = /** @class */ (function () {
	    /**
	     * Create a ProfiledPlan instance
	     * @constructor
	     * @param {Object} profile - Object with profile data
	     */
	    function ProfiledPlan(profile) {
	        this.operatorType = profile.operatorType;
	        this.identifiers = profile.identifiers;
	        this.arguments = profile.args;
	        this.dbHits = valueOrDefault$1('dbHits', profile);
	        this.rows = valueOrDefault$1('rows', profile);
	        this.pageCacheMisses = valueOrDefault$1('pageCacheMisses', profile);
	        this.pageCacheHits = valueOrDefault$1('pageCacheHits', profile);
	        this.pageCacheHitRatio = valueOrDefault$1('pageCacheHitRatio', profile);
	        this.time = valueOrDefault$1('time', profile);
	        this.children = profile.children != null
	            ? profile.children.map(function (child) { return new ProfiledPlan(child); })
	            : [];
	    }
	    ProfiledPlan.prototype.hasPageCacheStats = function () {
	        return (this.pageCacheMisses > 0 ||
	            this.pageCacheHits > 0 ||
	            this.pageCacheHitRatio > 0);
	    };
	    return ProfiledPlan;
	}());
	resultSummary.ProfiledPlan = ProfiledPlan;
	/**
	 * Stats Query statistics dictionary for a {@link QueryStatistics}
	 * @public
	 */
	var Stats = /** @class */ (function () {
	    /**
	     * @constructor
	     * @private
	     */
	    function Stats() {
	        /**
	         * nodes created
	         * @type {number}
	         * @public
	         */
	        this.nodesCreated = 0;
	        /**
	         * nodes deleted
	         * @type {number}
	         * @public
	         */
	        this.nodesDeleted = 0;
	        /**
	         * relationships created
	         * @type {number}
	         * @public
	         */
	        this.relationshipsCreated = 0;
	        /**
	         * relationships deleted
	         * @type {number}
	         * @public
	         */
	        this.relationshipsDeleted = 0;
	        /**
	         * properties set
	         * @type {number}
	         * @public
	         */
	        this.propertiesSet = 0;
	        /**
	         * labels added
	         * @type {number}
	         * @public
	         */
	        this.labelsAdded = 0;
	        /**
	         * labels removed
	         * @type {number}
	         * @public
	         */
	        this.labelsRemoved = 0;
	        /**
	         * indexes added
	         * @type {number}
	         * @public
	         */
	        this.indexesAdded = 0;
	        /**
	         * indexes removed
	         * @type {number}
	         * @public
	         */
	        this.indexesRemoved = 0;
	        /**
	         * constraints added
	         * @type {number}
	         * @public
	         */
	        this.constraintsAdded = 0;
	        /**
	         * constraints removed
	         * @type {number}
	         * @public
	         */
	        this.constraintsRemoved = 0;
	    }
	    return Stats;
	}());
	resultSummary.Stats = Stats;
	/**
	 * Get statistical information for a {@link Result}.
	 * @access public
	 */
	var QueryStatistics = /** @class */ (function () {
	    /**
	     * Structurize the statistics
	     * @constructor
	     * @param {Object} statistics - Result statistics
	     */
	    function QueryStatistics(statistics) {
	        var _this = this;
	        this._stats = {
	            nodesCreated: 0,
	            nodesDeleted: 0,
	            relationshipsCreated: 0,
	            relationshipsDeleted: 0,
	            propertiesSet: 0,
	            labelsAdded: 0,
	            labelsRemoved: 0,
	            indexesAdded: 0,
	            indexesRemoved: 0,
	            constraintsAdded: 0,
	            constraintsRemoved: 0
	        };
	        this._systemUpdates = 0;
	        Object.keys(statistics).forEach(function (index) {
	            // To camelCase
	            var camelCaseIndex = index.replace(/(-\w)/g, function (m) { return m[1].toUpperCase(); });
	            if (camelCaseIndex in _this._stats) {
	                _this._stats[camelCaseIndex] = intValue(statistics[index]);
	            }
	            else if (camelCaseIndex === 'systemUpdates') {
	                _this._systemUpdates = intValue(statistics[index]);
	            }
	            else if (camelCaseIndex === 'containsSystemUpdates') {
	                _this._containsSystemUpdates = statistics[index];
	            }
	            else if (camelCaseIndex === 'containsUpdates') {
	                _this._containsUpdates = statistics[index];
	            }
	        });
	        this._stats = Object.freeze(this._stats);
	    }
	    /**
	     * Did the database get updated?
	     * @return {boolean}
	     */
	    QueryStatistics.prototype.containsUpdates = function () {
	        var _this = this;
	        return this._containsUpdates !== undefined
	            ? this._containsUpdates
	            : (Object.keys(this._stats).reduce(function (last, current) {
	                return last + _this._stats[current];
	            }, 0) > 0);
	    };
	    /**
	     * Returns the query statistics updates in a dictionary.
	     * @returns {Stats}
	     */
	    QueryStatistics.prototype.updates = function () {
	        return this._stats;
	    };
	    /**
	     * Return true if the system database get updated, otherwise false
	     * @returns {boolean} - If the system database get updated or not.
	     */
	    QueryStatistics.prototype.containsSystemUpdates = function () {
	        return this._containsSystemUpdates !== undefined
	            ? this._containsSystemUpdates
	            : this._systemUpdates > 0;
	    };
	    /**
	     * @returns {number} - Number of system updates
	     */
	    QueryStatistics.prototype.systemUpdates = function () {
	        return this._systemUpdates;
	    };
	    return QueryStatistics;
	}());
	resultSummary.QueryStatistics = QueryStatistics;
	/**
	 * Class for Cypher notifications
	 * @access public
	 */
	var Notification = /** @class */ (function () {
	    /**
	     * Create a Notification instance
	     * @constructor
	     * @param {Object} notification - Object with notification data
	     */
	    function Notification(notification) {
	        this.code = notification.code;
	        this.title = notification.title;
	        this.description = notification.description;
	        this.severity = notification.severity;
	        this.position = Notification._constructPosition(notification.position);
	    }
	    Notification._constructPosition = function (pos) {
	        if (pos == null) {
	            return {};
	        }
	        /* eslint-disable @typescript-eslint/no-non-null-assertion */
	        return {
	            offset: intValue(pos.offset),
	            line: intValue(pos.line),
	            column: intValue(pos.column)
	        };
	        /* eslint-enable @typescript-eslint/no-non-null-assertion */
	    };
	    return Notification;
	}());
	resultSummary.Notification = Notification;
	/**
	 * Class for exposing server info from a result.
	 * @access public
	 */
	var ServerInfo = /** @class */ (function () {
	    /**
	     * Create a ServerInfo instance
	     * @constructor
	     * @param {Object} serverMeta - Object with serverMeta data
	     * @param {Object} connectionInfo - Bolt connection info
	     * @param {number} protocolVersion - Bolt Protocol Version
	     */
	    function ServerInfo(serverMeta, protocolVersion) {
	        if (serverMeta != null) {
	            /**
	             * The server adress
	             * @type {string}
	             * @public
	             */
	            this.address = serverMeta.address;
	            /**
	             * The server user agent string
	             * @type {string}
	             * @public
	             */
	            this.agent = serverMeta.version;
	        }
	        /**
	         * The protocol version used by the connection
	         * @type {number}
	         * @public
	         */
	        this.protocolVersion = protocolVersion;
	    }
	    return ServerInfo;
	}());
	resultSummary.ServerInfo = ServerInfo;
	function intValue(value) {
	    if (value instanceof integer_1$1.default) {
	        return value.toInt();
	    }
	    else if (typeof value === 'bigint') {
	        return (0, integer_1$1.int)(value).toInt();
	    }
	    else {
	        return value;
	    }
	}
	function valueOrDefault$1(key, values, defaultValue) {
	    if (defaultValue === void 0) { defaultValue = 0; }
	    if (values !== false && key in values) {
	        var value = values[key];
	        return intValue(value);
	    }
	    else {
	        return defaultValue;
	    }
	}
	/**
	 * The constants for query types
	 * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}
	 */
	var queryType = {
	    READ_ONLY: 'r',
	    READ_WRITE: 'rw',
	    WRITE_ONLY: 'w',
	    SCHEMA_WRITE: 's'
	};
	resultSummary.queryType = queryType;
	resultSummary.default = ResultSummary;

	var result = {};

	var internal = {};

	var observers = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(observers, "__esModule", { value: true });
	observers.FailedObserver = observers.CompletedObserver = void 0;
	var CompletedObserver$1 = /** @class */ (function () {
	    function CompletedObserver() {
	    }
	    CompletedObserver.prototype.subscribe = function (observer) {
	        apply(observer, observer.onKeys, []);
	        apply(observer, observer.onCompleted, {});
	    };
	    CompletedObserver.prototype.cancel = function () {
	        // do nothing
	    };
	    CompletedObserver.prototype.pause = function () {
	        // do nothing
	    };
	    CompletedObserver.prototype.resume = function () {
	        // do nothing
	    };
	    CompletedObserver.prototype.prepareToHandleSingleResponse = function () {
	        // do nothing
	    };
	    CompletedObserver.prototype.markCompleted = function () {
	        // do nothing
	    };
	    // eslint-disable-next-line node/handle-callback-err
	    CompletedObserver.prototype.onError = function (error) {
	        // nothing to do, already finished
	        throw Error('CompletedObserver not supposed to call onError');
	    };
	    return CompletedObserver;
	}());
	observers.CompletedObserver = CompletedObserver$1;
	var FailedObserver$1 = /** @class */ (function () {
	    function FailedObserver(_a) {
	        var error = _a.error, onError = _a.onError;
	        this._error = error;
	        this._beforeError = onError;
	        this._observers = [];
	        this.onError(error);
	    }
	    FailedObserver.prototype.subscribe = function (observer) {
	        apply(observer, observer.onError, this._error);
	        this._observers.push(observer);
	    };
	    FailedObserver.prototype.onError = function (error) {
	        apply(this, this._beforeError, error);
	        this._observers.forEach(function (o) { return apply(o, o.onError, error); });
	    };
	    FailedObserver.prototype.cancel = function () {
	        // do nothing
	    };
	    FailedObserver.prototype.pause = function () {
	        // do nothing
	    };
	    FailedObserver.prototype.resume = function () {
	        // do nothing
	    };
	    FailedObserver.prototype.markCompleted = function () {
	        // do nothing
	    };
	    FailedObserver.prototype.prepareToHandleSingleResponse = function () {
	        // do nothing
	    };
	    return FailedObserver;
	}());
	observers.FailedObserver = FailedObserver$1;
	function apply(thisArg, func, param) {
	    if (func != null) {
	        func.bind(thisArg)(param);
	    }
	}

	var bookmarks$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding$8 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$8 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$8 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
	    __setModuleDefault$8(result, mod);
	    return result;
	};
	var __read$9 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __spreadArray$3 = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(bookmarks$1, "__esModule", { value: true });
	bookmarks$1.Bookmarks = void 0;
	var util$2 = __importStar$8(util$4);
	var BOOKMARKS_KEY = 'bookmarks';
	var Bookmarks$4 = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {string|string[]} values single bookmark as string or multiple bookmarks as a string array.
	     */
	    function Bookmarks(values) {
	        this._values = asStringArray(values);
	    }
	    Bookmarks.empty = function () {
	        return EMPTY_BOOKMARK;
	    };
	    /**
	     * Check if the given Bookmarks holder is meaningful and can be send to the database.
	     * @return {boolean} returns `true` bookmarks has a value, `false` otherwise.
	     */
	    Bookmarks.prototype.isEmpty = function () {
	        return this._values.length === 0;
	    };
	    /**
	     * Get all bookmarks values as an array.
	     * @return {string[]} all values.
	     */
	    Bookmarks.prototype.values = function () {
	        return this._values;
	    };
	    Bookmarks.prototype[Symbol.iterator] = function () {
	        return this._values[Symbol.iterator]();
	    };
	    /**
	     * Get these bookmarks as an object for begin transaction call.
	     * @return {Object} the value of this bookmarks holder as object.
	     */
	    Bookmarks.prototype.asBeginTransactionParameters = function () {
	        var _a;
	        if (this.isEmpty()) {
	            return {};
	        }
	        // Driver sends {bookmarks: "max", bookmarks: ["one", "two", "max"]} instead of simple
	        // {bookmarks: ["one", "two", "max"]} for backwards compatibility reasons. Old servers can only accept single
	        // bookmarks that is why driver has to parse and compare given list of bookmarks. This functionality will
	        // eventually be removed.
	        return _a = {},
	            _a[BOOKMARKS_KEY] = this._values,
	            _a;
	    };
	    return Bookmarks;
	}());
	bookmarks$1.Bookmarks = Bookmarks$4;
	var EMPTY_BOOKMARK = new Bookmarks$4(null);
	/**
	 * Converts given value to an array.
	 * @param {string|string[]|Array} [value=undefined] argument to convert.
	 * @return {string[]} value converted to an array.
	 */
	function asStringArray(value) {
	    if (value == null || value === '') {
	        return [];
	    }
	    if (util$2.isString(value)) {
	        return [value];
	    }
	    if (Array.isArray(value)) {
	        var result = new Set();
	        var flattenedValue = flattenArray(value);
	        for (var i = 0; i < flattenedValue.length; i++) {
	            var element = flattenedValue[i];
	            // if it is undefined or null, ignore it
	            if (element !== undefined && element !== null) {
	                if (!util$2.isString(element)) {
	                    throw new TypeError(
	                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
	                    "Bookmark value should be a string, given: '".concat(element, "'"));
	                }
	                result.add(element);
	            }
	        }
	        return __spreadArray$3([], __read$9(result), false);
	    }
	    throw new TypeError(
	    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
	    "Bookmarks should either be a string or a string array, given: '".concat(value, "'"));
	}
	/**
	 * Recursively flattens an array so that the result becomes a single array
	 * of values, which does not include any sub-arrays
	 *
	 * @param {Array} value
	 */
	function flattenArray(values) {
	    return values.reduce(function (dest, value) {
	        return Array.isArray(value)
	            ? dest.concat(flattenArray(value))
	            : dest.concat(value);
	    }, []);
	}

	var constants$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(constants$1, "__esModule", { value: true });
	constants$1.BOLT_PROTOCOL_V5_0 = constants$1.BOLT_PROTOCOL_V4_4 = constants$1.BOLT_PROTOCOL_V4_3 = constants$1.BOLT_PROTOCOL_V4_2 = constants$1.BOLT_PROTOCOL_V4_1 = constants$1.BOLT_PROTOCOL_V4_0 = constants$1.BOLT_PROTOCOL_V3 = constants$1.BOLT_PROTOCOL_V2 = constants$1.BOLT_PROTOCOL_V1 = constants$1.DEFAULT_POOL_MAX_SIZE = constants$1.DEFAULT_POOL_ACQUISITION_TIMEOUT = constants$1.DEFAULT_CONNECTION_TIMEOUT_MILLIS = constants$1.ACCESS_MODE_WRITE = constants$1.ACCESS_MODE_READ = constants$1.FETCH_ALL = void 0;
	var FETCH_ALL$4 = -1;
	constants$1.FETCH_ALL = FETCH_ALL$4;
	var DEFAULT_POOL_ACQUISITION_TIMEOUT = 60 * 1000; // 60 seconds
	constants$1.DEFAULT_POOL_ACQUISITION_TIMEOUT = DEFAULT_POOL_ACQUISITION_TIMEOUT;
	var DEFAULT_POOL_MAX_SIZE = 100;
	constants$1.DEFAULT_POOL_MAX_SIZE = DEFAULT_POOL_MAX_SIZE;
	var DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default
	constants$1.DEFAULT_CONNECTION_TIMEOUT_MILLIS = DEFAULT_CONNECTION_TIMEOUT_MILLIS;
	var ACCESS_MODE_READ$1 = 'READ';
	constants$1.ACCESS_MODE_READ = ACCESS_MODE_READ$1;
	var ACCESS_MODE_WRITE$1 = 'WRITE';
	constants$1.ACCESS_MODE_WRITE = ACCESS_MODE_WRITE$1;
	var BOLT_PROTOCOL_V1$1 = 1;
	constants$1.BOLT_PROTOCOL_V1 = BOLT_PROTOCOL_V1$1;
	var BOLT_PROTOCOL_V2$1 = 2;
	constants$1.BOLT_PROTOCOL_V2 = BOLT_PROTOCOL_V2$1;
	var BOLT_PROTOCOL_V3$3 = 3;
	constants$1.BOLT_PROTOCOL_V3 = BOLT_PROTOCOL_V3$3;
	var BOLT_PROTOCOL_V4_0$3 = 4.0;
	constants$1.BOLT_PROTOCOL_V4_0 = BOLT_PROTOCOL_V4_0$3;
	var BOLT_PROTOCOL_V4_1$1 = 4.1;
	constants$1.BOLT_PROTOCOL_V4_1 = BOLT_PROTOCOL_V4_1$1;
	var BOLT_PROTOCOL_V4_2$1 = 4.2;
	constants$1.BOLT_PROTOCOL_V4_2 = BOLT_PROTOCOL_V4_2$1;
	var BOLT_PROTOCOL_V4_3$1 = 4.3;
	constants$1.BOLT_PROTOCOL_V4_3 = BOLT_PROTOCOL_V4_3$1;
	var BOLT_PROTOCOL_V4_4$3 = 4.4;
	constants$1.BOLT_PROTOCOL_V4_4 = BOLT_PROTOCOL_V4_4$3;
	var BOLT_PROTOCOL_V5_0$1 = 5.0;
	constants$1.BOLT_PROTOCOL_V5_0 = BOLT_PROTOCOL_V5_0$1;

	var connectionHolder$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/* eslint-disable @typescript-eslint/promise-function-async */
	var __extends$p = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$a = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$a = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(connectionHolder$1, "__esModule", { value: true });
	connectionHolder$1.EMPTY_CONNECTION_HOLDER = connectionHolder$1.ReadOnlyConnectionHolder = connectionHolder$1.ConnectionHolder = void 0;
	var error_1$6 = error;
	var util_1$5 = util$4;
	var constants_1$2 = constants$1;
	var bookmarks_1$3 = bookmarks$1;
	/**
	 * Utility to lazily initialize connections and return them back to the pool when unused.
	 * @private
	 */
	var ConnectionHolder = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {object} params
	     * @property {string} params.mode - the access mode for new connection holder.
	     * @property {string} params.database - the target database name.
	     * @property {Bookmarks} params.bookmarks - initial bookmarks
	     * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.
	     * @property {string?} params.impersonatedUser - the user which will be impersonated
	     * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved
	     * @property {function():Promise<Bookmarks>} params.getConnectionAcquistionBookmarks - called for getting Bookmarks for acquiring connections
	     */
	    function ConnectionHolder(_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.mode, mode = _c === void 0 ? constants_1$2.ACCESS_MODE_WRITE : _c, _d = _b.database, database = _d === void 0 ? '' : _d, bookmarks = _b.bookmarks, connectionProvider = _b.connectionProvider, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved, getConnectionAcquistionBookmarks = _b.getConnectionAcquistionBookmarks;
	        this._mode = mode;
	        this._database = database != null ? (0, util_1$5.assertString)(database, 'database') : '';
	        this._bookmarks = bookmarks !== null && bookmarks !== void 0 ? bookmarks : bookmarks_1$3.Bookmarks.empty();
	        this._connectionProvider = connectionProvider;
	        this._impersonatedUser = impersonatedUser;
	        this._referenceCount = 0;
	        this._connectionPromise = Promise.resolve(null);
	        this._onDatabaseNameResolved = onDatabaseNameResolved;
	        this._getConnectionAcquistionBookmarks = getConnectionAcquistionBookmarks !== null && getConnectionAcquistionBookmarks !== void 0 ? getConnectionAcquistionBookmarks : (function () { return Promise.resolve(bookmarks_1$3.Bookmarks.empty()); });
	    }
	    ConnectionHolder.prototype.mode = function () {
	        return this._mode;
	    };
	    ConnectionHolder.prototype.database = function () {
	        return this._database;
	    };
	    ConnectionHolder.prototype.setDatabase = function (database) {
	        this._database = database;
	    };
	    ConnectionHolder.prototype.bookmarks = function () {
	        return this._bookmarks;
	    };
	    ConnectionHolder.prototype.connectionProvider = function () {
	        return this._connectionProvider;
	    };
	    ConnectionHolder.prototype.referenceCount = function () {
	        return this._referenceCount;
	    };
	    ConnectionHolder.prototype.initializeConnection = function () {
	        if (this._referenceCount === 0 && (this._connectionProvider != null)) {
	            this._connectionPromise = this._createConnectionPromise(this._connectionProvider);
	        }
	        else {
	            this._referenceCount++;
	            return false;
	        }
	        this._referenceCount++;
	        return true;
	    };
	    ConnectionHolder.prototype._createConnectionPromise = function (connectionProvider) {
	        return __awaiter$a(this, void 0, void 0, function () {
	            var _a, _b;
	            var _c;
	            return __generator$a(this, function (_d) {
	                switch (_d.label) {
	                    case 0:
	                        _b = (_a = connectionProvider).acquireConnection;
	                        _c = {
	                            accessMode: this._mode,
	                            database: this._database
	                        };
	                        return [4 /*yield*/, this._getBookmarks()];
	                    case 1: return [4 /*yield*/, _b.apply(_a, [(_c.bookmarks = _d.sent(),
	                                _c.impersonatedUser = this._impersonatedUser,
	                                _c.onDatabaseNameResolved = this._onDatabaseNameResolved,
	                                _c)])];
	                    case 2: return [2 /*return*/, _d.sent()];
	                }
	            });
	        });
	    };
	    ConnectionHolder.prototype._getBookmarks = function () {
	        return __awaiter$a(this, void 0, void 0, function () {
	            return __generator$a(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._getConnectionAcquistionBookmarks()];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    ConnectionHolder.prototype.getConnection = function () {
	        return this._connectionPromise;
	    };
	    ConnectionHolder.prototype.releaseConnection = function () {
	        if (this._referenceCount === 0) {
	            return this._connectionPromise;
	        }
	        this._referenceCount--;
	        if (this._referenceCount === 0) {
	            return this._releaseConnection();
	        }
	        return this._connectionPromise;
	    };
	    ConnectionHolder.prototype.close = function (hasTx) {
	        if (this._referenceCount === 0) {
	            return this._connectionPromise;
	        }
	        this._referenceCount = 0;
	        return this._releaseConnection(hasTx);
	    };
	    /**
	     * Return the current pooled connection instance to the connection pool.
	     * We don't pool Session instances, to avoid users using the Session after they've called close.
	     * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.
	     * @return {Promise} - promise resolved then connection is returned to the pool.
	     * @private
	     */
	    ConnectionHolder.prototype._releaseConnection = function (hasTx) {
	        this._connectionPromise = this._connectionPromise
	            .then(function (connection) {
	            if (connection != null) {
	                if (connection.isOpen() && (connection.hasOngoingObservableRequests() || hasTx === true)) {
	                    return connection
	                        .resetAndFlush()
	                        .catch(ignoreError)
	                        .then(function () { return connection._release().then(function () { return null; }); });
	                }
	                return connection._release().then(function () { return null; });
	            }
	            else {
	                return Promise.resolve(null);
	            }
	        })
	            .catch(ignoreError);
	        return this._connectionPromise;
	    };
	    return ConnectionHolder;
	}());
	connectionHolder$1.ConnectionHolder = ConnectionHolder;
	/**
	 * Provides a interaction with a ConnectionHolder without change it state by
	 * releasing or initilizing
	 */
	var ReadOnlyConnectionHolder = /** @class */ (function (_super) {
	    __extends$p(ReadOnlyConnectionHolder, _super);
	    /**
	     * Contructor
	     * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests
	     */
	    function ReadOnlyConnectionHolder(connectionHolder) {
	        var _this = _super.call(this, {
	            mode: connectionHolder.mode(),
	            database: connectionHolder.database(),
	            bookmarks: connectionHolder.bookmarks(),
	            // @ts-expect-error
	            getConnectionAcquistionBookmarks: connectionHolder._getConnectionAcquistionBookmarks,
	            connectionProvider: connectionHolder.connectionProvider()
	        }) || this;
	        _this._connectionHolder = connectionHolder;
	        return _this;
	    }
	    /**
	     * Return the true if the connection is suppose to be initilized with the command.
	     *
	     * @return {boolean}
	     */
	    ReadOnlyConnectionHolder.prototype.initializeConnection = function () {
	        if (this._connectionHolder.referenceCount() === 0) {
	            return false;
	        }
	        return true;
	    };
	    /**
	     * Get the current connection promise.
	     * @return {Promise<Connection>} promise resolved with the current connection.
	     */
	    ReadOnlyConnectionHolder.prototype.getConnection = function () {
	        return this._connectionHolder.getConnection();
	    };
	    /**
	     * Get the current connection promise, doesn't performs the release
	     * @return {Promise<Connection>} promise with the resolved current connection
	     */
	    ReadOnlyConnectionHolder.prototype.releaseConnection = function () {
	        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(null); });
	    };
	    /**
	     * Get the current connection promise, doesn't performs the connection close
	     * @return {Promise<Connection>} promise with the resolved current connection
	     */
	    ReadOnlyConnectionHolder.prototype.close = function () {
	        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(null); });
	    };
	    return ReadOnlyConnectionHolder;
	}(ConnectionHolder));
	connectionHolder$1.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;
	connectionHolder$1.default = ReadOnlyConnectionHolder;
	var EmptyConnectionHolder = /** @class */ (function (_super) {
	    __extends$p(EmptyConnectionHolder, _super);
	    function EmptyConnectionHolder() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EmptyConnectionHolder.prototype.mode = function () {
	        return undefined;
	    };
	    EmptyConnectionHolder.prototype.database = function () {
	        return undefined;
	    };
	    EmptyConnectionHolder.prototype.initializeConnection = function () {
	        // nothing to initialize
	        return true;
	    };
	    EmptyConnectionHolder.prototype.getConnection = function () {
	        return __awaiter$a(this, void 0, void 0, function () {
	            return __generator$a(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, Promise.reject((0, error_1$6.newError)('This connection holder does not serve connections'))];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    EmptyConnectionHolder.prototype.releaseConnection = function () {
	        return __awaiter$a(this, void 0, void 0, function () {
	            return __generator$a(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, Promise.resolve(null)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    EmptyConnectionHolder.prototype.close = function () {
	        return __awaiter$a(this, void 0, void 0, function () {
	            return __generator$a(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, Promise.resolve(null)];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    return EmptyConnectionHolder;
	}(ConnectionHolder));
	/**
	 * Connection holder that does not manage any connections.
	 * @type {ConnectionHolder}
	 * @private
	 */
	var EMPTY_CONNECTION_HOLDER$1 = new EmptyConnectionHolder();
	connectionHolder$1.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER$1;
	// eslint-disable-next-line node/handle-callback-err
	function ignoreError(error) {
	    return null;
	}

	var txConfig$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding$7 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$7 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$7 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
	    __setModuleDefault$7(result, mod);
	    return result;
	};
	Object.defineProperty(txConfig$1, "__esModule", { value: true });
	txConfig$1.TxConfig = void 0;
	var util$1 = __importStar$7(util$4);
	var error_1$5 = error;
	var integer_1 = integer;
	/**
	 * Internal holder of the transaction configuration.
	 * It performs input validation and value conversion for further serialization by the Bolt protocol layer.
	 * Users of the driver provide transaction configuration as regular objects `{timeout: 10, metadata: {key: 'value'}}`.
	 * Driver converts such objects to {@link TxConfig} immediately and uses converted values everywhere.
	 */
	var TxConfig$3 = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {Object} config the raw configuration object.
	     */
	    function TxConfig(config) {
	        assertValidConfig(config);
	        this.timeout = extractTimeout(config);
	        this.metadata = extractMetadata(config);
	    }
	    /**
	     * Get an empty config object.
	     * @return {TxConfig} an empty config.
	     */
	    TxConfig.empty = function () {
	        return EMPTY_CONFIG;
	    };
	    /**
	     * Check if this config object is empty. I.e. has no configuration values specified.
	     * @return {boolean} `true` if this object is empty, `false` otherwise.
	     */
	    TxConfig.prototype.isEmpty = function () {
	        return Object.values(this).every(function (value) { return value == null; });
	    };
	    return TxConfig;
	}());
	txConfig$1.TxConfig = TxConfig$3;
	var EMPTY_CONFIG = new TxConfig$3({});
	/**
	 * @return {Integer|null}
	 */
	function extractTimeout(config) {
	    if (util$1.isObject(config) && config.timeout != null) {
	        util$1.assertNumberOrInteger(config.timeout, 'Transaction timeout');
	        var timeout = (0, integer_1.int)(config.timeout);
	        if (timeout.isNegative()) {
	            throw (0, error_1$5.newError)('Transaction timeout should not be negative');
	        }
	        return timeout;
	    }
	    return null;
	}
	/**
	 * @return {object|null}
	 */
	function extractMetadata(config) {
	    if (util$1.isObject(config) && config.metadata != null) {
	        var metadata = config.metadata;
	        util$1.assertObject(metadata, 'config.metadata');
	        if (Object.keys(metadata).length !== 0) {
	            // not an empty object
	            return metadata;
	        }
	    }
	    return null;
	}
	function assertValidConfig(config) {
	    if (config != null) {
	        util$1.assertObject(config, 'Transaction config');
	    }
	}

	var transactionExecutor$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/* eslint-disable @typescript-eslint/promise-function-async */
	var __awaiter$9 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$9 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(transactionExecutor$1, "__esModule", { value: true });
	transactionExecutor$1.TransactionExecutor = void 0;
	var error_1$4 = error;
	var DEFAULT_MAX_RETRY_TIME_MS = 30 * 1000; // 30 seconds
	var DEFAULT_INITIAL_RETRY_DELAY_MS = 1000; // 1 seconds
	var DEFAULT_RETRY_DELAY_MULTIPLIER = 2.0;
	var DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;
	var TransactionExecutor = /** @class */ (function () {
	    function TransactionExecutor(maxRetryTimeMs, initialRetryDelayMs, multiplier, jitterFactor) {
	        this._maxRetryTimeMs = _valueOrDefault(maxRetryTimeMs, DEFAULT_MAX_RETRY_TIME_MS);
	        this._initialRetryDelayMs = _valueOrDefault(initialRetryDelayMs, DEFAULT_INITIAL_RETRY_DELAY_MS);
	        this._multiplier = _valueOrDefault(multiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);
	        this._jitterFactor = _valueOrDefault(jitterFactor, DEFAULT_RETRY_DELAY_JITTER_FACTOR);
	        this._inFlightTimeoutIds = [];
	        this._verifyAfterConstruction();
	    }
	    TransactionExecutor.prototype.execute = function (transactionCreator, transactionWork, transactionWrapper) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject, transactionWrapper).catch(reject);
	        }).catch(function (error) {
	            var retryStartTimeMs = Date.now();
	            var retryDelayMs = _this._initialRetryDelayMs;
	            return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTimeMs, retryDelayMs, transactionWrapper);
	        });
	    };
	    TransactionExecutor.prototype.close = function () {
	        // cancel all existing timeouts to prevent further retries
	        this._inFlightTimeoutIds.forEach(function (timeoutId) { return clearTimeout(timeoutId); });
	        this._inFlightTimeoutIds = [];
	    };
	    TransactionExecutor.prototype._retryTransactionPromise = function (transactionCreator, transactionWork, error, retryStartTime, retryDelayMs, transactionWrapper) {
	        var _this = this;
	        var elapsedTimeMs = Date.now() - retryStartTime;
	        if (elapsedTimeMs > this._maxRetryTimeMs || !(0, error_1$4.isRetriableError)(error)) {
	            return Promise.reject(error);
	        }
	        return new Promise(function (resolve, reject) {
	            var nextRetryTime = _this._computeDelayWithJitter(retryDelayMs);
	            var timeoutId = setTimeout(function () {
	                // filter out this timeoutId when time has come and function is being executed
	                _this._inFlightTimeoutIds = _this._inFlightTimeoutIds.filter(function (id) { return id !== timeoutId; });
	                _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject, transactionWrapper).catch(reject);
	            }, nextRetryTime);
	            // add newly created timeoutId to the list of all in-flight timeouts
	            _this._inFlightTimeoutIds.push(timeoutId);
	        }).catch(function (error) {
	            var nextRetryDelayMs = retryDelayMs * _this._multiplier;
	            return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTime, nextRetryDelayMs, transactionWrapper);
	        });
	    };
	    TransactionExecutor.prototype._executeTransactionInsidePromise = function (transactionCreator, transactionWork, resolve, reject, transactionWrapper) {
	        return __awaiter$9(this, void 0, void 0, function () {
	            var tx, error_2, wrap, wrappedTx, resultPromise;
	            var _this = this;
	            return __generator$9(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, transactionCreator()];
	                    case 1:
	                        tx = _a.sent();
	                        return [3 /*break*/, 3];
	                    case 2:
	                        error_2 = _a.sent();
	                        // failed to create a transaction
	                        reject(error_2);
	                        return [2 /*return*/];
	                    case 3:
	                        wrap = transactionWrapper !== null && transactionWrapper !== void 0 ? transactionWrapper : (function (tx) { return tx; });
	                        wrappedTx = wrap(tx);
	                        resultPromise = this._safeExecuteTransactionWork(wrappedTx, transactionWork);
	                        resultPromise
	                            .then(function (result) {
	                            return _this._handleTransactionWorkSuccess(result, tx, resolve, reject);
	                        })
	                            .catch(function (error) { return _this._handleTransactionWorkFailure(error, tx, reject); });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    TransactionExecutor.prototype._safeExecuteTransactionWork = function (tx, transactionWork) {
	        try {
	            var result = transactionWork(tx);
	            // user defined callback is supposed to return a promise, but it might not; so to protect against an
	            // incorrect API usage we wrap the returned value with a resolved promise; this is effectively a
	            // validation step without type checks
	            return Promise.resolve(result);
	        }
	        catch (error) {
	            return Promise.reject(error);
	        }
	    };
	    TransactionExecutor.prototype._handleTransactionWorkSuccess = function (result, tx, resolve, reject) {
	        if (tx.isOpen()) {
	            // transaction work returned resolved promise and transaction has not been committed/rolled back
	            // try to commit the transaction
	            tx.commit()
	                .then(function () {
	                // transaction was committed, return result to the user
	                resolve(result);
	            })
	                .catch(function (error) {
	                // transaction failed to commit, propagate the failure
	                reject(error);
	            });
	        }
	        else {
	            // transaction work returned resolved promise and transaction is already committed/rolled back
	            // return the result returned by given transaction work
	            resolve(result);
	        }
	    };
	    TransactionExecutor.prototype._handleTransactionWorkFailure = function (error, tx, reject) {
	        if (tx.isOpen()) {
	            // transaction work failed and the transaction is still open, roll it back and propagate the failure
	            tx.rollback()
	                .catch(function (ignore) {
	                // ignore the rollback error
	            })
	                .then(function () { return reject(error); }) // propagate the original error we got from the transaction work
	                .catch(reject);
	        }
	        else {
	            // transaction is already rolled back, propagate the error
	            reject(error);
	        }
	    };
	    TransactionExecutor.prototype._computeDelayWithJitter = function (delayMs) {
	        var jitter = delayMs * this._jitterFactor;
	        var min = delayMs - jitter;
	        var max = delayMs + jitter;
	        return Math.random() * (max - min) + min;
	    };
	    TransactionExecutor.prototype._verifyAfterConstruction = function () {
	        if (this._maxRetryTimeMs < 0) {
	            throw (0, error_1$4.newError)('Max retry time should be >= 0: ' + this._maxRetryTimeMs.toString());
	        }
	        if (this._initialRetryDelayMs < 0) {
	            throw (0, error_1$4.newError)('Initial retry delay should >= 0: ' + this._initialRetryDelayMs.toString());
	        }
	        if (this._multiplier < 1.0) {
	            throw (0, error_1$4.newError)('Multiplier should be >= 1.0: ' + this._multiplier.toString());
	        }
	        if (this._jitterFactor < 0 || this._jitterFactor > 1) {
	            throw (0, error_1$4.newError)('Jitter factor should be in [0.0, 1.0]: ' + this._jitterFactor.toFixed());
	        }
	    };
	    return TransactionExecutor;
	}());
	transactionExecutor$1.TransactionExecutor = TransactionExecutor;
	function _valueOrDefault(value, defaultValue) {
	    if (value != null) {
	        return value;
	    }
	    return defaultValue;
	}

	var logger$1 = {};

	var __extends$o = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var _a$c;
	Object.defineProperty(logger$1, "__esModule", { value: true });
	logger$1.Logger = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var error_1$3 = error;
	var ERROR = 'error';
	var WARN = 'warn';
	var INFO = 'info';
	var DEBUG = 'debug';
	var DEFAULT_LEVEL = INFO;
	var levels = (_a$c = {},
	    _a$c[ERROR] = 0,
	    _a$c[WARN] = 1,
	    _a$c[INFO] = 2,
	    _a$c[DEBUG] = 3,
	    _a$c);
	/**
	 * Logger used by the driver to notify about various internal events. Single logger should be used per driver.
	 */
	var Logger$2 = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {string} level the enabled logging level.
	     * @param {function(level: string, message: string)} loggerFunction the function to write the log level and message.
	     */
	    function Logger(level, loggerFunction) {
	        this._level = level;
	        this._loggerFunction = loggerFunction;
	    }
	    /**
	     * Create a new logger based on the given driver configuration.
	     * @param {Object} driverConfig the driver configuration as supplied by the user.
	     * @return {Logger} a new logger instance or a no-op logger when not configured.
	     */
	    Logger.create = function (driverConfig) {
	        if ((driverConfig === null || driverConfig === void 0 ? void 0 : driverConfig.logging) != null) {
	            var loggingConfig = driverConfig.logging;
	            var level = extractConfiguredLevel(loggingConfig);
	            var loggerFunction = extractConfiguredLogger(loggingConfig);
	            return new Logger(level, loggerFunction);
	        }
	        return this.noOp();
	    };
	    /**
	     * Create a no-op logger implementation.
	     * @return {Logger} the no-op logger implementation.
	     */
	    Logger.noOp = function () {
	        return noOpLogger;
	    };
	    /**
	     * Check if error logging is enabled, i.e. it is not a no-op implementation.
	     * @return {boolean} `true` when enabled, `false` otherwise.
	     */
	    Logger.prototype.isErrorEnabled = function () {
	        return isLevelEnabled(this._level, ERROR);
	    };
	    /**
	     * Log an error message.
	     * @param {string} message the message to log.
	     */
	    Logger.prototype.error = function (message) {
	        if (this.isErrorEnabled()) {
	            this._loggerFunction(ERROR, message);
	        }
	    };
	    /**
	     * Check if warn logging is enabled, i.e. it is not a no-op implementation.
	     * @return {boolean} `true` when enabled, `false` otherwise.
	     */
	    Logger.prototype.isWarnEnabled = function () {
	        return isLevelEnabled(this._level, WARN);
	    };
	    /**
	     * Log an warning message.
	     * @param {string} message the message to log.
	     */
	    Logger.prototype.warn = function (message) {
	        if (this.isWarnEnabled()) {
	            this._loggerFunction(WARN, message);
	        }
	    };
	    /**
	     * Check if info logging is enabled, i.e. it is not a no-op implementation.
	     * @return {boolean} `true` when enabled, `false` otherwise.
	     */
	    Logger.prototype.isInfoEnabled = function () {
	        return isLevelEnabled(this._level, INFO);
	    };
	    /**
	     * Log an info message.
	     * @param {string} message the message to log.
	     */
	    Logger.prototype.info = function (message) {
	        if (this.isInfoEnabled()) {
	            this._loggerFunction(INFO, message);
	        }
	    };
	    /**
	     * Check if debug logging is enabled, i.e. it is not a no-op implementation.
	     * @return {boolean} `true` when enabled, `false` otherwise.
	     */
	    Logger.prototype.isDebugEnabled = function () {
	        return isLevelEnabled(this._level, DEBUG);
	    };
	    /**
	     * Log a debug message.
	     * @param {string} message the message to log.
	     */
	    Logger.prototype.debug = function (message) {
	        if (this.isDebugEnabled()) {
	            this._loggerFunction(DEBUG, message);
	        }
	    };
	    return Logger;
	}());
	logger$1.Logger = Logger$2;
	var NoOpLogger = /** @class */ (function (_super) {
	    __extends$o(NoOpLogger, _super);
	    function NoOpLogger() {
	        return _super.call(this, INFO, function (level, message) { }) || this;
	    }
	    NoOpLogger.prototype.isErrorEnabled = function () {
	        return false;
	    };
	    NoOpLogger.prototype.error = function (message) { };
	    NoOpLogger.prototype.isWarnEnabled = function () {
	        return false;
	    };
	    NoOpLogger.prototype.warn = function (message) { };
	    NoOpLogger.prototype.isInfoEnabled = function () {
	        return false;
	    };
	    NoOpLogger.prototype.info = function (message) { };
	    NoOpLogger.prototype.isDebugEnabled = function () {
	        return false;
	    };
	    NoOpLogger.prototype.debug = function (message) { };
	    return NoOpLogger;
	}(Logger$2));
	var noOpLogger = new NoOpLogger();
	/**
	 * Check if the given logging level is enabled.
	 * @param {string} configuredLevel the configured level.
	 * @param {string} targetLevel the level to check.
	 * @return {boolean} value of `true` when enabled, `false` otherwise.
	 */
	function isLevelEnabled(configuredLevel, targetLevel) {
	    return levels[configuredLevel] >= levels[targetLevel];
	}
	/**
	 * Extract the configured logging level from the driver's logging configuration.
	 * @param {Object} loggingConfig the logging configuration.
	 * @return {string} the configured log level or default when none configured.
	 */
	function extractConfiguredLevel(loggingConfig) {
	    if ((loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.level) != null) {
	        var configuredLevel = loggingConfig.level;
	        var value = levels[configuredLevel];
	        if (value == null && value !== 0) {
	            throw (0, error_1$3.newError)("Illegal logging level: ".concat(configuredLevel, ". Supported levels are: ").concat(Object.keys(levels).toString()));
	        }
	        return configuredLevel;
	    }
	    return DEFAULT_LEVEL;
	}
	/**
	 * Extract the configured logger function from the driver's logging configuration.
	 * @param {Object} loggingConfig the logging configuration.
	 * @return {function(level: string, message: string)} the configured logging function.
	 */
	function extractConfiguredLogger(loggingConfig) {
	    var _a, _b;
	    if ((loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.logger) != null) {
	        var configuredLogger = loggingConfig.logger;
	        if (configuredLogger != null && typeof configuredLogger === 'function') {
	            return configuredLogger;
	        }
	    }
	    throw (0, error_1$3.newError)("Illegal logger function: ".concat((_b = (_a = loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.logger) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : 'undefined'));
	}

	var urlUtil$2 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$e = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e.apply(this, arguments);
	};
	var __read$8 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	Object.defineProperty(urlUtil$2, "__esModule", { value: true });
	urlUtil$2.Url = urlUtil$2.formatIPv6Address = urlUtil$2.formatIPv4Address = urlUtil$2.defaultPortForScheme = urlUtil$2.parseDatabaseUrl = void 0;
	var util_1$4 = util$4;
	var DEFAULT_BOLT_PORT = 7687;
	var DEFAULT_HTTP_PORT = 7474;
	var DEFAULT_HTTPS_PORT = 7473;
	var Url = /** @class */ (function () {
	    function Url(scheme, host, port, hostAndPort, query) {
	        /**
	         * Nullable scheme (protocol) of the URL.
	         * Example: 'bolt', 'neo4j', 'http', 'https', etc.
	         * @type {string}
	         */
	        this.scheme = scheme;
	        /**
	         * Nonnull host name or IP address. IPv6 not wrapped in square brackets.
	         * Example: 'neo4j.com', 'localhost', '127.0.0.1', '192.168.10.15', '::1', '2001:4860:4860::8844', etc.
	         * @type {string}
	         */
	        this.host = host;
	        /**
	         * Nonnull number representing port. Default port for the given scheme is used if given URL string
	         * does not contain port. Example: 7687 for bolt, 7474 for HTTP and 7473 for HTTPS.
	         * @type {number}
	         */
	        this.port = port;
	        /**
	         * Nonnull host name or IP address plus port, separated by ':'. IPv6 wrapped in square brackets.
	         * Example: 'neo4j.com', 'neo4j.com:7687', '127.0.0.1', '127.0.0.1:8080', '[2001:4860:4860::8844]',
	         * '[2001:4860:4860::8844]:9090', etc.
	         * @type {string}
	         */
	        this.hostAndPort = hostAndPort;
	        /**
	         * Nonnull object representing parsed query string key-value pairs. Duplicated keys not supported.
	         * Example: '{}', '{'key1': 'value1', 'key2': 'value2'}', etc.
	         * @type {Object}
	         */
	        this.query = query;
	    }
	    return Url;
	}());
	urlUtil$2.Url = Url;
	function parseDatabaseUrl(url) {
	    var _a;
	    (0, util_1$4.assertString)(url, 'URL');
	    var sanitized = sanitizeUrl(url);
	    var parsedUrl = uriJsParse(sanitized.url);
	    var scheme = sanitized.schemeMissing
	        ? null
	        : extractScheme(parsedUrl.scheme);
	    var host = extractHost(parsedUrl.host); // no square brackets for IPv6
	    var formattedHost = formatHost(host); // has square brackets for IPv6
	    var port = extractPort(parsedUrl.port, scheme);
	    var hostAndPort = "".concat(formattedHost, ":").concat(port);
	    var query = extractQuery(
	    // @ts-expect-error
	    (_a = parsedUrl.query) !== null && _a !== void 0 ? _a : extractResourceQueryString(parsedUrl.resourceName), url);
	    return new Url(scheme, host, port, hostAndPort, query);
	}
	urlUtil$2.parseDatabaseUrl = parseDatabaseUrl;
	function extractResourceQueryString(resource) {
	    if (typeof resource !== 'string') {
	        return null;
	    }
	    var _a = __read$8(resource.split('?'), 2), query = _a[1];
	    return query;
	}
	function sanitizeUrl(url) {
	    url = url.trim();
	    if (!url.includes('://')) {
	        // url does not contain scheme, add dummy 'none://' to make parser work correctly
	        return { schemeMissing: true, url: "none://".concat(url) };
	    }
	    return { schemeMissing: false, url: url };
	}
	function extractScheme(scheme) {
	    if (scheme != null) {
	        scheme = scheme.trim();
	        if (scheme.charAt(scheme.length - 1) === ':') {
	            scheme = scheme.substring(0, scheme.length - 1);
	        }
	        return scheme;
	    }
	    return null;
	}
	function extractHost(host, url) {
	    if (host == null) {
	        throw new Error('Unable to extract host from null or undefined URL');
	    }
	    return host.trim();
	}
	function extractPort(portString, scheme) {
	    var port = typeof portString === 'string' ? parseInt(portString, 10) : portString;
	    return port != null && !isNaN(port) ? port : defaultPortForScheme(scheme);
	}
	function extractQuery(queryString, url) {
	    var query = queryString != null ? trimAndSanitizeQuery(queryString) : null;
	    var context = {};
	    if (query != null) {
	        query.split('&').forEach(function (pair) {
	            var keyValue = pair.split('=');
	            if (keyValue.length !== 2) {
	                throw new Error("Invalid parameters: '".concat(keyValue.toString(), "' in URL '").concat(url, "'."));
	            }
	            var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);
	            var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);
	            if (context[key] !== undefined) {
	                throw new Error("Duplicated query parameters with key '".concat(key, "' in URL '").concat(url, "'"));
	            }
	            context[key] = value;
	        });
	    }
	    return context;
	}
	function trimAndSanitizeQuery(query) {
	    query = (query !== null && query !== void 0 ? query : '').trim();
	    if ((query === null || query === void 0 ? void 0 : query.charAt(0)) === '?') {
	        query = query.substring(1, query.length);
	    }
	    return query;
	}
	function trimAndVerifyQueryElement(element, name, url) {
	    element = (element !== null && element !== void 0 ? element : '').trim();
	    if (element === '') {
	        throw new Error("Illegal empty ".concat(name, " in URL query '").concat(url, "'"));
	    }
	    return element;
	}
	function escapeIPv6Address(address) {
	    var startsWithSquareBracket = address.charAt(0) === '[';
	    var endsWithSquareBracket = address.charAt(address.length - 1) === ']';
	    if (!startsWithSquareBracket && !endsWithSquareBracket) {
	        return "[".concat(address, "]");
	    }
	    else if (startsWithSquareBracket && endsWithSquareBracket) {
	        return address;
	    }
	    else {
	        throw new Error("Illegal IPv6 address ".concat(address));
	    }
	}
	function formatHost(host) {
	    if (host === '' || host == null) {
	        throw new Error("Illegal host ".concat(host));
	    }
	    var isIPv6Address = host.includes(':');
	    return isIPv6Address ? escapeIPv6Address(host) : host;
	}
	function formatIPv4Address(address, port) {
	    return "".concat(address, ":").concat(port);
	}
	urlUtil$2.formatIPv4Address = formatIPv4Address;
	function formatIPv6Address(address, port) {
	    var escapedAddress = escapeIPv6Address(address);
	    return "".concat(escapedAddress, ":").concat(port);
	}
	urlUtil$2.formatIPv6Address = formatIPv6Address;
	function defaultPortForScheme(scheme) {
	    if (scheme === 'http') {
	        return DEFAULT_HTTP_PORT;
	    }
	    else if (scheme === 'https') {
	        return DEFAULT_HTTPS_PORT;
	    }
	    else {
	        return DEFAULT_BOLT_PORT;
	    }
	}
	urlUtil$2.defaultPortForScheme = defaultPortForScheme;
	function uriJsParse(value) {
	    // JS version of Python partition function
	    function partition(s, delimiter) {
	        var i = s.indexOf(delimiter);
	        if (i >= 0)
	            return [s.substring(0, i), s[i], s.substring(i + 1)];
	        else
	            return [s, '', ''];
	    }
	    // JS version of Python rpartition function
	    function rpartition(s, delimiter) {
	        var i = s.lastIndexOf(delimiter);
	        if (i >= 0)
	            return [s.substring(0, i), s[i], s.substring(i + 1)];
	        else
	            return ['', '', s];
	    }
	    function between(s, ldelimiter, rdelimiter) {
	        var lpartition = partition(s, ldelimiter);
	        var rpartition = partition(lpartition[2], rdelimiter);
	        return [rpartition[0], rpartition[2]];
	    }
	    // Parse an authority string into an object
	    // with the following keys:
	    // - userInfo (optional, might contain both user name and password)
	    // - host
	    // - port (optional, included only as a string)
	    function parseAuthority(value) {
	        var parsed = {};
	        var parts;
	        // Parse user info
	        parts = rpartition(value, '@');
	        if (parts[1] === '@') {
	            parsed.userInfo = decodeURIComponent(parts[0]);
	            value = parts[2];
	        }
	        // Parse host and port
	        var _a = __read$8(between(value, '[', ']'), 2), ipv6Host = _a[0], rest = _a[1];
	        if (ipv6Host !== '') {
	            parsed.host = ipv6Host;
	            parts = partition(rest, ':');
	        }
	        else {
	            parts = partition(value, ':');
	            parsed.host = parts[0];
	        }
	        if (parts[1] === ':') {
	            parsed.port = parts[2];
	        }
	        return parsed;
	    }
	    var parsed = {};
	    var parts;
	    // Parse scheme
	    parts = partition(value, ':');
	    if (parts[1] === ':') {
	        parsed.scheme = decodeURIComponent(parts[0]);
	        value = parts[2];
	    }
	    // Parse fragment
	    parts = partition(value, '#');
	    if (parts[1] === '#') {
	        parsed.fragment = decodeURIComponent(parts[2]);
	        value = parts[0];
	    }
	    // Parse query
	    parts = partition(value, '?');
	    if (parts[1] === '?') {
	        parsed.query = parts[2];
	        value = parts[0];
	    }
	    // Parse authority and path
	    if (value.startsWith('//')) {
	        parts = partition(value.substr(2), '/');
	        parsed = __assign$e(__assign$e({}, parsed), parseAuthority(parts[0]));
	        parsed.path = parts[1] + parts[2];
	    }
	    else {
	        parsed.path = value;
	    }
	    return parsed;
	}

	var serverAddress$1 = {};

	var __createBinding$6 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$6 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$6 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
	    __setModuleDefault$6(result, mod);
	    return result;
	};
	Object.defineProperty(serverAddress$1, "__esModule", { value: true });
	serverAddress$1.ServerAddress = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var util_1$3 = util$4;
	var urlUtil$1 = __importStar$6(urlUtil$2);
	var ServerAddress$1 = /** @class */ (function () {
	    function ServerAddress(host, resolved, port, hostPort) {
	        this._host = (0, util_1$3.assertString)(host, 'host');
	        this._resolved = resolved != null ? (0, util_1$3.assertString)(resolved, 'resolved') : null;
	        this._port = (0, util_1$3.assertNumber)(port, 'port');
	        this._hostPort = hostPort;
	        this._stringValue = resolved != null ? "".concat(hostPort, "(").concat(resolved, ")") : "".concat(hostPort);
	    }
	    ServerAddress.prototype.host = function () {
	        return this._host;
	    };
	    ServerAddress.prototype.resolvedHost = function () {
	        return this._resolved != null ? this._resolved : this._host;
	    };
	    ServerAddress.prototype.port = function () {
	        return this._port;
	    };
	    ServerAddress.prototype.resolveWith = function (resolved) {
	        return new ServerAddress(this._host, resolved, this._port, this._hostPort);
	    };
	    ServerAddress.prototype.asHostPort = function () {
	        return this._hostPort;
	    };
	    ServerAddress.prototype.asKey = function () {
	        return this._hostPort;
	    };
	    ServerAddress.prototype.toString = function () {
	        return this._stringValue;
	    };
	    ServerAddress.fromUrl = function (url) {
	        var urlParsed = urlUtil$1.parseDatabaseUrl(url);
	        return new ServerAddress(urlParsed.host, null, urlParsed.port, urlParsed.hostAndPort);
	    };
	    return ServerAddress;
	}());
	serverAddress$1.ServerAddress = ServerAddress$1;

	var resolver$1 = {};

	var baseHostNameResolver = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/* eslint-disable @typescript-eslint/promise-function-async */
	Object.defineProperty(baseHostNameResolver, "__esModule", { value: true });
	var BaseHostNameResolver$1 = /** @class */ (function () {
	    function BaseHostNameResolver() {
	    }
	    BaseHostNameResolver.prototype.resolve = function () {
	        throw new Error('Abstract function');
	    };
	    /**
	     * @protected
	     */
	    BaseHostNameResolver.prototype._resolveToItself = function (address) {
	        return Promise.resolve([address]);
	    };
	    return BaseHostNameResolver;
	}());
	baseHostNameResolver.default = BaseHostNameResolver$1;

	var configuredCustomResolver = {};

	Object.defineProperty(configuredCustomResolver, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/* eslint-disable @typescript-eslint/promise-function-async */
	var server_address_1 = serverAddress$1;
	function resolveToSelf(address) {
	    return Promise.resolve([address]);
	}
	var ConfiguredCustomResolver = /** @class */ (function () {
	    function ConfiguredCustomResolver(resolverFunction) {
	        this._resolverFunction = resolverFunction !== null && resolverFunction !== void 0 ? resolverFunction : resolveToSelf;
	    }
	    ConfiguredCustomResolver.prototype.resolve = function (seedRouter) {
	        var _this = this;
	        return new Promise(function (resolve) {
	            return resolve(_this._resolverFunction(seedRouter.asHostPort()));
	        }).then(function (resolved) {
	            if (!Array.isArray(resolved)) {
	                throw new TypeError('Configured resolver function should either return an array of addresses or a Promise resolved with an array of addresses.' +
	                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
	                    "Each address is '<host>:<port>'. Got: ".concat(resolved));
	            }
	            return resolved.map(function (r) { return server_address_1.ServerAddress.fromUrl(r); });
	        });
	    };
	    return ConfiguredCustomResolver;
	}());
	configuredCustomResolver.default = ConfiguredCustomResolver;

	var __importDefault$F = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(resolver$1, "__esModule", { value: true });
	resolver$1.ConfiguredCustomResolver = resolver$1.BaseHostNameResolver = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var base_host_name_resolver_1 = __importDefault$F(baseHostNameResolver);
	resolver$1.BaseHostNameResolver = base_host_name_resolver_1.default;
	var configured_custom_resolver_1$1 = __importDefault$F(configuredCustomResolver);
	resolver$1.ConfiguredCustomResolver = configured_custom_resolver_1$1.default;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding$5 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$5 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
	    __setModuleDefault$5(result, mod);
	    return result;
	};
	Object.defineProperty(internal, "__esModule", { value: true });
	internal.objectUtil = internal.resolver = internal.serverAddress = internal.urlUtil = internal.logger = internal.transactionExecutor = internal.txConfig = internal.connectionHolder = internal.constants = internal.bookmarks = internal.observer = internal.temporalUtil = internal.util = void 0;
	var util = __importStar$5(util$4);
	internal.util = util;
	var temporalUtil = __importStar$5(temporalUtil$1);
	internal.temporalUtil = temporalUtil;
	var observer = __importStar$5(observers);
	internal.observer = observer;
	var bookmarks = __importStar$5(bookmarks$1);
	internal.bookmarks = bookmarks;
	var constants = __importStar$5(constants$1);
	internal.constants = constants;
	var connectionHolder = __importStar$5(connectionHolder$1);
	internal.connectionHolder = connectionHolder;
	var txConfig = __importStar$5(txConfig$1);
	internal.txConfig = txConfig;
	var transactionExecutor = __importStar$5(transactionExecutor$1);
	internal.transactionExecutor = transactionExecutor;
	var logger = __importStar$5(logger$1);
	internal.logger = logger;
	var urlUtil = __importStar$5(urlUtil$2);
	internal.urlUtil = urlUtil;
	var serverAddress = __importStar$5(serverAddress$1);
	internal.serverAddress = serverAddress;
	var resolver = __importStar$5(resolver$1);
	internal.resolver = resolver;
	var objectUtil$1 = __importStar$5(objectUtil$2);
	internal.objectUtil = objectUtil$1;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __awaiter$8 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$8 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$E = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(result, "__esModule", { value: true });
	/* eslint-disable @typescript-eslint/promise-function-async */
	var result_summary_1 = __importDefault$E(resultSummary);
	var internal_1 = internal;
	var error_1$2 = error;
	var EMPTY_CONNECTION_HOLDER = internal_1.connectionHolder.EMPTY_CONNECTION_HOLDER;
	/**
	 * @private
	 * @param {Error} error The error
	 * @returns {void}
	 */
	var DEFAULT_ON_ERROR = function (error) {
	    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands, @typescript-eslint/no-base-to-string
	    console.log('Uncaught error when processing result: ' + error);
	};
	/**
	 * @private
	 * @param {ResultSummary} summary
	 * @returns {void}
	 */
	var DEFAULT_ON_COMPLETED = function (summary) { };
	/**
	 * @private
	 * @param {string[]} keys List of keys of the record in the result
	 * @return {void}
	 */
	var DEFAULT_ON_KEYS = function (keys) { };
	/**
	 * A stream of {@link Record} representing the result of a query.
	 * Can be consumed eagerly as {@link Promise} resolved with array of records and {@link ResultSummary}
	 * summary, or rejected with error that contains {@link string} code and {@link string} message.
	 * Alternatively can be consumed lazily using {@link Result#subscribe} function.
	 * @access public
	 */
	var Result = /** @class */ (function () {
	    /**
	     * Inject the observer to be used.
	     * @constructor
	     * @access private
	     * @param {Promise<observer.ResultStreamObserver>} streamObserverPromise
	     * @param {mixed} query - Cypher query to execute
	     * @param {Object} parameters - Map with parameters to use in query
	     * @param {ConnectionHolder} connectionHolder - to be notified when result is either fully consumed or error happened.
	     */
	    function Result(streamObserverPromise, query, parameters, connectionHolder, watermarks) {
	        if (watermarks === void 0) { watermarks = { high: Number.MAX_VALUE, low: Number.MAX_VALUE }; }
	        this._stack = captureStacktrace();
	        this._streamObserverPromise = streamObserverPromise;
	        this._p = null;
	        this._query = query;
	        this._parameters = parameters !== null && parameters !== void 0 ? parameters : {};
	        this._connectionHolder = connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : EMPTY_CONNECTION_HOLDER;
	        this._keys = null;
	        this._summary = null;
	        this._error = null;
	        this._watermarks = watermarks;
	    }
	    /**
	     * Returns a promise for the field keys.
	     *
	     * *Should not be combined with {@link Result#subscribe} function.*
	     *
	     * @public
	     * @returns {Promise<string[]>} - Field keys, in the order they will appear in records.
	     }
	     */
	    Result.prototype.keys = function () {
	        var _this = this;
	        if (this._keys !== null) {
	            return Promise.resolve(this._keys);
	        }
	        else if (this._error !== null) {
	            return Promise.reject(this._error);
	        }
	        return new Promise(function (resolve, reject) {
	            _this._streamObserverPromise
	                .then(function (observer) {
	                return observer.subscribe(_this._decorateObserver({
	                    onKeys: function (keys) { return resolve(keys); },
	                    onError: function (err) { return reject(err); }
	                }));
	            })
	                .catch(reject);
	        });
	    };
	    /**
	     * Returns a promise for the result summary.
	     *
	     * *Should not be combined with {@link Result#subscribe} function.*
	     *
	     * @public
	     * @returns {Promise<ResultSummary>} - Result summary.
	     *
	     */
	    Result.prototype.summary = function () {
	        var _this = this;
	        if (this._summary !== null) {
	            return Promise.resolve(this._summary);
	        }
	        else if (this._error !== null) {
	            return Promise.reject(this._error);
	        }
	        return new Promise(function (resolve, reject) {
	            _this._streamObserverPromise
	                .then(function (o) {
	                o.cancel();
	                o.subscribe(_this._decorateObserver({
	                    onCompleted: function (summary) { return resolve(summary); },
	                    onError: function (err) { return reject(err); }
	                }));
	            })
	                .catch(reject);
	        });
	    };
	    /**
	     * Create and return new Promise
	     *
	     * @private
	     * @return {Promise} new Promise.
	     */
	    Result.prototype._getOrCreatePromise = function () {
	        var _this = this;
	        if (this._p == null) {
	            this._p = new Promise(function (resolve, reject) {
	                var records = [];
	                var observer = {
	                    onNext: function (record) {
	                        records.push(record);
	                    },
	                    onCompleted: function (summary) {
	                        resolve({ records: records, summary: summary });
	                    },
	                    onError: function (error) {
	                        reject(error);
	                    }
	                };
	                _this.subscribe(observer);
	            });
	        }
	        return this._p;
	    };
	    /**
	     * Provides a async iterator over the records in the result.
	     *
	     * *Should not be combined with {@link Result#subscribe} or ${@link Result#then} functions.*
	     *
	     * @public
	     * @returns {PeekableAsyncIterator<Record<RecordShape>, ResultSummary>} The async iterator for the Results
	     */
	    Result.prototype[Symbol.asyncIterator] = function () {
	        var _this = this;
	        if (!this.isOpen()) {
	            var error_2 = (0, error_1$2.newError)('Result is already consumed');
	            return {
	                next: function () { return Promise.reject(error_2); },
	                peek: function () { return Promise.reject(error_2); }
	            };
	        }
	        var state = { paused: true, firstRun: true, finished: false };
	        var controlFlow = function () {
	            var _a, _b;
	            if (state.streaming == null) {
	                return;
	            }
	            var size = (_b = (_a = state.queuedObserver) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;
	            var queueSizeIsOverHighOrEqualWatermark = size >= _this._watermarks.high;
	            var queueSizeIsBellowOrEqualLowWatermark = size <= _this._watermarks.low;
	            if (queueSizeIsOverHighOrEqualWatermark && !state.paused) {
	                state.paused = true;
	                state.streaming.pause();
	            }
	            else if ((queueSizeIsBellowOrEqualLowWatermark && state.paused) || (state.firstRun && !queueSizeIsOverHighOrEqualWatermark)) {
	                state.firstRun = false;
	                state.paused = false;
	                state.streaming.resume();
	            }
	        };
	        var initializeObserver = function () { return __awaiter$8(_this, void 0, void 0, function () {
	            var _a;
	            return __generator$8(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        if (!(state.queuedObserver === undefined)) return [3 /*break*/, 2];
	                        state.queuedObserver = this._createQueuedResultObserver(controlFlow);
	                        _a = state;
	                        return [4 /*yield*/, this._subscribe(state.queuedObserver, true).catch(function () { return undefined; })];
	                    case 1:
	                        _a.streaming = _b.sent();
	                        controlFlow();
	                        _b.label = 2;
	                    case 2: return [2 /*return*/, state.queuedObserver];
	                }
	            });
	        }); };
	        var assertSummary = function (summary) {
	            if (summary === undefined) {
	                throw (0, error_1$2.newError)('InvalidState: Result stream finished without Summary', error_1$2.PROTOCOL_ERROR);
	            }
	            return true;
	        };
	        return {
	            next: function () { return __awaiter$8(_this, void 0, void 0, function () {
	                var queuedObserver, next;
	                return __generator$8(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            if (state.finished) {
	                                if (assertSummary(state.summary)) {
	                                    return [2 /*return*/, { done: true, value: state.summary }];
	                                }
	                            }
	                            return [4 /*yield*/, initializeObserver()];
	                        case 1:
	                            queuedObserver = _a.sent();
	                            return [4 /*yield*/, queuedObserver.dequeue()];
	                        case 2:
	                            next = _a.sent();
	                            if (next.done === true) {
	                                state.finished = next.done;
	                                state.summary = next.value;
	                            }
	                            return [2 /*return*/, next];
	                    }
	                });
	            }); },
	            return: function (value) { return __awaiter$8(_this, void 0, void 0, function () {
	                var queuedObserver, last;
	                var _a;
	                return __generator$8(this, function (_b) {
	                    switch (_b.label) {
	                        case 0:
	                            if (state.finished) {
	                                if (assertSummary(state.summary)) {
	                                    return [2 /*return*/, { done: true, value: value !== null && value !== void 0 ? value : state.summary }];
	                                }
	                            }
	                            (_a = state.streaming) === null || _a === void 0 ? void 0 : _a.cancel();
	                            return [4 /*yield*/, initializeObserver()];
	                        case 1:
	                            queuedObserver = _b.sent();
	                            return [4 /*yield*/, queuedObserver.dequeueUntilDone()];
	                        case 2:
	                            last = _b.sent();
	                            state.finished = true;
	                            last.value = value !== null && value !== void 0 ? value : last.value;
	                            state.summary = last.value;
	                            return [2 /*return*/, last];
	                    }
	                });
	            }); },
	            peek: function () { return __awaiter$8(_this, void 0, void 0, function () {
	                var queuedObserver;
	                return __generator$8(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            if (state.finished) {
	                                if (assertSummary(state.summary)) {
	                                    return [2 /*return*/, { done: true, value: state.summary }];
	                                }
	                            }
	                            return [4 /*yield*/, initializeObserver()];
	                        case 1:
	                            queuedObserver = _a.sent();
	                            return [4 /*yield*/, queuedObserver.head()];
	                        case 2: return [2 /*return*/, _a.sent()];
	                    }
	                });
	            }); }
	        };
	    };
	    /**
	     * Waits for all results and calls the passed in function with the results.
	     *
	     * *Should not be combined with {@link Result#subscribe} function.*
	     *
	     * @param {function(result: {records:Array<Record>, summary: ResultSummary})} onFulfilled - function to be called
	     * when finished.
	     * @param {function(error: {message:string, code:string})} onRejected - function to be called upon errors.
	     * @return {Promise} promise.
	     */
	    Result.prototype.then = function (onFulfilled, onRejected) {
	        return this._getOrCreatePromise().then(onFulfilled, onRejected);
	    };
	    /**
	     * Catch errors when using promises.
	     *
	     * *Should not be combined with {@link Result#subscribe} function.*
	     *
	     * @param {function(error: Neo4jError)} onRejected - Function to be called upon errors.
	     * @return {Promise} promise.
	     */
	    Result.prototype.catch = function (onRejected) {
	        return this._getOrCreatePromise().catch(onRejected);
	    };
	    Result.prototype.finally = function (onfinally) {
	        return this._getOrCreatePromise().finally(onfinally);
	    };
	    /**
	     * Stream records to observer as they come in, this is a more efficient method
	     * of handling the results, and allows you to handle arbitrarily large results.
	     *
	     * @param {Object} observer - Observer object
	     * @param {function(keys: string[])} observer.onKeys - handle stream head, the field keys.
	     * @param {function(record: Record)} observer.onNext - handle records, one by one.
	     * @param {function(summary: ResultSummary)} observer.onCompleted - handle stream tail, the result summary.
	     * @param {function(error: {message:string, code:string})} observer.onError - handle errors.
	     * @return {void}
	     */
	    Result.prototype.subscribe = function (observer) {
	        this._subscribe(observer)
	            .catch(function () { });
	    };
	    /**
	     * Check if this result is active, i.e., neither a summary nor an error has been received by the result.
	     * @return {boolean} `true` when neither a summary or nor an error has been received by the result.
	     */
	    Result.prototype.isOpen = function () {
	        return this._summary === null && this._error === null;
	    };
	    /**
	     * Stream records to observer as they come in, this is a more efficient method
	     * of handling the results, and allows you to handle arbitrarily large results.
	     *
	     * @access private
	     * @param {ResultObserver} observer The observer to send records to.
	     * @param {boolean} paused The flag to indicate if the stream should be started paused
	     * @returns {Promise<observer.ResultStreamObserver>} The result stream observer.
	     */
	    Result.prototype._subscribe = function (observer, paused) {
	        if (paused === void 0) { paused = false; }
	        var _observer = this._decorateObserver(observer);
	        return this._streamObserverPromise
	            .then(function (o) {
	            if (paused) {
	                o.pause();
	            }
	            o.subscribe(_observer);
	            return o;
	        })
	            .catch(function (error) {
	            if (_observer.onError != null) {
	                _observer.onError(error);
	            }
	            return Promise.reject(error);
	        });
	    };
	    /**
	     * Decorates the ResultObserver with the necessary methods.
	     *
	     * @access private
	     * @param {ResultObserver} observer The ResultObserver to decorate.
	     * @returns The decorated result observer
	     */
	    Result.prototype._decorateObserver = function (observer) {
	        var _this = this;
	        var _a, _b, _c;
	        var onCompletedOriginal = (_a = observer.onCompleted) !== null && _a !== void 0 ? _a : DEFAULT_ON_COMPLETED;
	        var onErrorOriginal = (_b = observer.onError) !== null && _b !== void 0 ? _b : DEFAULT_ON_ERROR;
	        var onKeysOriginal = (_c = observer.onKeys) !== null && _c !== void 0 ? _c : DEFAULT_ON_KEYS;
	        var onCompletedWrapper = function (metadata) {
	            _this._releaseConnectionAndGetSummary(metadata).then(function (summary) {
	                if (_this._summary !== null) {
	                    return onCompletedOriginal.call(observer, _this._summary);
	                }
	                _this._summary = summary;
	                return onCompletedOriginal.call(observer, summary);
	            }).catch(onErrorOriginal);
	        };
	        var onErrorWrapper = function (error) {
	            // notify connection holder that the used connection is not needed any more because error happened
	            // and result can't bee consumed any further; call the original onError callback after that
	            _this._connectionHolder.releaseConnection().then(function () {
	                replaceStacktrace(error, _this._stack);
	                _this._error = error;
	                onErrorOriginal.call(observer, error);
	            }).catch(onErrorOriginal);
	        };
	        var onKeysWrapper = function (keys) {
	            _this._keys = keys;
	            return onKeysOriginal.call(observer, keys);
	        };
	        return {
	            onNext: (observer.onNext != null) ? observer.onNext.bind(observer) : undefined,
	            onKeys: onKeysWrapper,
	            onCompleted: onCompletedWrapper,
	            onError: onErrorWrapper
	        };
	    };
	    /**
	     * Signals the stream observer that the future records should be discarded on the server.
	     *
	     * @protected
	     * @since 4.0.0
	     * @returns {void}
	     */
	    Result.prototype._cancel = function () {
	        if (this._summary === null && this._error === null) {
	            this._streamObserverPromise.then(function (o) { return o.cancel(); })
	                .catch(function () { });
	        }
	    };
	    /**
	     * @access private
	     * @param metadata
	     * @returns
	     */
	    Result.prototype._releaseConnectionAndGetSummary = function (metadata) {
	        var _a = internal_1.util.validateQueryAndParameters(this._query, this._parameters, {
	            skipAsserts: true
	        }), query = _a.validatedQuery, parameters = _a.params;
	        var connectionHolder = this._connectionHolder;
	        return connectionHolder
	            .getConnection()
	            .then(
	        // onFulfilled:
	        function (connection) {
	            return connectionHolder
	                .releaseConnection()
	                .then(function () { var _a; return (_a = connection === null || connection === void 0 ? void 0 : connection.protocol()) === null || _a === void 0 ? void 0 : _a.version; });
	        }, 
	        // onRejected:
	        function (_) { return undefined; })
	            .then(function (protocolVersion) {
	            return new result_summary_1.default(query, parameters, metadata, protocolVersion);
	        });
	    };
	    /**
	     * @access private
	     */
	    Result.prototype._createQueuedResultObserver = function (onQueueSizeChanged) {
	        var _this = this;
	        function createResolvablePromise() {
	            var resolvablePromise = {};
	            resolvablePromise.promise = new Promise(function (resolve, reject) {
	                resolvablePromise.resolve = resolve;
	                resolvablePromise.reject = reject;
	            });
	            return resolvablePromise;
	        }
	        function isError(elementOrError) {
	            return elementOrError instanceof Error;
	        }
	        function dequeue() {
	            var _a;
	            return __awaiter$8(this, void 0, void 0, function () {
	                var element;
	                return __generator$8(this, function (_b) {
	                    switch (_b.label) {
	                        case 0:
	                            if (buffer.length > 0) {
	                                element = (_a = buffer.shift()) !== null && _a !== void 0 ? _a : (0, error_1$2.newError)('Unexpected empty buffer', error_1$2.PROTOCOL_ERROR);
	                                onQueueSizeChanged();
	                                if (isError(element)) {
	                                    throw element;
	                                }
	                                return [2 /*return*/, element];
	                            }
	                            promiseHolder.resolvable = createResolvablePromise();
	                            return [4 /*yield*/, promiseHolder.resolvable.promise];
	                        case 1: return [2 /*return*/, _b.sent()];
	                    }
	                });
	            });
	        }
	        var buffer = [];
	        var promiseHolder = { resolvable: null };
	        var observer = {
	            onNext: function (record) {
	                observer._push({ done: false, value: record });
	            },
	            onCompleted: function (summary) {
	                observer._push({ done: true, value: summary });
	            },
	            onError: function (error) {
	                observer._push(error);
	            },
	            _push: function (element) {
	                if (promiseHolder.resolvable !== null) {
	                    var resolvable = promiseHolder.resolvable;
	                    promiseHolder.resolvable = null;
	                    if (isError(element)) {
	                        resolvable.reject(element);
	                    }
	                    else {
	                        resolvable.resolve(element);
	                    }
	                }
	                else {
	                    buffer.push(element);
	                    onQueueSizeChanged();
	                }
	            },
	            dequeue: dequeue,
	            dequeueUntilDone: function () { return __awaiter$8(_this, void 0, void 0, function () {
	                var element;
	                return __generator$8(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            return [4 /*yield*/, dequeue()];
	                        case 1:
	                            element = _a.sent();
	                            if (element.done === true) {
	                                return [2 /*return*/, element];
	                            }
	                            return [3 /*break*/, 0];
	                        case 2: return [2 /*return*/];
	                    }
	                });
	            }); },
	            head: function () { return __awaiter$8(_this, void 0, void 0, function () {
	                var element, element, error_3;
	                return __generator$8(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            if (buffer.length > 0) {
	                                element = buffer[0];
	                                if (isError(element)) {
	                                    throw element;
	                                }
	                                return [2 /*return*/, element];
	                            }
	                            promiseHolder.resolvable = createResolvablePromise();
	                            _a.label = 1;
	                        case 1:
	                            _a.trys.push([1, 3, 4, 5]);
	                            return [4 /*yield*/, promiseHolder.resolvable.promise];
	                        case 2:
	                            element = _a.sent();
	                            buffer.unshift(element);
	                            return [2 /*return*/, element];
	                        case 3:
	                            error_3 = _a.sent();
	                            buffer.unshift(error_3);
	                            throw error_3;
	                        case 4:
	                            onQueueSizeChanged();
	                            return [7 /*endfinally*/];
	                        case 5: return [2 /*return*/];
	                    }
	                });
	            }); },
	            get size() {
	                return buffer.length;
	            }
	        };
	        return observer;
	    };
	    return Result;
	}());
	function captureStacktrace() {
	    var error = new Error('');
	    if (error.stack != null) {
	        return error.stack.replace(/^Error(\n\r)*/, ''); // we don't need the 'Error\n' part, if only it exists
	    }
	    return null;
	}
	/**
	 * @private
	 * @param {Error} error The error
	 * @param {string| null} newStack The newStack
	 * @returns {void}
	 */
	function replaceStacktrace(error, newStack) {
	    if (newStack != null) {
	        // Error.prototype.toString() concatenates error.name and error.message nicely
	        // then we add the rest of the stack trace
	        // eslint-disable-next-line @typescript-eslint/no-base-to-string
	        error.stack = error.toString() + '\n' + newStack;
	    }
	}
	result.default = Result;

	var connectionProvider$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/* eslint-disable @typescript-eslint/promise-function-async */
	Object.defineProperty(connectionProvider$1, "__esModule", { value: true });
	/**
	 * Inteface define a common way to acquire a connection
	 *
	 * @private
	 */
	var ConnectionProvider = /** @class */ (function () {
	    function ConnectionProvider() {
	    }
	    /**
	     * This method acquires a connection against the specified database.
	     *
	     * Access mode and Bookmarks only applies to routing driver. Access mode only
	     * differentiates the target server for the connection, where WRITE selects a
	     * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,
	     * is only passed to the routing discovery procedure, for the system database to
	     * synchronize on creation of databases and is never used in direct drivers.
	     *
	     * @param {object} param - object parameter
	     * @property {string} param.accessMode - the access mode for the to-be-acquired connection
	     * @property {string} param.database - the target database for the to-be-acquired connection
	     * @property {Bookmarks} param.bookmarks - the bookmarks to send to routing discovery
	     * @property {string} param.impersonatedUser - the impersonated user
	     * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved
	     */
	    ConnectionProvider.prototype.acquireConnection = function (param) {
	        throw Error('Not implemented');
	    };
	    /**
	     * This method checks whether the backend database supports multi database functionality
	     * by checking protocol handshake result.
	     *
	     * @returns {Promise<boolean>}
	     */
	    ConnectionProvider.prototype.supportsMultiDb = function () {
	        throw Error('Not implemented');
	    };
	    /**
	     * This method checks whether the backend database supports transaction config functionality
	     * by checking protocol handshake result.
	     *
	     * @returns {Promise<boolean>}
	     */
	    ConnectionProvider.prototype.supportsTransactionConfig = function () {
	        throw Error('Not implemented');
	    };
	    /**
	     * This method checks whether the backend database supports transaction config functionality
	     * by checking protocol handshake result.
	     *
	     * @returns {Promise<boolean>}
	     */
	    ConnectionProvider.prototype.supportsUserImpersonation = function () {
	        throw Error('Not implemented');
	    };
	    /**
	     * This method verifies the connectivity of the database by trying to acquire a connection
	     * for each server available in the cluster.
	     *
	     * @param {object} param - object parameter
	     * @property {string} param.database - the target database for the to-be-acquired connection
	     * @property {string} param.accessMode - the access mode for the to-be-acquired connection
	     *
	     * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.
	     */
	    ConnectionProvider.prototype.verifyConnectivityAndGetServerInfo = function (param) {
	        throw Error('Not implemented');
	    };
	    /**
	     * Returns the protocol version negotiated via handshake.
	     *
	     * Note that this function call _always_ causes a round-trip to the server.
	     *
	     * @returns {Promise<number>} the protocol version negotiated via handshake.
	     * @throws {Error} When protocol negotiation fails
	     */
	    ConnectionProvider.prototype.getNegotiatedProtocolVersion = function () {
	        throw Error('Not Implemented');
	    };
	    /**
	     * Closes this connection provider along with its internals (connections, pools, etc.)
	     *
	     * @returns {Promise<void>}
	     */
	    ConnectionProvider.prototype.close = function () {
	        throw Error('Not implemented');
	    };
	    return ConnectionProvider;
	}());
	connectionProvider$1.default = ConnectionProvider;

	var connection$2 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/* eslint-disable @typescript-eslint/promise-function-async */
	Object.defineProperty(connection$2, "__esModule", { value: true });
	/**
	 * Interface which defines the raw connection with the database
	 * @private
	 */
	var Connection$1 = /** @class */ (function () {
	    function Connection() {
	    }
	    Object.defineProperty(Connection.prototype, "id", {
	        get: function () {
	            return '';
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Connection.prototype, "databaseId", {
	        get: function () {
	            return '';
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Connection.prototype, "server", {
	        get: function () {
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Connection.prototype, "address", {
	        /**
	         * @property {ServerAddress} the server address this connection is opened against
	         */
	        get: function () {
	            return undefined;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Connection.prototype, "version", {
	        /**
	         * @property {ServerVersion} the version of the server this connection is connected to
	         */
	        get: function () {
	            return undefined;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @returns {boolean} whether this connection is in a working condition
	     */
	    Connection.prototype.isOpen = function () {
	        return false;
	    };
	    /**
	     * @todo be removed and internalize the methods
	     * @returns {any} the underlying bolt protocol assigned to this connection
	     */
	    Connection.prototype.protocol = function () {
	        throw Error('Not implemented');
	    };
	    /**
	     * Connect to the target address, negotiate Bolt protocol and send initialization message.
	     * @param {string} userAgent the user agent for this driver.
	     * @param {Object} authToken the object containing auth information.
	     * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.
	     */
	    Connection.prototype.connect = function (userAgent, authToken) {
	        throw Error('Not implemented');
	    };
	    /**
	     * Write a message to the network channel.
	     * @param {RequestMessage} message the message to write.
	     * @param {ResultStreamObserver} observer the response observer.
	     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.
	     */
	    Connection.prototype.write = function (message, observer, flush) {
	        throw Error('Not implemented');
	    };
	    /**
	     * Send a RESET-message to the database. Message is immediately flushed to the network.
	     * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.
	     */
	    Connection.prototype.resetAndFlush = function () {
	        throw Error('Not implemented');
	    };
	    /**
	     * Checks if there is an ongoing request being handled
	     * @return {boolean} `true` if there is an ongoing request being handled
	     */
	    Connection.prototype.hasOngoingObservableRequests = function () {
	        throw Error('Not implemented');
	    };
	    /**
	     * Call close on the channel.
	     * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.
	     *
	     */
	    Connection.prototype.close = function () {
	        throw Error('Not implemented');
	    };
	    /**
	     * Called to release the connection
	     */
	    Connection.prototype._release = function () {
	        return Promise.resolve();
	    };
	    return Connection;
	}());
	connection$2.default = Connection$1;

	var transaction = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __awaiter$7 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$7 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$D = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(transaction, "__esModule", { value: true });
	/* eslint-disable @typescript-eslint/promise-function-async */
	var util_1$2 = util$4;
	var connection_holder_1$1 = connectionHolder$1;
	var bookmarks_1$2 = bookmarks$1;
	var tx_config_1$1 = txConfig$1;
	var observers_1$1 = observers;
	var error_1$1 = error;
	var result_1$1 = __importDefault$D(result);
	/**
	 * Represents a transaction in the Neo4j database.
	 *
	 * @access public
	 */
	var Transaction = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {ConnectionHolder} connectionHolder - the connection holder to get connection from.
	     * @param {function()} onClose - Function to be called when transaction is committed or rolled back.
	     * @param {function(bookmarks: Bookmarks)} onBookmarks callback invoked when new bookmark is produced.
	     * @param {function()} onConnection - Function to be called when a connection is obtained to ensure the conneciton
	     * is not yet released.
	     * @param {boolean} reactive whether this transaction generates reactive streams
	     * @param {number} fetchSize - the record fetch size in each pulling batch.
	     * @param {string} impersonatedUser - The name of the user which should be impersonated for the duration of the session.
	     * @param {number} highRecordWatermark - The high watermark for the record buffer.
	     * @param {number} lowRecordWatermark - The low watermark for the record buffer.
	     */
	    function Transaction(_a) {
	        var connectionHolder = _a.connectionHolder, onClose = _a.onClose, onBookmarks = _a.onBookmarks, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark;
	        var _this = this;
	        this._connectionHolder = connectionHolder;
	        this._reactive = reactive;
	        this._state = _states$1.ACTIVE;
	        this._onClose = onClose;
	        this._onBookmarks = onBookmarks;
	        this._onConnection = onConnection;
	        this._onError = this._onErrorCallback.bind(this);
	        this._fetchSize = fetchSize;
	        this._onComplete = this._onCompleteCallback.bind(this);
	        this._results = [];
	        this._impersonatedUser = impersonatedUser;
	        this._lowRecordWatermak = lowRecordWatermark;
	        this._highRecordWatermark = highRecordWatermark;
	        this._bookmarks = bookmarks_1$2.Bookmarks.empty();
	        this._acceptActive = function () { }; // satisfy DenoJS
	        this._activePromise = new Promise(function (resolve, reject) {
	            _this._acceptActive = resolve;
	        });
	    }
	    /**
	     * @private
	     * @param {Bookmarks | string |  string []} bookmarks
	     * @param {TxConfig} txConfig
	     * @returns {void}
	     */
	    Transaction.prototype._begin = function (getBookmarks, txConfig, events) {
	        var _this = this;
	        this._connectionHolder
	            .getConnection()
	            .then(function (connection) { return __awaiter$7(_this, void 0, void 0, function () {
	            var _a;
	            var _this = this;
	            return __generator$7(this, function (_b) {
	                switch (_b.label) {
	                    case 0:
	                        this._onConnection();
	                        if (!(connection != null)) return [3 /*break*/, 2];
	                        _a = this;
	                        return [4 /*yield*/, getBookmarks()];
	                    case 1:
	                        _a._bookmarks = _b.sent();
	                        return [2 /*return*/, connection.protocol().beginTransaction({
	                                bookmarks: this._bookmarks,
	                                txConfig: txConfig,
	                                mode: this._connectionHolder.mode(),
	                                database: this._connectionHolder.database(),
	                                impersonatedUser: this._impersonatedUser,
	                                beforeError: function (error) {
	                                    if (events != null) {
	                                        events.onError(error);
	                                    }
	                                    return _this._onError(error);
	                                },
	                                afterComplete: function (metadata) {
	                                    if (events != null) {
	                                        events.onComplete(metadata);
	                                    }
	                                    return _this._onComplete(metadata);
	                                }
	                            })];
	                    case 2: throw (0, error_1$1.newError)('No connection available');
	                }
	            });
	        }); })
	            .catch(function (error) {
	            if (events != null) {
	                events.onError(error);
	            }
	            _this._onError(error).catch(function () { });
	        })
	            // It should make the transaction active anyway
	            // further errors will be treated by the existing
	            // observers
	            .finally(function () { return _this._acceptActive(); });
	    };
	    /**
	     * Run Cypher query
	     * Could be called with a query object i.e.: `{text: "MATCH ...", parameters: {param: 1}}`
	     * or with the query and parameters as separate arguments.
	     * @param {mixed} query - Cypher query to execute
	     * @param {Object} parameters - Map with parameters to use in query
	     * @return {Result} New Result
	     */
	    Transaction.prototype.run = function (query, parameters) {
	        var _a = (0, util_1$2.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;
	        var result = this._state.run(validatedQuery, params, {
	            connectionHolder: this._connectionHolder,
	            onError: this._onError,
	            onComplete: this._onComplete,
	            onConnection: this._onConnection,
	            reactive: this._reactive,
	            fetchSize: this._fetchSize,
	            highRecordWatermark: this._highRecordWatermark,
	            lowRecordWatermark: this._lowRecordWatermak,
	            preparationJob: this._activePromise
	        });
	        this._results.push(result);
	        return result;
	    };
	    /**
	     * Commits the transaction and returns the result.
	     *
	     * After committing the transaction can no longer be used.
	     *
	     * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.
	     */
	    Transaction.prototype.commit = function () {
	        var _this = this;
	        var committed = this._state.commit({
	            connectionHolder: this._connectionHolder,
	            onError: this._onError,
	            onComplete: function (meta) { return _this._onCompleteCallback(meta, _this._bookmarks); },
	            onConnection: this._onConnection,
	            pendingResults: this._results,
	            preparationJob: this._activePromise
	        });
	        this._state = committed.state;
	        // clean up
	        this._onClose();
	        return new Promise(function (resolve, reject) {
	            committed.result.subscribe({
	                onCompleted: function () { return resolve(); },
	                onError: function (error) { return reject(error); }
	            });
	        });
	    };
	    /**
	     * Rollbacks the transaction.
	     *
	     * After rolling back, the transaction can no longer be used.
	     *
	     * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during
	     * rollback.
	     */
	    Transaction.prototype.rollback = function () {
	        var rolledback = this._state.rollback({
	            connectionHolder: this._connectionHolder,
	            onError: this._onError,
	            onComplete: this._onComplete,
	            onConnection: this._onConnection,
	            pendingResults: this._results,
	            preparationJob: this._activePromise
	        });
	        this._state = rolledback.state;
	        // clean up
	        this._onClose();
	        return new Promise(function (resolve, reject) {
	            rolledback.result.subscribe({
	                onCompleted: function () { return resolve(); },
	                onError: function (error) { return reject(error); }
	            });
	        });
	    };
	    /**
	     * Check if this transaction is active, which means commit and rollback did not happen.
	     * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.
	     */
	    Transaction.prototype.isOpen = function () {
	        return this._state === _states$1.ACTIVE;
	    };
	    /**
	     * Closes the transaction
	     *
	     * This method will roll back the transaction if it is not already committed or rolled back.
	     *
	     * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during
	     */
	    Transaction.prototype.close = function () {
	        return __awaiter$7(this, void 0, void 0, function () {
	            return __generator$7(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.isOpen()) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.rollback()];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Transaction.prototype._onErrorCallback = function () {
	        // error will be "acknowledged" by sending a RESET message
	        // database will then forget about this transaction and cleanup all corresponding resources
	        // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it
	        this._state = _states$1.FAILED;
	        this._onClose();
	        // release connection back to the pool
	        return this._connectionHolder.releaseConnection();
	    };
	    /**
	     * @private
	     * @param {object} meta The meta with bookmarks
	     * @returns {void}
	     */
	    Transaction.prototype._onCompleteCallback = function (meta, previousBookmarks) {
	        this._onBookmarks(new bookmarks_1$2.Bookmarks(meta === null || meta === void 0 ? void 0 : meta.bookmark), previousBookmarks !== null && previousBookmarks !== void 0 ? previousBookmarks : bookmarks_1$2.Bookmarks.empty(), meta === null || meta === void 0 ? void 0 : meta.db);
	    };
	    return Transaction;
	}());
	var _states$1 = {
	    // The transaction is running with no explicit success or failure marked
	    ACTIVE: {
	        commit: function (_a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;
	            return {
	                result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),
	                state: _states$1.SUCCEEDED
	            };
	        },
	        rollback: function (_a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;
	            return {
	                result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),
	                state: _states$1.ROLLED_BACK
	            };
	        },
	        run: function (query, parameters, _a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, preparationJob = _a.preparationJob;
	            // RUN in explicit transaction can't contain bookmarks and transaction configuration
	            // No need to include mode and database name as it shall be included in begin
	            var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();
	            var observerPromise = connectionHolder.getConnection()
	                .then(function (conn) { return requirements.then(function () { return conn; }); })
	                .then(function (conn) {
	                onConnection();
	                if (conn != null) {
	                    return conn.protocol().run(query, parameters, {
	                        bookmarks: bookmarks_1$2.Bookmarks.empty(),
	                        txConfig: tx_config_1$1.TxConfig.empty(),
	                        beforeError: onError,
	                        afterComplete: onComplete,
	                        reactive: reactive,
	                        fetchSize: fetchSize,
	                        highRecordWatermark: highRecordWatermark,
	                        lowRecordWatermark: lowRecordWatermark
	                    });
	                }
	                else {
	                    throw (0, error_1$1.newError)('No connection available');
	                }
	            })
	                .catch(function (error) { return new observers_1$1.FailedObserver({ error: error, onError: onError }); });
	            return newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark);
	        }
	    },
	    // An error has occurred, transaction can no longer be used and no more messages will
	    // be sent for this transaction.
	    FAILED: {
	        commit: function (_a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError; _a.onComplete;
	            return {
	                result: newCompletedResult(new observers_1$1.FailedObserver({
	                    error: (0, error_1$1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),
	                    onError: onError
	                }), 'COMMIT', {}, connectionHolder, 0, // high watermark
	                0 // low watermark
	                ),
	                state: _states$1.FAILED
	            };
	        },
	        rollback: function (_a) {
	            var connectionHolder = _a.connectionHolder; _a.onError; _a.onComplete;
	            return {
	                result: newCompletedResult(new observers_1$1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder, 0, // high watermark
	                0 // low watermark
	                ),
	                state: _states$1.FAILED
	            };
	        },
	        run: function (query, parameters, _a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError; _a.onComplete;
	            return newCompletedResult(new observers_1$1.FailedObserver({
	                error: (0, error_1$1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),
	                onError: onError
	            }), query, parameters, connectionHolder, 0, // high watermark
	            0 // low watermark
	            );
	        }
	    },
	    // This transaction has successfully committed
	    SUCCEEDED: {
	        commit: function (_a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError; _a.onComplete;
	            return {
	                result: newCompletedResult(new observers_1$1.FailedObserver({
	                    error: (0, error_1$1.newError)('Cannot commit this transaction, because it has already been committed.'),
	                    onError: onError
	                }), 'COMMIT', {}, connection_holder_1$1.EMPTY_CONNECTION_HOLDER, 0, // high watermark
	                0 // low watermark
	                ),
	                state: _states$1.SUCCEEDED,
	                connectionHolder: connectionHolder
	            };
	        },
	        rollback: function (_a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError; _a.onComplete;
	            return {
	                result: newCompletedResult(new observers_1$1.FailedObserver({
	                    error: (0, error_1$1.newError)('Cannot rollback this transaction, because it has already been committed.'),
	                    onError: onError
	                }), 'ROLLBACK', {}, connection_holder_1$1.EMPTY_CONNECTION_HOLDER, 0, // high watermark
	                0 // low watermark
	                ),
	                state: _states$1.SUCCEEDED,
	                connectionHolder: connectionHolder
	            };
	        },
	        run: function (query, parameters, _a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError; _a.onComplete;
	            return newCompletedResult(new observers_1$1.FailedObserver({
	                error: (0, error_1$1.newError)('Cannot run query in this transaction, because it has already been committed.'),
	                onError: onError
	            }), query, parameters, connectionHolder, 0, // high watermark
	            0 // low watermark
	            );
	        }
	    },
	    // This transaction has been rolled back
	    ROLLED_BACK: {
	        commit: function (_a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError; _a.onComplete;
	            return {
	                result: newCompletedResult(new observers_1$1.FailedObserver({
	                    error: (0, error_1$1.newError)('Cannot commit this transaction, because it has already been rolled back.'),
	                    onError: onError
	                }), 'COMMIT', {}, connectionHolder, 0, // high watermark
	                0 // low watermark
	                ),
	                state: _states$1.ROLLED_BACK
	            };
	        },
	        rollback: function (_a) {
	            var connectionHolder = _a.connectionHolder; _a.onError; _a.onComplete;
	            return {
	                result: newCompletedResult(new observers_1$1.FailedObserver({
	                    error: (0, error_1$1.newError)('Cannot rollback this transaction, because it has already been rolled back.')
	                }), 'ROLLBACK', {}, connectionHolder, 0, // high watermark
	                0 // low watermark
	                ),
	                state: _states$1.ROLLED_BACK
	            };
	        },
	        run: function (query, parameters, _a) {
	            var connectionHolder = _a.connectionHolder, onError = _a.onError; _a.onComplete;
	            return newCompletedResult(new observers_1$1.FailedObserver({
	                error: (0, error_1$1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),
	                onError: onError
	            }), query, parameters, connectionHolder, 0, // high watermark
	            0 // low watermark
	            );
	        }
	    }
	};
	/**
	 *
	 * @param {boolean} commit
	 * @param {ConnectionHolder} connectionHolder
	 * @param {function(err:Error): any} onError
	 * @param {function(metadata:object): any} onComplete
	 * @param {function() : any} onConnection
	 * @param {list<Result>>}pendingResults all run results in this transaction
	 */
	function finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob) {
	    var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();
	    var observerPromise = connectionHolder.getConnection()
	        .then(function (conn) { return requirements.then(function () { return conn; }); })
	        .then(function (connection) {
	        onConnection();
	        pendingResults.forEach(function (r) { return r._cancel(); });
	        return Promise.all(pendingResults.map(function (result) { return result.summary(); })).then(function (results) {
	            if (connection != null) {
	                if (commit) {
	                    return connection.protocol().commitTransaction({
	                        beforeError: onError,
	                        afterComplete: onComplete
	                    });
	                }
	                else {
	                    return connection.protocol().rollbackTransaction({
	                        beforeError: onError,
	                        afterComplete: onComplete
	                    });
	                }
	            }
	            else {
	                throw (0, error_1$1.newError)('No connection available');
	            }
	        });
	    })
	        .catch(function (error) { return new observers_1$1.FailedObserver({ error: error, onError: onError }); });
	    // for commit & rollback we need result that uses real connection holder and notifies it when
	    // connection is not needed and can be safely released to the pool
	    return new result_1$1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder, {
	        high: Number.MAX_VALUE,
	        low: Number.MAX_VALUE
	    });
	}
	/**
	 * Creates a {@link Result} with empty connection holder.
	 * For cases when result represents an intermediate or failed action, does not require any metadata and does not
	 * need to influence real connection holder to release connections.
	 * @param {ResultStreamObserver} observer - an observer for the created result.
	 * @param {string} query - the cypher query that produced the result.
	 * @param {Object} parameters - the parameters for cypher query that produced the result.
	 * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result
	 * @return {Result} new result.
	 * @private
	 */
	function newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark) {
	    if (connectionHolder === void 0) { connectionHolder = connection_holder_1$1.EMPTY_CONNECTION_HOLDER; }
	    return new result_1$1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1$1.ReadOnlyConnectionHolder(connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : connection_holder_1$1.EMPTY_CONNECTION_HOLDER), {
	        low: lowRecordWatermark,
	        high: highRecordWatermark
	    });
	}
	transaction.default = Transaction;

	var transactionManaged = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(transactionManaged, "__esModule", { value: true });
	/**
	 * Represents a transaction that is managed by the transaction executor.
	 *
	 * @public
	 */
	var ManagedTransaction = /** @class */ (function () {
	    /**
	     * @private
	     */
	    function ManagedTransaction(_a) {
	        var run = _a.run;
	        /**
	         * @private
	         */
	        this._run = run;
	    }
	    /**
	     * @private
	     * @param {Transaction} tx - Transaction to wrap
	     * @returns {ManagedTransaction} the ManagedTransaction
	     */
	    ManagedTransaction.fromTransaction = function (tx) {
	        return new ManagedTransaction({
	            run: tx.run.bind(tx)
	        });
	    };
	    /**
	     * Run Cypher query
	     * Could be called with a query object i.e.: `{text: "MATCH ...", parameters: {param: 1}}`
	     * or with the query and parameters as separate arguments.
	     * @param {mixed} query - Cypher query to execute
	     * @param {Object} parameters - Map with parameters to use in query
	     * @return {Result} New Result
	     */
	    ManagedTransaction.prototype.run = function (query, parameters) {
	        return this._run(query, parameters);
	    };
	    return ManagedTransaction;
	}());
	transactionManaged.default = ManagedTransaction;

	var transactionPromise = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$n = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign$d = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d.apply(this, arguments);
	};
	var __importDefault$C = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var _a$b;
	Object.defineProperty(transactionPromise, "__esModule", { value: true });
	/* eslint-disable @typescript-eslint/promise-function-async */
	var transaction_1 = __importDefault$C(transaction);
	/**
	 * Represents a {@link Promise<Transaction>} object and a {@link Transaction} object.
	 *
	 * Resolving this object promise verifies the result of the transaction begin and returns the {@link Transaction} object in case of success.
	 *
	 * The object can still also used as {@link Transaction} for convenience. The result of begin will be checked
	 * during the next API calls in the object as it is in the transaction.
	 *
	 * @access public
	 */
	var TransactionPromise = /** @class */ (function (_super) {
	    __extends$n(TransactionPromise, _super);
	    /**
	     * @constructor
	     * @param {ConnectionHolder} connectionHolder - the connection holder to get connection from.
	     * @param {function()} onClose - Function to be called when transaction is committed or rolled back.
	     * @param {function(bookmarks: Bookmarks)} onBookmarks callback invoked when new bookmark is produced.
	     * @param {function()} onConnection - Function to be called when a connection is obtained to ensure the connection
	     * is not yet released.
	     * @param {boolean} reactive whether this transaction generates reactive streams
	     * @param {number} fetchSize - the record fetch size in each pulling batch.
	     * @param {string} impersonatedUser - The name of the user which should be impersonated for the duration of the session.
	     */
	    function TransactionPromise(_b) {
	        var connectionHolder = _b.connectionHolder, onClose = _b.onClose, onBookmarks = _b.onBookmarks, onConnection = _b.onConnection, reactive = _b.reactive, fetchSize = _b.fetchSize, impersonatedUser = _b.impersonatedUser, highRecordWatermark = _b.highRecordWatermark, lowRecordWatermark = _b.lowRecordWatermark;
	        var _this = _super.call(this, {
	            connectionHolder: connectionHolder,
	            onClose: onClose,
	            onBookmarks: onBookmarks,
	            onConnection: onConnection,
	            reactive: reactive,
	            fetchSize: fetchSize,
	            impersonatedUser: impersonatedUser,
	            highRecordWatermark: highRecordWatermark,
	            lowRecordWatermark: lowRecordWatermark
	        }) || this;
	        _this[_a$b] = 'TransactionPromise';
	        return _this;
	    }
	    /**
	     * Waits for the begin to complete.
	     *
	     * @param {function(transaction: Transaction)} onFulfilled - function to be called when finished.
	     * @param {function(error: {message:string, code:string})} onRejected - function to be called upon errors.
	     * @return {Promise} promise.
	     */
	    TransactionPromise.prototype.then = function (onfulfilled, onrejected) {
	        return this._getOrCreateBeginPromise().then(onfulfilled, onrejected);
	    };
	    /**
	     * Catch errors when using promises.
	     *
	     * @param {function(error: Neo4jError)} onRejected - Function to be called upon errors.
	     * @return {Promise} promise.
	     */
	    TransactionPromise.prototype.catch = function (onrejected) {
	        return this._getOrCreateBeginPromise().catch(onrejected);
	    };
	    /**
	     * Called when finally the begin is done
	     *
	     * @param {function()|null} onfinally - function when the promise finished
	     * @return {Promise} promise.
	     */
	    TransactionPromise.prototype.finally = function (onfinally) {
	        return this._getOrCreateBeginPromise().finally(onfinally);
	    };
	    TransactionPromise.prototype._getOrCreateBeginPromise = function () {
	        var _this = this;
	        if (this._beginPromise == null) {
	            this._beginPromise = new Promise(function (resolve, reject) {
	                _this._resolve = resolve;
	                _this._reject = reject;
	                if (_this._beginError != null) {
	                    reject(_this._beginError);
	                }
	                if (_this._beginMetadata != null) {
	                    resolve(_this._toTransaction());
	                }
	            });
	        }
	        return this._beginPromise;
	    };
	    /**
	     * @access private
	     */
	    TransactionPromise.prototype._toTransaction = function () {
	        return __assign$d(__assign$d({}, this), { run: _super.prototype.run.bind(this), commit: _super.prototype.commit.bind(this), rollback: _super.prototype.rollback.bind(this), close: _super.prototype.close.bind(this), isOpen: _super.prototype.isOpen.bind(this), _begin: this._begin.bind(this) });
	    };
	    /**
	     * @access private
	     */
	    TransactionPromise.prototype._begin = function (bookmarks, txConfig) {
	        return _super.prototype._begin.call(this, bookmarks, txConfig, {
	            onError: this._onBeginError.bind(this),
	            onComplete: this._onBeginMetadata.bind(this)
	        });
	    };
	    /**
	     * @access private
	     * @returns {void}
	     */
	    TransactionPromise.prototype._onBeginError = function (error) {
	        this._beginError = error;
	        if (this._reject != null) {
	            this._reject(error);
	        }
	    };
	    /**
	     * @access private
	     * @returns {void}
	     */
	    TransactionPromise.prototype._onBeginMetadata = function (metadata) {
	        this._beginMetadata = metadata !== null && metadata !== void 0 ? metadata : {};
	        if (this._resolve != null) {
	            this._resolve(this._toTransaction());
	        }
	    };
	    return TransactionPromise;
	}(transaction_1.default));
	_a$b = Symbol.toStringTag;
	transactionPromise.default = TransactionPromise;

	var session = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __awaiter$6 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$6 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __read$7 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __spreadArray$2 = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	var __importDefault$B = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(session, "__esModule", { value: true });
	/* eslint-disable @typescript-eslint/promise-function-async */
	var observers_1 = observers;
	var util_1$1 = util$4;
	var constants_1$1 = constants$1;
	var error_1 = error;
	var result_1 = __importDefault$B(result);
	var connection_holder_1 = connectionHolder$1;
	var transaction_executor_1 = transactionExecutor$1;
	var bookmarks_1$1 = bookmarks$1;
	var tx_config_1 = txConfig$1;
	var transaction_promise_1 = __importDefault$B(transactionPromise);
	var transaction_managed_1 = __importDefault$B(transactionManaged);
	/**
	 * A Session instance is used for handling the connection and
	 * sending queries through the connection.
	 * In a single session, multiple queries will be executed serially.
	 * In order to execute parallel queries, multiple sessions are required.
	 * @access public
	 */
	var Session = /** @class */ (function () {
	    /**
	     * @constructor
	     * @protected
	     * @param {Object} args
	     * @param {string} args.mode the default access mode for this session.
	     * @param {ConnectionProvider} args.connectionProvider - The connection provider to acquire connections from.
	     * @param {Bookmarks} args.bookmarks - The initial bookmarks for this session.
	     * @param {string} args.database the database name
	     * @param {Object} args.config={} - This driver configuration.
	     * @param {boolean} args.reactive - Whether this session should create reactive streams
	     * @param {number} args.fetchSize - Defines how many records is pulled in each pulling batch
	     * @param {string} args.impersonatedUser - The username which the user wants to impersonate for the duration of the session.
	     */
	    function Session(_a) {
	        var mode = _a.mode, connectionProvider = _a.connectionProvider, bookmarks = _a.bookmarks, database = _a.database, config = _a.config, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, bookmarkManager = _a.bookmarkManager;
	        this._mode = mode;
	        this._database = database;
	        this._reactive = reactive;
	        this._fetchSize = fetchSize;
	        this._onDatabaseNameResolved = this._onDatabaseNameResolved.bind(this);
	        this._getConnectionAcquistionBookmarks = this._getConnectionAcquistionBookmarks.bind(this);
	        this._readConnectionHolder = new connection_holder_1.ConnectionHolder({
	            mode: constants_1$1.ACCESS_MODE_READ,
	            database: database,
	            bookmarks: bookmarks,
	            connectionProvider: connectionProvider,
	            impersonatedUser: impersonatedUser,
	            onDatabaseNameResolved: this._onDatabaseNameResolved,
	            getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks
	        });
	        this._writeConnectionHolder = new connection_holder_1.ConnectionHolder({
	            mode: constants_1$1.ACCESS_MODE_WRITE,
	            database: database,
	            bookmarks: bookmarks,
	            connectionProvider: connectionProvider,
	            impersonatedUser: impersonatedUser,
	            onDatabaseNameResolved: this._onDatabaseNameResolved,
	            getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks
	        });
	        this._open = true;
	        this._hasTx = false;
	        this._impersonatedUser = impersonatedUser;
	        this._lastBookmarks = bookmarks !== null && bookmarks !== void 0 ? bookmarks : bookmarks_1$1.Bookmarks.empty();
	        this._configuredBookmarks = this._lastBookmarks;
	        this._transactionExecutor = _createTransactionExecutor(config);
	        this._databaseNameResolved = this._database !== '';
	        var calculatedWatermaks = this._calculateWatermaks();
	        this._lowRecordWatermark = calculatedWatermaks.low;
	        this._highRecordWatermark = calculatedWatermaks.high;
	        this._results = [];
	        this._bookmarkManager = bookmarkManager;
	    }
	    /**
	     * Run Cypher query
	     * Could be called with a query object i.e.: `{text: "MATCH ...", parameters: {param: 1}}`
	     * or with the query and parameters as separate arguments.
	     *
	     * @public
	     * @param {mixed} query - Cypher query to execute
	     * @param {Object} parameters - Map with parameters to use in query
	     * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.
	     * @return {Result} New Result.
	     */
	    Session.prototype.run = function (query, parameters, transactionConfig) {
	        var _this = this;
	        var _a = (0, util_1$1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;
	        var autoCommitTxConfig = (transactionConfig != null)
	            ? new tx_config_1.TxConfig(transactionConfig)
	            : tx_config_1.TxConfig.empty();
	        var result = this._run(validatedQuery, params, function (connection) { return __awaiter$6(_this, void 0, void 0, function () {
	            var bookmarks;
	            var _this = this;
	            return __generator$6(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._bookmarks()];
	                    case 1:
	                        bookmarks = _a.sent();
	                        this._assertSessionIsOpen();
	                        return [2 /*return*/, connection.protocol().run(validatedQuery, params, {
	                                bookmarks: bookmarks,
	                                txConfig: autoCommitTxConfig,
	                                mode: this._mode,
	                                database: this._database,
	                                impersonatedUser: this._impersonatedUser,
	                                afterComplete: function (meta) { return _this._onCompleteCallback(meta, bookmarks); },
	                                reactive: this._reactive,
	                                fetchSize: this._fetchSize,
	                                lowRecordWatermark: this._lowRecordWatermark,
	                                highRecordWatermark: this._highRecordWatermark
	                            })];
	                }
	            });
	        }); });
	        this._results.push(result);
	        return result;
	    };
	    Session.prototype._run = function (query, parameters, customRunner) {
	        var connectionHolder = this._connectionHolderWithMode(this._mode);
	        var observerPromise;
	        if (!this._open) {
	            observerPromise = Promise.resolve(new observers_1.FailedObserver({
	                error: (0, error_1.newError)('Cannot run query in a closed session.')
	            }));
	        }
	        else if (!this._hasTx && connectionHolder.initializeConnection()) {
	            observerPromise = connectionHolder
	                .getConnection()
	                .then(function (connection) { return customRunner(connection); })
	                .catch(function (error) { return Promise.resolve(new observers_1.FailedObserver({ error: error })); });
	        }
	        else {
	            observerPromise = Promise.resolve(new observers_1.FailedObserver({
	                error: (0, error_1.newError)('Queries cannot be run directly on a ' +
	                    'session with an open transaction; either run from within the ' +
	                    'transaction or use a different session.')
	            }));
	        }
	        var watermarks = { high: this._highRecordWatermark, low: this._lowRecordWatermark };
	        return new result_1.default(observerPromise, query, parameters, connectionHolder, watermarks);
	    };
	    Session.prototype._acquireConnection = function (connectionConsumer) {
	        var _this = this;
	        var promise;
	        var connectionHolder = this._connectionHolderWithMode(this._mode);
	        if (!this._open) {
	            promise = Promise.reject((0, error_1.newError)('Cannot run query in a closed session.'));
	        }
	        else if (!this._hasTx && connectionHolder.initializeConnection()) {
	            promise = connectionHolder
	                .getConnection()
	                .then(function (connection) { return connectionConsumer(connection); })
	                .then(function (result) { return __awaiter$6(_this, void 0, void 0, function () {
	                return __generator$6(this, function (_a) {
	                    switch (_a.label) {
	                        case 0: return [4 /*yield*/, connectionHolder.releaseConnection()];
	                        case 1:
	                            _a.sent();
	                            return [2 /*return*/, result];
	                    }
	                });
	            }); });
	        }
	        else {
	            promise = Promise.reject((0, error_1.newError)('Queries cannot be run directly on a ' +
	                'session with an open transaction; either run from within the ' +
	                'transaction or use a different session.'));
	        }
	        return promise;
	    };
	    /**
	     * Begin a new transaction in this session. A session can have at most one transaction running at a time, if you
	     * want to run multiple concurrent transactions, you should use multiple concurrent sessions.
	     *
	     * While a transaction is open the session cannot be used to run queries outside the transaction.
	     *
	     * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.
	     * @returns {TransactionPromise} New Transaction.
	     */
	    Session.prototype.beginTransaction = function (transactionConfig) {
	        // this function needs to support bookmarks parameter for backwards compatibility
	        // parameter was of type {string|string[]} and represented either a single or multiple bookmarks
	        // that's why we need to check parameter type and decide how to interpret the value
	        var arg = transactionConfig;
	        var txConfig = tx_config_1.TxConfig.empty();
	        if (arg != null) {
	            txConfig = new tx_config_1.TxConfig(arg);
	        }
	        return this._beginTransaction(this._mode, txConfig);
	    };
	    Session.prototype._beginTransaction = function (accessMode, txConfig) {
	        var _this = this;
	        if (!this._open) {
	            throw (0, error_1.newError)('Cannot begin a transaction on a closed session.');
	        }
	        if (this._hasTx) {
	            throw (0, error_1.newError)('You cannot begin a transaction on a session with an open transaction; ' +
	                'either run from within the transaction or use a different session.');
	        }
	        var mode = Session._validateSessionMode(accessMode);
	        var connectionHolder = this._connectionHolderWithMode(mode);
	        connectionHolder.initializeConnection();
	        this._hasTx = true;
	        var tx = new transaction_promise_1.default({
	            connectionHolder: connectionHolder,
	            impersonatedUser: this._impersonatedUser,
	            onClose: this._transactionClosed.bind(this),
	            onBookmarks: function (newBm, oldBm, db) { return _this._updateBookmarks(newBm, oldBm, db); },
	            onConnection: this._assertSessionIsOpen.bind(this),
	            reactive: this._reactive,
	            fetchSize: this._fetchSize,
	            lowRecordWatermark: this._lowRecordWatermark,
	            highRecordWatermark: this._highRecordWatermark
	        });
	        tx._begin(function () { return _this._bookmarks(); }, txConfig);
	        return tx;
	    };
	    /**
	     * @private
	     * @returns {void}
	     */
	    Session.prototype._assertSessionIsOpen = function () {
	        if (!this._open) {
	            throw (0, error_1.newError)('You cannot run more transactions on a closed session.');
	        }
	    };
	    /**
	     * @private
	     * @returns {void}
	     */
	    Session.prototype._transactionClosed = function () {
	        this._hasTx = false;
	    };
	    /**
	     * Return the bookmarks received following the last completed {@link Transaction}.
	     *
	     * @deprecated This method will be removed in version 6.0. Please, use Session#lastBookmarks instead.
	     *
	     * @return {string[]} A reference to a previous transaction.
	     * @see {@link Session#lastBookmarks}
	     */
	    Session.prototype.lastBookmark = function () {
	        return this.lastBookmarks();
	    };
	    /**
	     * Return the bookmarks received following the last completed {@link Transaction}.
	     *
	     * @return {string[]} A reference to a previous transaction.
	     */
	    Session.prototype.lastBookmarks = function () {
	        return this._lastBookmarks.values();
	    };
	    Session.prototype._bookmarks = function () {
	        var _a;
	        return __awaiter$6(this, void 0, void 0, function () {
	            var bookmarks;
	            return __generator$6(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, ((_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.getBookmarks())];
	                    case 1:
	                        bookmarks = _b.sent();
	                        if (bookmarks === undefined) {
	                            return [2 /*return*/, this._lastBookmarks];
	                        }
	                        return [2 /*return*/, new bookmarks_1$1.Bookmarks(__spreadArray$2(__spreadArray$2([], __read$7(bookmarks), false), __read$7(this._configuredBookmarks), false))];
	                }
	            });
	        });
	    };
	    /**
	     * Execute given unit of work in a {@link READ} transaction.
	     *
	     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.
	     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial
	     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's
	     * `maxTransactionRetryTime` property in milliseconds.
	     *
	     * @deprecated This method will be removed in version 6.0. Please, use Session#executeRead instead.
	     *
	     * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against
	     * a given {@link Transaction}.
	     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.
	     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given
	     * function or commit fails.
	     * @see {@link Session#executeRead}
	     */
	    Session.prototype.readTransaction = function (transactionWork, transactionConfig) {
	        var config = new tx_config_1.TxConfig(transactionConfig);
	        return this._runTransaction(constants_1$1.ACCESS_MODE_READ, config, transactionWork);
	    };
	    /**
	     * Execute given unit of work in a {@link WRITE} transaction.
	     *
	     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.
	     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial
	     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's
	     * `maxTransactionRetryTime` property in milliseconds.
	     *
	     * @deprecated This method will be removed in version 6.0. Please, use Session#executeWrite instead.
	     *
	     * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against
	     * a given {@link Transaction}.
	     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.
	     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given
	     * function or commit fails.
	     * @see {@link Session#executeWrite}
	     */
	    Session.prototype.writeTransaction = function (transactionWork, transactionConfig) {
	        var config = new tx_config_1.TxConfig(transactionConfig);
	        return this._runTransaction(constants_1$1.ACCESS_MODE_WRITE, config, transactionWork);
	    };
	    Session.prototype._runTransaction = function (accessMode, transactionConfig, transactionWork) {
	        var _this = this;
	        return this._transactionExecutor.execute(function () { return _this._beginTransaction(accessMode, transactionConfig); }, transactionWork);
	    };
	    /**
	     * Execute given unit of work in a {@link READ} transaction.
	     *
	     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.
	     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial
	     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's
	     * `maxTransactionRetryTime` property in milliseconds.
	     *
	     * @param {function(tx: ManagedTransaction): Promise} transactionWork - Callback that executes operations against
	     * a given {@link Transaction}.
	     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.
	     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given
	     * function or commit fails.
	     */
	    Session.prototype.executeRead = function (transactionWork, transactionConfig) {
	        var config = new tx_config_1.TxConfig(transactionConfig);
	        return this._executeInTransaction(constants_1$1.ACCESS_MODE_READ, config, transactionWork);
	    };
	    /**
	     * Execute given unit of work in a {@link WRITE} transaction.
	     *
	     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.
	     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial
	     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's
	     * `maxTransactionRetryTime` property in milliseconds.
	     *
	     * @param {function(tx: ManagedTransaction): Promise} transactionWork - Callback that executes operations against
	     * a given {@link Transaction}.
	     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.
	     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given
	     * function or commit fails.
	     */
	    Session.prototype.executeWrite = function (transactionWork, transactionConfig) {
	        var config = new tx_config_1.TxConfig(transactionConfig);
	        return this._executeInTransaction(constants_1$1.ACCESS_MODE_WRITE, config, transactionWork);
	    };
	    /**
	     * @private
	     * @param {SessionMode} accessMode
	     * @param {TxConfig} transactionConfig
	     * @param {ManagedTransactionWork} transactionWork
	     * @returns {Promise}
	     */
	    Session.prototype._executeInTransaction = function (accessMode, transactionConfig, transactionWork) {
	        var _this = this;
	        return this._transactionExecutor.execute(function () { return _this._beginTransaction(accessMode, transactionConfig); }, transactionWork, transaction_managed_1.default.fromTransaction);
	    };
	    /**
	     * Sets the resolved database name in the session context.
	     * @private
	     * @param {string|undefined} database The resolved database name
	     * @returns {void}
	     */
	    Session.prototype._onDatabaseNameResolved = function (database) {
	        if (!this._databaseNameResolved) {
	            var normalizedDatabase = database !== null && database !== void 0 ? database : '';
	            this._database = normalizedDatabase;
	            this._readConnectionHolder.setDatabase(normalizedDatabase);
	            this._writeConnectionHolder.setDatabase(normalizedDatabase);
	            this._databaseNameResolved = true;
	        }
	    };
	    Session.prototype._getConnectionAcquistionBookmarks = function () {
	        var _a;
	        return __awaiter$6(this, void 0, void 0, function () {
	            var bookmarks;
	            return __generator$6(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, ((_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.getBookmarks())];
	                    case 1:
	                        bookmarks = _b.sent();
	                        if (bookmarks === undefined) {
	                            return [2 /*return*/, this._lastBookmarks];
	                        }
	                        return [2 /*return*/, new bookmarks_1$1.Bookmarks(__spreadArray$2(__spreadArray$2([], __read$7(this._configuredBookmarks), false), __read$7(bookmarks), false))];
	                }
	            });
	        });
	    };
	    /**
	     * Update value of the last bookmarks.
	     * @private
	     * @param {Bookmarks} newBookmarks - The new bookmarks.
	     * @returns {void}
	     */
	    Session.prototype._updateBookmarks = function (newBookmarks, previousBookmarks, database) {
	        var _a, _b, _c;
	        if ((newBookmarks != null) && !newBookmarks.isEmpty()) {
	            (_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.updateBookmarks((_b = previousBookmarks === null || previousBookmarks === void 0 ? void 0 : previousBookmarks.values()) !== null && _b !== void 0 ? _b : [], (_c = newBookmarks === null || newBookmarks === void 0 ? void 0 : newBookmarks.values()) !== null && _c !== void 0 ? _c : []);
	            this._lastBookmarks = newBookmarks;
	            this._configuredBookmarks = bookmarks_1$1.Bookmarks.empty();
	        }
	    };
	    /**
	     * Close this session.
	     * @return {Promise}
	     */
	    Session.prototype.close = function () {
	        return __awaiter$6(this, void 0, void 0, function () {
	            return __generator$6(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this._open) return [3 /*break*/, 3];
	                        this._open = false;
	                        this._results.forEach(function (result) { return result._cancel(); });
	                        this._transactionExecutor.close();
	                        return [4 /*yield*/, this._readConnectionHolder.close(this._hasTx)];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this._writeConnectionHolder.close(this._hasTx)];
	                    case 2:
	                        _a.sent();
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Session.prototype._connectionHolderWithMode = function (mode) {
	        if (mode === constants_1$1.ACCESS_MODE_READ) {
	            return this._readConnectionHolder;
	        }
	        else if (mode === constants_1$1.ACCESS_MODE_WRITE) {
	            return this._writeConnectionHolder;
	        }
	        else {
	            throw (0, error_1.newError)('Unknown access mode: ' + mode);
	        }
	    };
	    /**
	     * @private
	     * @param {Object} meta Connection metadatada
	     * @returns {void}
	     */
	    Session.prototype._onCompleteCallback = function (meta, previousBookmarks) {
	        this._updateBookmarks(new bookmarks_1$1.Bookmarks(meta.bookmark), previousBookmarks, meta.db);
	    };
	    /**
	     * @private
	     * @returns {void}
	     */
	    Session.prototype._calculateWatermaks = function () {
	        if (this._fetchSize === constants_1$1.FETCH_ALL) {
	            return {
	                low: Number.MAX_VALUE,
	                high: Number.MAX_VALUE // we shall never reach this number to disable auto pull
	            };
	        }
	        return {
	            low: 0.3 * this._fetchSize,
	            high: 0.7 * this._fetchSize
	        };
	    };
	    /**
	     * @protected
	     */
	    Session._validateSessionMode = function (rawMode) {
	        var mode = rawMode !== null && rawMode !== void 0 ? rawMode : constants_1$1.ACCESS_MODE_WRITE;
	        if (mode !== constants_1$1.ACCESS_MODE_READ && mode !== constants_1$1.ACCESS_MODE_WRITE) {
	            throw (0, error_1.newError)('Illegal session mode ' + mode);
	        }
	        return mode;
	    };
	    return Session;
	}());
	/**
	 * @private
	 * @param {object} config
	 * @returns {TransactionExecutor} The transaction executor
	 */
	function _createTransactionExecutor(config) {
	    var _a;
	    var maxRetryTimeMs = (_a = config === null || config === void 0 ? void 0 : config.maxTransactionRetryTime) !== null && _a !== void 0 ? _a : null;
	    return new transaction_executor_1.TransactionExecutor(maxRetryTimeMs);
	}
	session.default = Session;

	var driver = {};

	var __importDefault$A = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(driver, "__esModule", { value: true });
	driver.SessionConfig = driver.WRITE = driver.READ = driver.Driver = void 0;
	var bookmarks_1 = bookmarks$1;
	var configured_custom_resolver_1 = __importDefault$A(configuredCustomResolver);
	var constants_1 = constants$1;
	var logger_1 = logger$1;
	var session_1 = __importDefault$A(session);
	var util_1 = util$4;
	var DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1000; // 1 hour
	/**
	 * The default record fetch size. This is used in Bolt V4 protocol to pull query execution result in batches.
	 * @type {number}
	 */
	var DEFAULT_FETCH_SIZE = 1000;
	/**
	 * Constant that represents read session access mode.
	 * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.READ })`.
	 * @type {string}
	 */
	var READ$2 = constants_1.ACCESS_MODE_READ;
	driver.READ = READ$2;
	/**
	 * Constant that represents write session access mode.
	 * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.WRITE })`.
	 * @type {string}
	 */
	var WRITE$2 = constants_1.ACCESS_MODE_WRITE;
	driver.WRITE = WRITE$2;
	var idGenerator$1 = 0;
	/**
	 * The session configuration
	 *
	 * @interface
	 */
	var SessionConfig = /** @class */ (function () {
	    /**
	     * @constructor
	     * @private
	     */
	    function SessionConfig() {
	        /**
	         * The access mode of this session, allowed values are {@link READ} and {@link WRITE}.
	         * **Default**: {@link WRITE}
	         * @type {string}
	         */
	        this.defaultAccessMode = WRITE$2;
	        /**
	         * The initial reference or references to some previous
	         * transactions. Value is optional and absence indicates that that the bookmarks do not exist or are unknown.
	         * @type {string|string[]|undefined}
	         */
	        this.bookmarks = [];
	        /**
	         * The database this session will operate on.
	         *
	         * This option has no explicit value by default, but it is recommended to set
	         * one if the target database is known in advance. This has the benefit of
	         * ensuring a consistent target database name throughout the session in a
	         * straightforward way and potentially simplifies driver logic as well as
	         * reduces network communication resulting in better performance.
	         *
	         * Usage of Cypher clauses like USE is not a replacement for this option.
	         * The driver does not parse any Cypher.
	         *
	         * When no explicit name is set, the driver behavior depends on the connection
	         * URI scheme supplied to the driver on instantiation and Bolt protocol
	         * version.
	         *
	         * Specifically, the following applies:
	         *
	         * - **bolt schemes** - queries are dispatched to the server for execution
	         *   without explicit database name supplied, meaning that the target database
	         *   name for query execution is determined by the server. It is important to
	         *   note that the target database may change (even within the same session),
	         *   for instance if the user's home database is changed on the server.
	         *
	         * - **neo4j schemes** - providing that Bolt protocol version 4.4, which was
	         *   introduced with Neo4j server 4.4, or above is available, the driver
	         *   fetches the user's home database name from the server on first query
	         *   execution within the session and uses the fetched database name
	         *   explicitly for all queries executed within the session. This ensures that
	         *   the database name remains consistent within the given session. For
	         *   instance, if the user's home database name is 'movies' and the server
	         *   supplies it to the driver upon database name fetching for the session,
	         *   all queries within that session are executed with the explicit database
	         *   name 'movies' supplied. Any change to the user’s home database is
	         *   reflected only in sessions created after such change takes effect. This
	         *   behavior requires additional network communication. In clustered
	         *   environments, it is strongly recommended to avoid a single point of
	         *   failure. For instance, by ensuring that the connection URI resolves to
	         *   multiple endpoints. For older Bolt protocol versions the behavior is the
	         *   same as described for the **bolt schemes** above.
	         *
	         * @type {string|undefined}
	         */
	        this.database = '';
	        /**
	         * The username which the user wants to impersonate for the duration of the session.
	         *
	         * @type {string|undefined}
	         */
	        this.impersonatedUser = undefined;
	        /**
	         * The record fetch size of each batch of this session.
	         *
	         * Use {@link FETCH_ALL} to always pull all records in one batch. This will override the config value set on driver config.
	         *
	         * @type {number|undefined}
	         */
	        this.fetchSize = undefined;
	        /**
	         * Configure a BookmarkManager for the session to use
	         *
	         * A BookmarkManager is a piece of software responsible for keeping casual consistency between different sessions by sharing bookmarks
	         * between the them.
	         * Enabling it is done by supplying an BookmarkManager implementation instance to this param.
	         * A default implementation could be acquired by calling the factory function {@link bookmarkManager}.
	         *
	         * **Warning**: Sharing the same BookmarkManager instance across multiple sessions can have a negative impact
	         * on performance since all the queries will wait for the latest changes being propagated across the cluster.
	         * For keeping consistency between a group of queries, use {@link Session} for grouping them.
	         * For keeping consistency between a group of sessions, use {@link BookmarkManager} instance for grouping them.
	         *
	         * @example
	         * const bookmarkManager = neo4j.bookmarkManager()
	         * const linkedSession1 = driver.session({ database:'neo4j', bookmarkManager })
	         * const linkedSession2 = driver.session({ database:'neo4j', bookmarkManager })
	         * const unlinkedSession = driver.session({ database:'neo4j' })
	         *
	         * // Creating Driver User
	         * const createUserQueryResult = await linkedSession1.run('CREATE (p:Person {name: $name})', { name: 'Driver User'})
	         *
	         * // Reading Driver User will *NOT* wait of the changes being propagated to the server before RUN the query
	         * // So the 'Driver User' person might not exist in the Result
	         * const unlinkedReadResult = await unlinkedSession.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})
	         *
	         * // Reading Driver User will wait of the changes being propagated to the server before RUN the query
	         * // So the 'Driver User' person should exist in the Result, unless deleted.
	         * const linkedResult = await linkedSession2.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})
	         *
	         * await linkedSession1.close()
	         * await linkedSession2.close()
	         * await unlinkedSession.close()
	         *
	         * @experimental
	         * @type {BookmarkManager|undefined}
	         * @since 5.0
	         */
	        this.bookmarkManager = undefined;
	    }
	    return SessionConfig;
	}());
	driver.SessionConfig = SessionConfig;
	/**
	 * A driver maintains one or more {@link Session}s with a remote
	 * Neo4j instance. Through the {@link Session}s you can send queries
	 * and retrieve results from the database.
	 *
	 * Drivers are reasonably expensive to create - you should strive to keep one
	 * driver instance around per Neo4j Instance you connect to.
	 *
	 * @access public
	 */
	var Driver = /** @class */ (function () {
	    /**
	     * You should not be calling this directly, instead use {@link driver}.
	     * @constructor
	     * @protected
	     * @param {Object} meta Metainformation about the driver
	     * @param {Object} config
	     * @param {function(id: number, config:Object, log:Logger, hostNameResolver: ConfiguredCustomResolver): ConnectionProvider } createConnectonProvider Creates the connection provider
	     * @param {function(args): Session } createSession Creates the a session
	    */
	    function Driver(meta, config, createConnectonProvider, createSession) {
	        if (config === void 0) { config = {}; }
	        if (createSession === void 0) { createSession = function (args) { return new session_1.default(args); }; }
	        sanitizeConfig(config);
	        var log = logger_1.Logger.create(config);
	        validateConfig(config, log);
	        this._id = idGenerator$1++;
	        this._meta = meta;
	        this._config = config;
	        this._log = log;
	        this._createConnectionProvider = createConnectonProvider;
	        this._createSession = createSession;
	        /**
	         * Reference to the connection provider. Initialized lazily by {@link _getOrCreateConnectionProvider}.
	         * @type {ConnectionProvider}
	         * @protected
	         */
	        this._connectionProvider = null;
	        this._afterConstruction();
	    }
	    /**
	     * Verifies connectivity of this driver by trying to open a connection with the provided driver options.
	     *
	     * @deprecated This return of this method will change in 6.0.0 to not async return the {@link ServerInfo} and
	     * async return {@link void} instead. If you need to use the server info, use {@link getServerInfo} instead.
	     *
	     * @public
	     * @param {Object} param - The object parameter
	     * @param {string} param.database - The target database to verify connectivity for.
	     * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.
	     */
	    Driver.prototype.verifyConnectivity = function (_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;
	        var connectionProvider = this._getOrCreateConnectionProvider();
	        return connectionProvider.verifyConnectivityAndGetServerInfo({ database: database, accessMode: READ$2 });
	    };
	    /**
	     * Get ServerInfo for the giver database.
	     *
	     * @param {Object} param - The object parameter
	     * @param {string} param.database - The target database to verify connectivity for.
	     * @returns {Promise<void>} promise resolved with void or rejected with error.
	     */
	    Driver.prototype.getServerInfo = function (_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;
	        var connectionProvider = this._getOrCreateConnectionProvider();
	        return connectionProvider.verifyConnectivityAndGetServerInfo({ database: database, accessMode: READ$2 });
	    };
	    /**
	     * Returns whether the server supports multi database capabilities based on the protocol
	     * version negotiated via handshake.
	     *
	     * Note that this function call _always_ causes a round-trip to the server.
	     *
	     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.
	     */
	    Driver.prototype.supportsMultiDb = function () {
	        var connectionProvider = this._getOrCreateConnectionProvider();
	        return connectionProvider.supportsMultiDb();
	    };
	    /**
	     * Returns whether the server supports transaction config capabilities based on the protocol
	     * version negotiated via handshake.
	     *
	     * Note that this function call _always_ causes a round-trip to the server.
	     *
	     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.
	     */
	    Driver.prototype.supportsTransactionConfig = function () {
	        var connectionProvider = this._getOrCreateConnectionProvider();
	        return connectionProvider.supportsTransactionConfig();
	    };
	    /**
	     * Returns whether the server supports user impersonation capabilities based on the protocol
	     * version negotiated via handshake.
	     *
	     * Note that this function call _always_ causes a round-trip to the server.
	     *
	     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.
	     */
	    Driver.prototype.supportsUserImpersonation = function () {
	        var connectionProvider = this._getOrCreateConnectionProvider();
	        return connectionProvider.supportsUserImpersonation();
	    };
	    /**
	     * Returns the protocol version negotiated via handshake.
	     *
	     * Note that this function call _always_ causes a round-trip to the server.
	     *
	     * @returns {Promise<number>} the protocol version negotiated via handshake.
	     * @throws {Error} When protocol negotiation fails
	     */
	    Driver.prototype.getNegotiatedProtocolVersion = function () {
	        var connectionProvider = this._getOrCreateConnectionProvider();
	        return connectionProvider.getNegotiatedProtocolVersion();
	    };
	    /**
	     * Returns boolean to indicate if driver has been configured with encryption enabled.
	     *
	     * @returns {boolean}
	     */
	    Driver.prototype.isEncrypted = function () {
	        return this._isEncrypted();
	    };
	    /**
	     * @protected
	     * @returns {boolean}
	     */
	    Driver.prototype._supportsRouting = function () {
	        return this._meta.routing;
	    };
	    /**
	     * Returns boolean to indicate if driver has been configured with encryption enabled.
	     *
	     * @protected
	     * @returns {boolean}
	     */
	    Driver.prototype._isEncrypted = function () {
	        return this._config.encrypted === util_1.ENCRYPTION_ON || this._config.encrypted === true;
	    };
	    /**
	     * Returns the configured trust strategy that the driver has been configured with.
	     *
	     * @protected
	     * @returns {TrustStrategy}
	     */
	    Driver.prototype._getTrust = function () {
	        return this._config.trust;
	    };
	    /**
	     * Acquire a session to communicate with the database. The session will
	     * borrow connections from the underlying connection pool as required and
	     * should be considered lightweight and disposable.
	     *
	     * This comes with some responsibility - make sure you always call
	     * {@link close} when you are done using a session, and likewise,
	     * make sure you don't close your session before you are done using it. Once
	     * it is closed, the underlying connection will be released to the connection
	     * pool and made available for others to use.
	     *
	     * @public
	     * @param {SessionConfig} param - The session configuration
	     * @return {Session} new session.
	     */
	    Driver.prototype.session = function (_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.defaultAccessMode, defaultAccessMode = _c === void 0 ? WRITE$2 : _c, bookmarkOrBookmarks = _b.bookmarks, _d = _b.database, database = _d === void 0 ? '' : _d, impersonatedUser = _b.impersonatedUser, fetchSize = _b.fetchSize, bookmarkManager = _b.bookmarkManager;
	        return this._newSession({
	            defaultAccessMode: defaultAccessMode,
	            bookmarkOrBookmarks: bookmarkOrBookmarks,
	            database: database,
	            reactive: false,
	            impersonatedUser: impersonatedUser,
	            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	            fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize),
	            bookmarkManager: bookmarkManager
	        });
	    };
	    /**
	     * Close all open sessions and other associated resources. You should
	     * make sure to use this when you are done with this driver instance.
	     * @public
	     * @return {Promise<void>} promise resolved when the driver is closed.
	     */
	    Driver.prototype.close = function () {
	        this._log.info("Driver ".concat(this._id, " closing"));
	        if (this._connectionProvider != null) {
	            return this._connectionProvider.close();
	        }
	        return Promise.resolve();
	    };
	    /**
	     * @protected
	     */
	    Driver.prototype._afterConstruction = function () {
	        this._log.info("".concat(this._meta.typename, " driver ").concat(this._id, " created for server address ").concat(this._meta.address.toString()));
	    };
	    /**
	     * @private
	     */
	    Driver.prototype._newSession = function (_a) {
	        var defaultAccessMode = _a.defaultAccessMode, bookmarkOrBookmarks = _a.bookmarkOrBookmarks, database = _a.database, reactive = _a.reactive, impersonatedUser = _a.impersonatedUser, fetchSize = _a.fetchSize, bookmarkManager = _a.bookmarkManager;
	        var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);
	        var connectionProvider = this._getOrCreateConnectionProvider();
	        var bookmarks = bookmarkOrBookmarks != null
	            ? new bookmarks_1.Bookmarks(bookmarkOrBookmarks)
	            : bookmarks_1.Bookmarks.empty();
	        return this._createSession({
	            mode: sessionMode,
	            database: database !== null && database !== void 0 ? database : '',
	            connectionProvider: connectionProvider,
	            bookmarks: bookmarks,
	            config: this._config,
	            reactive: reactive,
	            impersonatedUser: impersonatedUser,
	            fetchSize: fetchSize,
	            bookmarkManager: bookmarkManager
	        });
	    };
	    /**
	     * @private
	     */
	    Driver.prototype._getOrCreateConnectionProvider = function () {
	        if (this._connectionProvider == null) {
	            this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));
	        }
	        return this._connectionProvider;
	    };
	    return Driver;
	}());
	driver.Driver = Driver;
	/**
	 * @private
	 * @returns {Object} the given config.
	 */
	function validateConfig(config, log) {
	    var resolver = config.resolver;
	    if (resolver !== null && resolver !== undefined && typeof resolver !== 'function') {
	        throw new TypeError("Configured resolver should be a function. Got: ".concat(typeof resolver));
	    }
	    if (config.connectionAcquisitionTimeout < config.connectionTimeout) {
	        log.warn('Configuration for "connectionAcquisitionTimeout" should be greater than ' +
	            'or equal to "connectionTimeout". Otherwise, the connection acquisition ' +
	            'timeout will take precedence for over the connection timeout in scenarios ' +
	            'where a new connection is created while it is acquired');
	    }
	    return config;
	}
	/**
	 * @private
	 */
	function sanitizeConfig(config) {
	    config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);
	    config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);
	    config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);
	    config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);
	    config.connectionTimeout = extractConnectionTimeout(config);
	}
	/**
	 * @private
	 */
	function sanitizeIntValue(rawValue, defaultWhenAbsent) {
	    var sanitizedValue = parseInt(rawValue, 10);
	    if (sanitizedValue > 0 || sanitizedValue === 0) {
	        return sanitizedValue;
	    }
	    else if (sanitizedValue < 0) {
	        return Number.MAX_SAFE_INTEGER;
	    }
	    else {
	        return defaultWhenAbsent;
	    }
	}
	/**
	 * @private
	 */
	function validateFetchSizeValue(rawValue, defaultWhenAbsent) {
	    var fetchSize = parseInt(rawValue, 10);
	    if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {
	        return fetchSize;
	    }
	    else if (fetchSize === 0 || fetchSize < 0) {
	        throw new Error("The fetch size can only be a positive value or ".concat(constants_1.FETCH_ALL, " for ALL. However fetchSize = ").concat(fetchSize));
	    }
	    else {
	        return defaultWhenAbsent;
	    }
	}
	/**
	 * @private
	 */
	function extractConnectionTimeout(config) {
	    var configuredTimeout = parseInt(config.connectionTimeout, 10);
	    if (configuredTimeout === 0) {
	        // timeout explicitly configured to 0
	        return null;
	    }
	    else if (!isNaN(configuredTimeout) && configuredTimeout < 0) {
	        // timeout explicitly configured to a negative value
	        return null;
	    }
	    else if (isNaN(configuredTimeout)) {
	        // timeout not configured, use default value
	        return constants_1.DEFAULT_CONNECTION_TIMEOUT_MILLIS;
	    }
	    else {
	        // timeout configured, use the provided value
	        return configuredTimeout;
	    }
	}
	/**
	 * @private
	 * @returns {ConfiguredCustomResolver} new custom resolver that wraps the passed-in resolver function.
	 *              If resolved function is not specified, it defaults to an identity resolver.
	 */
	function createHostNameResolver(config) {
	    return new configured_custom_resolver_1.default(config.resolver);
	}
	driver.default = Driver;

	var auth$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(auth$1, "__esModule", { value: true });
	/**
	 * @property {function(username: string, password: string, realm: ?string)} basic the function to create a
	 * basic authentication token.
	 * @property {function(base64EncodedTicket: string)} kerberos the function to create a Kerberos authentication token.
	 * Accepts a single string argument - base64 encoded Kerberos ticket.
	 * @property {function(base64EncodedTicket: string)} bearer the function to create a Bearer authentication token.
	 * Accepts a single string argument - base64 encoded Bearer ticket.
	 * @property {function(principal: string, credentials: string, realm: string, scheme: string, parameters: ?object)} custom
	 * the function to create a custom authentication token.
	 */
	var auth = {
	    basic: function (username, password, realm) {
	        if (realm != null) {
	            return {
	                scheme: 'basic',
	                principal: username,
	                credentials: password,
	                realm: realm
	            };
	        }
	        else {
	            return { scheme: 'basic', principal: username, credentials: password };
	        }
	    },
	    kerberos: function (base64EncodedTicket) {
	        return {
	            scheme: 'kerberos',
	            principal: '',
	            credentials: base64EncodedTicket
	        };
	    },
	    bearer: function (base64EncodedToken) {
	        return {
	            scheme: 'bearer',
	            credentials: base64EncodedToken
	        };
	    },
	    custom: function (principal, credentials, realm, scheme, parameters) {
	        var output = {
	            scheme: scheme,
	            principal: principal
	        };
	        if (isNotEmpty(credentials)) {
	            output.credentials = credentials;
	        }
	        if (isNotEmpty(realm)) {
	            output.realm = realm;
	        }
	        if (isNotEmpty(parameters)) {
	            output.parameters = parameters;
	        }
	        return output;
	    }
	};
	function isNotEmpty(value) {
	    return !(value === null ||
	        value === undefined ||
	        value === '' ||
	        (Object.getPrototypeOf(value) === Object.prototype && Object.keys(value).length === 0));
	}
	auth$1.default = auth;

	var bookmarkManager$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __awaiter$5 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$5 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __values$1 = (commonjsGlobal && commonjsGlobal.__values) || function(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	};
	var __read$6 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __spreadArray$1 = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(bookmarkManager$1, "__esModule", { value: true });
	bookmarkManager$1.bookmarkManager = void 0;
	/**
	 * Interface for the piece of software responsible for keeping track of current active bookmarks accross the driver.
	 * @interface
	 * @since 5.0
	 * @experimental
	 */
	var BookmarkManager = /** @class */ (function () {
	    /**
	     * @constructor
	     * @private
	     */
	    function BookmarkManager() {
	        throw new Error('Not implemented');
	    }
	    /**
	     * Method called when the bookmarks get updated when a transaction finished.
	     *
	     * This method will be called when auto-commit queries finish and when explicit transactions
	     * get committed.
	     *
	     * @param {Iterable<string>} previousBookmarks The bookmarks used when starting the transaction
	     * @param {Iterable<string>} newBookmarks The new bookmarks received at the end of the transaction.
	     * @returns {void}
	    */
	    BookmarkManager.prototype.updateBookmarks = function (previousBookmarks, newBookmarks) {
	        return __awaiter$5(this, void 0, void 0, function () {
	            return __generator$5(this, function (_a) {
	                throw new Error('Not implemented');
	            });
	        });
	    };
	    /**
	     * Method called by the driver to get the bookmarks.
	     *
	     * @returns {Iterable<string>} The set of bookmarks
	     */
	    BookmarkManager.prototype.getBookmarks = function () {
	        return __awaiter$5(this, void 0, void 0, function () {
	            return __generator$5(this, function (_a) {
	                throw new Error('Not implemented');
	            });
	        });
	    };
	    return BookmarkManager;
	}());
	bookmarkManager$1.default = BookmarkManager;
	/**
	 * @typedef {Object} BookmarkManagerConfig
	 *
	 * @since 5.0
	 * @experimental
	 * @property {Iterable<string>} [initialBookmarks] Defines the initial set of bookmarks. The key is the database name and the values are the bookmarks.
	 * @property {function():Promise<Iterable<string>>} [bookmarksSupplier] Called for supplying extra bookmarks to the BookmarkManager
	 * @property {function(bookmarks: Iterable<string>): Promise<void>} [bookmarksConsumer] Called when the set of bookmarks  get updated
	 */
	/**
	 * Provides an configured {@link BookmarkManager} instance.
	 *
	 * @since 5.0
	 * @experimental
	 * @param {BookmarkManagerConfig} [config={}]
	 * @returns {BookmarkManager}
	 */
	function bookmarkManager(config) {
	    if (config === void 0) { config = {}; }
	    var initialBookmarks = new Set(config.initialBookmarks);
	    return new Neo4jBookmarkManager(initialBookmarks, config.bookmarksSupplier, config.bookmarksConsumer);
	}
	bookmarkManager$1.bookmarkManager = bookmarkManager;
	var Neo4jBookmarkManager = /** @class */ (function () {
	    function Neo4jBookmarkManager(_bookmarks, _bookmarksSupplier, _bookmarksConsumer) {
	        this._bookmarks = _bookmarks;
	        this._bookmarksSupplier = _bookmarksSupplier;
	        this._bookmarksConsumer = _bookmarksConsumer;
	    }
	    Neo4jBookmarkManager.prototype.updateBookmarks = function (previousBookmarks, newBookmarks) {
	        return __awaiter$5(this, void 0, void 0, function () {
	            var bookmarks, previousBookmarks_1, previousBookmarks_1_1, bm, newBookmarks_1, newBookmarks_1_1, bm;
	            var e_1, _a, e_2, _b;
	            return __generator$5(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        bookmarks = this._bookmarks;
	                        try {
	                            for (previousBookmarks_1 = __values$1(previousBookmarks), previousBookmarks_1_1 = previousBookmarks_1.next(); !previousBookmarks_1_1.done; previousBookmarks_1_1 = previousBookmarks_1.next()) {
	                                bm = previousBookmarks_1_1.value;
	                                bookmarks.delete(bm);
	                            }
	                        }
	                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                        finally {
	                            try {
	                                if (previousBookmarks_1_1 && !previousBookmarks_1_1.done && (_a = previousBookmarks_1.return)) _a.call(previousBookmarks_1);
	                            }
	                            finally { if (e_1) throw e_1.error; }
	                        }
	                        try {
	                            for (newBookmarks_1 = __values$1(newBookmarks), newBookmarks_1_1 = newBookmarks_1.next(); !newBookmarks_1_1.done; newBookmarks_1_1 = newBookmarks_1.next()) {
	                                bm = newBookmarks_1_1.value;
	                                bookmarks.add(bm);
	                            }
	                        }
	                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                        finally {
	                            try {
	                                if (newBookmarks_1_1 && !newBookmarks_1_1.done && (_b = newBookmarks_1.return)) _b.call(newBookmarks_1);
	                            }
	                            finally { if (e_2) throw e_2.error; }
	                        }
	                        if (!(typeof this._bookmarksConsumer === 'function')) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this._bookmarksConsumer(__spreadArray$1([], __read$6(bookmarks), false))];
	                    case 1:
	                        _c.sent();
	                        _c.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Neo4jBookmarkManager.prototype.getBookmarks = function () {
	        var _a;
	        return __awaiter$5(this, void 0, void 0, function () {
	            var bookmarks, suppliedBookmarks, suppliedBookmarks_1, suppliedBookmarks_1_1, bm;
	            var e_3, _b;
	            return __generator$5(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        bookmarks = new Set(this._bookmarks);
	                        if (!(typeof this._bookmarksSupplier === 'function')) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this._bookmarksSupplier()];
	                    case 1:
	                        suppliedBookmarks = (_a = _c.sent()) !== null && _a !== void 0 ? _a : [];
	                        try {
	                            for (suppliedBookmarks_1 = __values$1(suppliedBookmarks), suppliedBookmarks_1_1 = suppliedBookmarks_1.next(); !suppliedBookmarks_1_1.done; suppliedBookmarks_1_1 = suppliedBookmarks_1.next()) {
	                                bm = suppliedBookmarks_1_1.value;
	                                bookmarks.add(bm);
	                            }
	                        }
	                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	                        finally {
	                            try {
	                                if (suppliedBookmarks_1_1 && !suppliedBookmarks_1_1.done && (_b = suppliedBookmarks_1.return)) _b.call(suppliedBookmarks_1);
	                            }
	                            finally { if (e_3) throw e_3.error; }
	                        }
	                        _c.label = 2;
	                    case 2: return [2 /*return*/, __spreadArray$1([], __read$6(bookmarks), false)];
	                }
	            });
	        });
	    };
	    return Neo4jBookmarkManager;
	}());

	var types = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(types, "__esModule", { value: true });

	(function (exports) {
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TransactionPromise = exports.ManagedTransaction = exports.Transaction = exports.Connection = exports.ConnectionProvider = exports.Result = exports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = exports.ResultSummary = exports.Record = exports.isPathSegment = exports.PathSegment = exports.isPath = exports.Path = exports.isUnboundRelationship = exports.UnboundRelationship = exports.isRelationship = exports.Relationship = exports.isNode = exports.Node = exports.Time = exports.LocalTime = exports.LocalDateTime = exports.isTime = exports.isLocalTime = exports.isLocalDateTime = exports.isDuration = exports.isDateTime = exports.isDate = exports.Duration = exports.DateTime = exports.Date = exports.Point = exports.isPoint = exports.internal = exports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = exports.Integer = exports.error = exports.isRetriableError = exports.Neo4jError = exports.newError = void 0;
	exports.bookmarkManager = exports.auth = exports.json = exports.driver = exports.types = exports.Driver = exports.Session = void 0;
	var error_1 = error;
	Object.defineProperty(exports, "newError", { enumerable: true, get: function () { return error_1.newError; } });
	Object.defineProperty(exports, "Neo4jError", { enumerable: true, get: function () { return error_1.Neo4jError; } });
	Object.defineProperty(exports, "isRetriableError", { enumerable: true, get: function () { return error_1.isRetriableError; } });
	var integer_1 = __importStar(integer);
	exports.Integer = integer_1.default;
	Object.defineProperty(exports, "int", { enumerable: true, get: function () { return integer_1.int; } });
	Object.defineProperty(exports, "isInt", { enumerable: true, get: function () { return integer_1.isInt; } });
	Object.defineProperty(exports, "inSafeRange", { enumerable: true, get: function () { return integer_1.inSafeRange; } });
	Object.defineProperty(exports, "toNumber", { enumerable: true, get: function () { return integer_1.toNumber; } });
	Object.defineProperty(exports, "toString", { enumerable: true, get: function () { return integer_1.toString; } });
	var temporal_types_1 = temporalTypes;
	Object.defineProperty(exports, "Date", { enumerable: true, get: function () { return temporal_types_1.Date; } });
	Object.defineProperty(exports, "DateTime", { enumerable: true, get: function () { return temporal_types_1.DateTime; } });
	Object.defineProperty(exports, "Duration", { enumerable: true, get: function () { return temporal_types_1.Duration; } });
	Object.defineProperty(exports, "isDate", { enumerable: true, get: function () { return temporal_types_1.isDate; } });
	Object.defineProperty(exports, "isDateTime", { enumerable: true, get: function () { return temporal_types_1.isDateTime; } });
	Object.defineProperty(exports, "isDuration", { enumerable: true, get: function () { return temporal_types_1.isDuration; } });
	Object.defineProperty(exports, "isLocalDateTime", { enumerable: true, get: function () { return temporal_types_1.isLocalDateTime; } });
	Object.defineProperty(exports, "isLocalTime", { enumerable: true, get: function () { return temporal_types_1.isLocalTime; } });
	Object.defineProperty(exports, "isTime", { enumerable: true, get: function () { return temporal_types_1.isTime; } });
	Object.defineProperty(exports, "LocalDateTime", { enumerable: true, get: function () { return temporal_types_1.LocalDateTime; } });
	Object.defineProperty(exports, "LocalTime", { enumerable: true, get: function () { return temporal_types_1.LocalTime; } });
	Object.defineProperty(exports, "Time", { enumerable: true, get: function () { return temporal_types_1.Time; } });
	var graph_types_1 = graphTypes;
	Object.defineProperty(exports, "Node", { enumerable: true, get: function () { return graph_types_1.Node; } });
	Object.defineProperty(exports, "isNode", { enumerable: true, get: function () { return graph_types_1.isNode; } });
	Object.defineProperty(exports, "Relationship", { enumerable: true, get: function () { return graph_types_1.Relationship; } });
	Object.defineProperty(exports, "isRelationship", { enumerable: true, get: function () { return graph_types_1.isRelationship; } });
	Object.defineProperty(exports, "UnboundRelationship", { enumerable: true, get: function () { return graph_types_1.UnboundRelationship; } });
	Object.defineProperty(exports, "isUnboundRelationship", { enumerable: true, get: function () { return graph_types_1.isUnboundRelationship; } });
	Object.defineProperty(exports, "Path", { enumerable: true, get: function () { return graph_types_1.Path; } });
	Object.defineProperty(exports, "isPath", { enumerable: true, get: function () { return graph_types_1.isPath; } });
	Object.defineProperty(exports, "PathSegment", { enumerable: true, get: function () { return graph_types_1.PathSegment; } });
	Object.defineProperty(exports, "isPathSegment", { enumerable: true, get: function () { return graph_types_1.isPathSegment; } });
	var record_1 = __importDefault(record);
	exports.Record = record_1.default;
	var spatial_types_1 = spatialTypes;
	Object.defineProperty(exports, "isPoint", { enumerable: true, get: function () { return spatial_types_1.isPoint; } });
	Object.defineProperty(exports, "Point", { enumerable: true, get: function () { return spatial_types_1.Point; } });
	var result_summary_1 = __importStar(resultSummary);
	exports.ResultSummary = result_summary_1.default;
	Object.defineProperty(exports, "queryType", { enumerable: true, get: function () { return result_summary_1.queryType; } });
	Object.defineProperty(exports, "ServerInfo", { enumerable: true, get: function () { return result_summary_1.ServerInfo; } });
	Object.defineProperty(exports, "Notification", { enumerable: true, get: function () { return result_summary_1.Notification; } });
	Object.defineProperty(exports, "Plan", { enumerable: true, get: function () { return result_summary_1.Plan; } });
	Object.defineProperty(exports, "ProfiledPlan", { enumerable: true, get: function () { return result_summary_1.ProfiledPlan; } });
	Object.defineProperty(exports, "QueryStatistics", { enumerable: true, get: function () { return result_summary_1.QueryStatistics; } });
	Object.defineProperty(exports, "Stats", { enumerable: true, get: function () { return result_summary_1.Stats; } });
	var result_1 = __importDefault(result);
	exports.Result = result_1.default;
	var connection_provider_1 = __importDefault(connectionProvider$1);
	exports.ConnectionProvider = connection_provider_1.default;
	var connection_1 = __importDefault(connection$2);
	exports.Connection = connection_1.default;
	var transaction_1 = __importDefault(transaction);
	exports.Transaction = transaction_1.default;
	var transaction_managed_1 = __importDefault(transactionManaged);
	exports.ManagedTransaction = transaction_managed_1.default;
	var transaction_promise_1 = __importDefault(transactionPromise);
	exports.TransactionPromise = transaction_promise_1.default;
	var session_1 = __importDefault(session);
	exports.Session = session_1.default;
	var driver_1 = __importStar(driver), driver$1 = driver_1;
	exports.Driver = driver_1.default;
	exports.driver = driver$1;
	var auth_1 = __importDefault(auth$1);
	exports.auth = auth_1.default;
	var bookmark_manager_1 = bookmarkManager$1;
	Object.defineProperty(exports, "bookmarkManager", { enumerable: true, get: function () { return bookmark_manager_1.bookmarkManager; } });
	var types$1 = __importStar(types);
	exports.types = types$1;
	var json$1 = __importStar(json);
	exports.json = json$1;
	var internal$1 = __importStar(internal); // todo: removed afterwards
	exports.internal = internal$1;
	/**
	 * Object containing string constants representing predefined {@link Neo4jError} codes.
	 */
	var error$1 = {
	    SERVICE_UNAVAILABLE: error_1.SERVICE_UNAVAILABLE,
	    SESSION_EXPIRED: error_1.SESSION_EXPIRED,
	    PROTOCOL_ERROR: error_1.PROTOCOL_ERROR
	};
	exports.error = error$1;
	/**
	 * @private
	 */
	var forExport = {
	    newError: error_1.newError,
	    Neo4jError: error_1.Neo4jError,
	    isRetriableError: error_1.isRetriableError,
	    error: error$1,
	    Integer: integer_1.default,
	    int: integer_1.int,
	    isInt: integer_1.isInt,
	    inSafeRange: integer_1.inSafeRange,
	    toNumber: integer_1.toNumber,
	    toString: integer_1.toString,
	    internal: internal$1,
	    isPoint: spatial_types_1.isPoint,
	    Point: spatial_types_1.Point,
	    Date: temporal_types_1.Date,
	    DateTime: temporal_types_1.DateTime,
	    Duration: temporal_types_1.Duration,
	    isDate: temporal_types_1.isDate,
	    isDateTime: temporal_types_1.isDateTime,
	    isDuration: temporal_types_1.isDuration,
	    isLocalDateTime: temporal_types_1.isLocalDateTime,
	    isLocalTime: temporal_types_1.isLocalTime,
	    isTime: temporal_types_1.isTime,
	    LocalDateTime: temporal_types_1.LocalDateTime,
	    LocalTime: temporal_types_1.LocalTime,
	    Time: temporal_types_1.Time,
	    Node: graph_types_1.Node,
	    isNode: graph_types_1.isNode,
	    Relationship: graph_types_1.Relationship,
	    isRelationship: graph_types_1.isRelationship,
	    UnboundRelationship: graph_types_1.UnboundRelationship,
	    isUnboundRelationship: graph_types_1.isUnboundRelationship,
	    Path: graph_types_1.Path,
	    isPath: graph_types_1.isPath,
	    PathSegment: graph_types_1.PathSegment,
	    isPathSegment: graph_types_1.isPathSegment,
	    Record: record_1.default,
	    ResultSummary: result_summary_1.default,
	    queryType: result_summary_1.queryType,
	    ServerInfo: result_summary_1.ServerInfo,
	    Notification: result_summary_1.Notification,
	    Plan: result_summary_1.Plan,
	    ProfiledPlan: result_summary_1.ProfiledPlan,
	    QueryStatistics: result_summary_1.QueryStatistics,
	    Stats: result_summary_1.Stats,
	    Result: result_1.default,
	    Transaction: transaction_1.default,
	    ManagedTransaction: transaction_managed_1.default,
	    TransactionPromise: transaction_promise_1.default,
	    Session: session_1.default,
	    Driver: driver_1.default,
	    Connection: connection_1.default,
	    types: types$1,
	    driver: driver$1,
	    json: json$1,
	    auth: auth_1.default,
	    bookmarkManager: bookmark_manager_1.bookmarkManager
	};
	exports.default = forExport;
	}(lib$1));

	var lib = {};

	var loadBalancing = {};

	var loadBalancingStrategy = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(loadBalancingStrategy, "__esModule", { value: true });
	/**
	 * A facility to select most appropriate reader or writer among the given addresses for request processing.
	 */
	var LoadBalancingStrategy = /** @class */ (function () {
	    function LoadBalancingStrategy() {
	    }
	    /**
	     * Select next most appropriate reader from the list of given readers.
	     * @param {string[]} knownReaders an array of currently known readers to select from.
	     * @return {string} most appropriate reader or `null` if given array is empty.
	     */
	    LoadBalancingStrategy.prototype.selectReader = function (knownReaders) {
	        throw new Error('Abstract function');
	    };
	    /**
	     * Select next most appropriate writer from the list of given writers.
	     * @param {string[]} knownWriters an array of currently known writers to select from.
	     * @return {string} most appropriate writer or `null` if given array is empty.
	     */
	    LoadBalancingStrategy.prototype.selectWriter = function (knownWriters) {
	        throw new Error('Abstract function');
	    };
	    return LoadBalancingStrategy;
	}());
	loadBalancingStrategy.default = LoadBalancingStrategy;

	var leastConnectedLoadBalancingStrategy = {};

	var roundRobinArrayIndex = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(roundRobinArrayIndex, "__esModule", { value: true });
	var RoundRobinArrayIndex = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {number} [initialOffset=0] the initial offset for round robin.
	     */
	    function RoundRobinArrayIndex(initialOffset) {
	        this._offset = initialOffset || 0;
	    }
	    /**
	     * Get next index for an array with given length.
	     * @param {number} arrayLength the array length.
	     * @return {number} index in the array.
	     */
	    RoundRobinArrayIndex.prototype.next = function (arrayLength) {
	        if (arrayLength === 0) {
	            return -1;
	        }
	        var nextOffset = this._offset;
	        this._offset += 1;
	        if (this._offset === Number.MAX_SAFE_INTEGER) {
	            this._offset = 0;
	        }
	        return nextOffset % arrayLength;
	    };
	    return RoundRobinArrayIndex;
	}());
	roundRobinArrayIndex.default = RoundRobinArrayIndex;

	var __extends$m = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$z = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(leastConnectedLoadBalancingStrategy, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var round_robin_array_index_1 = __importDefault$z(roundRobinArrayIndex);
	var load_balancing_strategy_1$1 = __importDefault$z(loadBalancingStrategy);
	var LeastConnectedLoadBalancingStrategy = /** @class */ (function (_super) {
	    __extends$m(LeastConnectedLoadBalancingStrategy, _super);
	    /**
	     * @constructor
	     * @param {Pool} connectionPool the connection pool of this driver.
	     */
	    function LeastConnectedLoadBalancingStrategy(connectionPool) {
	        var _this = _super.call(this) || this;
	        _this._readersIndex = new round_robin_array_index_1.default();
	        _this._writersIndex = new round_robin_array_index_1.default();
	        _this._connectionPool = connectionPool;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    LeastConnectedLoadBalancingStrategy.prototype.selectReader = function (knownReaders) {
	        return this._select(knownReaders, this._readersIndex);
	    };
	    /**
	     * @inheritDoc
	     */
	    LeastConnectedLoadBalancingStrategy.prototype.selectWriter = function (knownWriters) {
	        return this._select(knownWriters, this._writersIndex);
	    };
	    LeastConnectedLoadBalancingStrategy.prototype._select = function (addresses, roundRobinIndex) {
	        var length = addresses.length;
	        if (length === 0) {
	            return null;
	        }
	        // choose start index for iteration in round-robin fashion
	        var startIndex = roundRobinIndex.next(length);
	        var index = startIndex;
	        var leastConnectedAddress = null;
	        var leastActiveConnections = Number.MAX_SAFE_INTEGER;
	        // iterate over the array to find least connected address
	        do {
	            var address = addresses[index];
	            var activeConnections = this._connectionPool.activeResourceCount(address);
	            if (activeConnections < leastActiveConnections) {
	                leastConnectedAddress = address;
	                leastActiveConnections = activeConnections;
	            }
	            // loop over to the start of the array when end is reached
	            if (index === length - 1) {
	                index = 0;
	            }
	            else {
	                index++;
	            }
	        } while (index !== startIndex);
	        return leastConnectedAddress;
	    };
	    return LeastConnectedLoadBalancingStrategy;
	}(load_balancing_strategy_1$1.default));
	leastConnectedLoadBalancingStrategy.default = LeastConnectedLoadBalancingStrategy;

	var __importDefault$y = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(loadBalancing, "__esModule", { value: true });
	loadBalancing.LeastConnectedLoadBalancingStrategy = loadBalancing.LoadBalancingStrategy = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var load_balancing_strategy_1 = __importDefault$y(loadBalancingStrategy);
	loadBalancing.LoadBalancingStrategy = load_balancing_strategy_1.default;
	var least_connected_load_balancing_strategy_1 = __importDefault$y(leastConnectedLoadBalancingStrategy);
	loadBalancing.LeastConnectedLoadBalancingStrategy = least_connected_load_balancing_strategy_1.default;
	loadBalancing.default = least_connected_load_balancing_strategy_1.default;

	var bolt = {};

	var handshake$1 = {};

	var channel = {};

	var browser = {};

	var browserChannel = {};

	var channelBuf = {};

	var buffer = {};

	var base64Js = {};

	base64Js.byteLength = byteLength;
	base64Js.toByteArray = toByteArray;
	base64Js.fromByteArray = fromByteArray;

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i];
	  revLookup[code.charCodeAt(i)] = i;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62;
	revLookup['_'.charCodeAt(0)] = 63;

	function getLens (b64) {
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=');
	  if (validLen === -1) validLen = len;

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4);

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp;
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

	  var curByte = 0;

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen;

	  var i;
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)];
	    arr[curByte++] = (tmp >> 16) & 0xFF;
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    );
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    );
	  }

	  return parts.join('')
	}

	var ieee754 = {};

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

	ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	(function (exports) {

	const base64 = base64Js;
	const ieee754$1 = ieee754;
	const customInspectSymbol =
	  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
	    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
	    : null;

	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;

	const K_MAX_LENGTH = 0x7fffffff;
	exports.kMaxLength = K_MAX_LENGTH;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	 *               implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * We report that the browser does not support typed arrays if the are not subclassable
	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	 * for __proto__ and has a buggy typed array implementation.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
	    typeof console.error === 'function') {
	  console.error(
	    'This browser lacks typed array (Uint8Array) support which is required by ' +
	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
	  );
	}

	function typedArraySupport () {
	  // Can typed array instances can be augmented?
	  try {
	    const arr = new Uint8Array(1);
	    const proto = { foo: function () { return 42 } };
	    Object.setPrototypeOf(proto, Uint8Array.prototype);
	    Object.setPrototypeOf(arr, proto);
	    return arr.foo() === 42
	  } catch (e) {
	    return false
	  }
	}

	Object.defineProperty(Buffer.prototype, 'parent', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.buffer
	  }
	});

	Object.defineProperty(Buffer.prototype, 'offset', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.byteOffset
	  }
	});

	function createBuffer (length) {
	  if (length > K_MAX_LENGTH) {
	    throw new RangeError('The value "' + length + '" is invalid for option "size"')
	  }
	  // Return an augmented `Uint8Array` instance
	  const buf = new Uint8Array(length);
	  Object.setPrototypeOf(buf, Buffer.prototype);
	  return buf
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new TypeError(
	        'The "string" argument must be of type string. Received type number'
	      )
	    }
	    return allocUnsafe(arg)
	  }
	  return from(arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192; // not used by this implementation

	function from (value, encodingOrOffset, length) {
	  if (typeof value === 'string') {
	    return fromString(value, encodingOrOffset)
	  }

	  if (ArrayBuffer.isView(value)) {
	    return fromArrayView(value)
	  }

	  if (value == null) {
	    throw new TypeError(
	      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	      'or Array-like Object. Received type ' + (typeof value)
	    )
	  }

	  if (isInstance(value, ArrayBuffer) ||
	      (value && isInstance(value.buffer, ArrayBuffer))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }

	  if (typeof SharedArrayBuffer !== 'undefined' &&
	      (isInstance(value, SharedArrayBuffer) ||
	      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }

	  if (typeof value === 'number') {
	    throw new TypeError(
	      'The "value" argument must not be of type number. Received type number'
	    )
	  }

	  const valueOf = value.valueOf && value.valueOf();
	  if (valueOf != null && valueOf !== value) {
	    return Buffer.from(valueOf, encodingOrOffset, length)
	  }

	  const b = fromObject(value);
	  if (b) return b

	  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
	      typeof value[Symbol.toPrimitive] === 'function') {
	    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
	  }

	  throw new TypeError(
	    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	    'or Array-like Object. Received type ' + (typeof value)
	  )
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(value, encodingOrOffset, length)
	};

	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
	Object.setPrototypeOf(Buffer, Uint8Array);

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be of type number')
	  } else if (size < 0) {
	    throw new RangeError('The value "' + size + '" is invalid for option "size"')
	  }
	}

	function alloc (size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpreted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(size).fill(fill, encoding)
	      : createBuffer(size).fill(fill)
	  }
	  return createBuffer(size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(size, fill, encoding)
	};

	function allocUnsafe (size) {
	  assertSize(size);
	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(size)
	};

	function fromString (string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('Unknown encoding: ' + encoding)
	  }

	  const length = byteLength(string, encoding) | 0;
	  let buf = createBuffer(length);

	  const actual = buf.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    buf = buf.slice(0, actual);
	  }

	  return buf
	}

	function fromArrayLike (array) {
	  const length = array.length < 0 ? 0 : checked(array.length) | 0;
	  const buf = createBuffer(length);
	  for (let i = 0; i < length; i += 1) {
	    buf[i] = array[i] & 255;
	  }
	  return buf
	}

	function fromArrayView (arrayView) {
	  if (isInstance(arrayView, Uint8Array)) {
	    const copy = new Uint8Array(arrayView);
	    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
	  }
	  return fromArrayLike(arrayView)
	}

	function fromArrayBuffer (array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('"offset" is outside of buffer bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('"length" is outside of buffer bounds')
	  }

	  let buf;
	  if (byteOffset === undefined && length === undefined) {
	    buf = new Uint8Array(array);
	  } else if (length === undefined) {
	    buf = new Uint8Array(array, byteOffset);
	  } else {
	    buf = new Uint8Array(array, byteOffset, length);
	  }

	  // Return an augmented `Uint8Array` instance
	  Object.setPrototypeOf(buf, Buffer.prototype);

	  return buf
	}

	function fromObject (obj) {
	  if (Buffer.isBuffer(obj)) {
	    const len = checked(obj.length) | 0;
	    const buf = createBuffer(len);

	    if (buf.length === 0) {
	      return buf
	    }

	    obj.copy(buf, 0, 0, len);
	    return buf
	  }

	  if (obj.length !== undefined) {
	    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	      return createBuffer(0)
	    }
	    return fromArrayLike(obj)
	  }

	  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	    return fromArrayLike(obj.data)
	  }
	}

	function checked (length) {
	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= K_MAX_LENGTH) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return b != null && b._isBuffer === true &&
	    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
	};

	Buffer.compare = function compare (a, b) {
	  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
	  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError(
	      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
	    )
	  }

	  if (a === b) return 0

	  let x = a.length;
	  let y = b.length;

	  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer.concat = function concat (list, length) {
	  if (!Array.isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  let i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  const buffer = Buffer.allocUnsafe(length);
	  let pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    let buf = list[i];
	    if (isInstance(buf, Uint8Array)) {
	      if (pos + buf.length > buffer.length) {
	        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
	        buf.copy(buffer, pos);
	      } else {
	        Uint8Array.prototype.set.call(
	          buffer,
	          buf,
	          pos
	        );
	      }
	    } else if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    } else {
	      buf.copy(buffer, pos);
	    }
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    throw new TypeError(
	      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
	      'Received type ' + typeof string
	    )
	  }

	  const len = string.length;
	  const mustMatch = (arguments.length > 2 && arguments[2] === true);
	  if (!mustMatch && len === 0) return 0

	  // Use a for loop to avoid recursion
	  let loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) {
	          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
	        }
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  let loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true;

	function swap (b, n, m) {
	  const i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer.prototype.swap16 = function swap16 () {
	  const len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (let i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer.prototype.swap32 = function swap32 () {
	  const len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (let i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer.prototype.swap64 = function swap64 () {
	  const len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (let i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer.prototype.toString = function toString () {
	  const length = this.length;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer.prototype.toLocaleString = Buffer.prototype.toString;

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};

	Buffer.prototype.inspect = function inspect () {
	  let str = '';
	  const max = exports.INSPECT_MAX_BYTES;
	  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
	  if (this.length > max) str += ' ... ';
	  return '<Buffer ' + str + '>'
	};
	if (customInspectSymbol) {
	  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (isInstance(target, Uint8Array)) {
	    target = Buffer.from(target, target.offset, target.byteLength);
	  }
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError(
	      'The "target" argument must be one of type Buffer or Uint8Array. ' +
	      'Received type ' + (typeof target)
	    )
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  let x = thisEnd - thisStart;
	  let y = end - start;
	  const len = Math.min(x, y);

	  const thisCopy = this.slice(thisStart, thisEnd);
	  const targetCopy = target.slice(start, end);

	  for (let i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset; // Coerce to Number.
	  if (numberIsNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  let indexSize = 1;
	  let arrLength = arr.length;
	  let valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  let i;
	  if (dir) {
	    let foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      let found = true;
	      for (let j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  const remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  const strLen = string.length;

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  let i;
	  for (i = 0; i < length; ++i) {
	    const parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (numberIsNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset >>> 0;
	    if (isFinite(length)) {
	      length = length >>> 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  const remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  let loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return asciiWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  const res = [];

	  let i = start;
	  while (i < end) {
	    const firstByte = buf[i];
	    let codePoint = null;
	    let bytesPerSequence = (firstByte > 0xEF)
	      ? 4
	      : (firstByte > 0xDF)
	          ? 3
	          : (firstByte > 0xBF)
	              ? 2
	              : 1;

	    if (i + bytesPerSequence <= end) {
	      let secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	const MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  const len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  let res = '';
	  let i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  let ret = '';
	  end = Math.min(buf.length, end);

	  for (let i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  let ret = '';
	  end = Math.min(buf.length, end);

	  for (let i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  const len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  let out = '';
	  for (let i = start; i < end; ++i) {
	    out += hexSliceLookupTable[buf[i]];
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  const bytes = buf.slice(start, end);
	  let res = '';
	  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
	  for (let i = 0; i < bytes.length - 1; i += 2) {
	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  const len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  const newBuf = this.subarray(start, end);
	  // Return an augmented `Uint8Array` instance
	  Object.setPrototypeOf(newBuf, Buffer.prototype);

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUintLE =
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  let val = this[offset];
	  let mul = 1;
	  let i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUintBE =
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  let val = this[offset + --byteLength];
	  let mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer.prototype.readUint8 =
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer.prototype.readUint16LE =
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer.prototype.readUint16BE =
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer.prototype.readUint32LE =
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer.prototype.readUint32BE =
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }

	  const lo = first +
	    this[++offset] * 2 ** 8 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 24;

	  const hi = this[++offset] +
	    this[++offset] * 2 ** 8 +
	    this[++offset] * 2 ** 16 +
	    last * 2 ** 24;

	  return BigInt(lo) + (BigInt(hi) << BigInt(32))
	});

	Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }

	  const hi = first * 2 ** 24 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    this[++offset];

	  const lo = this[++offset] * 2 ** 24 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    last;

	  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
	});

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  let val = this[offset];
	  let mul = 1;
	  let i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  let i = byteLength;
	  let mul = 1;
	  let val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  const val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  const val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }

	  const val = this[offset + 4] +
	    this[offset + 5] * 2 ** 8 +
	    this[offset + 6] * 2 ** 16 +
	    (last << 24); // Overflow

	  return (BigInt(val) << BigInt(32)) +
	    BigInt(first +
	    this[++offset] * 2 ** 8 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 24)
	});

	Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }

	  const val = (first << 24) + // Overflow
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    this[++offset];

	  return (BigInt(val) << BigInt(32)) +
	    BigInt(this[++offset] * 2 ** 24 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    last)
	});

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, true, 23, 4)
	};

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, false, 23, 4)
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, true, 52, 8)
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUintLE =
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  let mul = 1;
	  let i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUintBE =
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  let i = byteLength - 1;
	  let mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeUint8 =
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeUint16LE =
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};

	Buffer.prototype.writeUint16BE =
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};

	Buffer.prototype.writeUint32LE =
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset + 3] = (value >>> 24);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 1] = (value >>> 8);
	  this[offset] = (value & 0xff);
	  return offset + 4
	};

	Buffer.prototype.writeUint32BE =
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};

	function wrtBigUInt64LE (buf, value, offset, min, max) {
	  checkIntBI(value, min, max, buf, offset, 7);

	  let lo = Number(value & BigInt(0xffffffff));
	  buf[offset++] = lo;
	  lo = lo >> 8;
	  buf[offset++] = lo;
	  lo = lo >> 8;
	  buf[offset++] = lo;
	  lo = lo >> 8;
	  buf[offset++] = lo;
	  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
	  buf[offset++] = hi;
	  hi = hi >> 8;
	  buf[offset++] = hi;
	  hi = hi >> 8;
	  buf[offset++] = hi;
	  hi = hi >> 8;
	  buf[offset++] = hi;
	  return offset
	}

	function wrtBigUInt64BE (buf, value, offset, min, max) {
	  checkIntBI(value, min, max, buf, offset, 7);

	  let lo = Number(value & BigInt(0xffffffff));
	  buf[offset + 7] = lo;
	  lo = lo >> 8;
	  buf[offset + 6] = lo;
	  lo = lo >> 8;
	  buf[offset + 5] = lo;
	  lo = lo >> 8;
	  buf[offset + 4] = lo;
	  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
	  buf[offset + 3] = hi;
	  hi = hi >> 8;
	  buf[offset + 2] = hi;
	  hi = hi >> 8;
	  buf[offset + 1] = hi;
	  hi = hi >> 8;
	  buf[offset] = hi;
	  return offset + 8
	}

	Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
	  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
	});

	Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
	  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
	});

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    const limit = Math.pow(2, (8 * byteLength) - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  let i = 0;
	  let mul = 1;
	  let sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    const limit = Math.pow(2, (8 * byteLength) - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  let i = byteLength - 1;
	  let mul = 1;
	  let sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 3] = (value >>> 24);
	  return offset + 4
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};

	Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
	  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
	});

	Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
	  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
	});

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  const len = end - start;

	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
	    // Use built-in when available, missing from IE11
	    this.copyWithin(targetStart, start, end);
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, end),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	    if (val.length === 1) {
	      const code = val.charCodeAt(0);
	      if ((encoding === 'utf8' && code < 128) ||
	          encoding === 'latin1') {
	        // Fast path: If `val` fits into a single byte, use that numeric value.
	        val = code;
	      }
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  } else if (typeof val === 'boolean') {
	    val = Number(val);
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  let i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    const bytes = Buffer.isBuffer(val)
	      ? val
	      : Buffer.from(val, encoding);
	    const len = bytes.length;
	    if (len === 0) {
	      throw new TypeError('The value "' + val +
	        '" is invalid for argument "value"')
	    }
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// CUSTOM ERRORS
	// =============

	// Simplified versions from Node, changed for Buffer-only usage
	const errors = {};
	function E (sym, getMessage, Base) {
	  errors[sym] = class NodeError extends Base {
	    constructor () {
	      super();

	      Object.defineProperty(this, 'message', {
	        value: getMessage.apply(this, arguments),
	        writable: true,
	        configurable: true
	      });

	      // Add the error code to the name to include it in the stack trace.
	      this.name = `${this.name} [${sym}]`;
	      // Access the stack to generate the error message including the error code
	      // from the name.
	      this.stack; // eslint-disable-line no-unused-expressions
	      // Reset the name to the actual name.
	      delete this.name;
	    }

	    get code () {
	      return sym
	    }

	    set code (value) {
	      Object.defineProperty(this, 'code', {
	        configurable: true,
	        enumerable: true,
	        value,
	        writable: true
	      });
	    }

	    toString () {
	      return `${this.name} [${sym}]: ${this.message}`
	    }
	  };
	}

	E('ERR_BUFFER_OUT_OF_BOUNDS',
	  function (name) {
	    if (name) {
	      return `${name} is outside of buffer bounds`
	    }

	    return 'Attempt to access memory outside buffer bounds'
	  }, RangeError);
	E('ERR_INVALID_ARG_TYPE',
	  function (name, actual) {
	    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
	  }, TypeError);
	E('ERR_OUT_OF_RANGE',
	  function (str, range, input) {
	    let msg = `The value of "${str}" is out of range.`;
	    let received = input;
	    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
	      received = addNumericalSeparator(String(input));
	    } else if (typeof input === 'bigint') {
	      received = String(input);
	      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
	        received = addNumericalSeparator(received);
	      }
	      received += 'n';
	    }
	    msg += ` It must be ${range}. Received ${received}`;
	    return msg
	  }, RangeError);

	function addNumericalSeparator (val) {
	  let res = '';
	  let i = val.length;
	  const start = val[0] === '-' ? 1 : 0;
	  for (; i >= start + 4; i -= 3) {
	    res = `_${val.slice(i - 3, i)}${res}`;
	  }
	  return `${val.slice(0, i)}${res}`
	}

	// CHECK FUNCTIONS
	// ===============

	function checkBounds (buf, offset, byteLength) {
	  validateNumber(offset, 'offset');
	  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
	    boundsError(offset, buf.length - (byteLength + 1));
	  }
	}

	function checkIntBI (value, min, max, buf, offset, byteLength) {
	  if (value > max || value < min) {
	    const n = typeof min === 'bigint' ? 'n' : '';
	    let range;
	    if (byteLength > 3) {
	      if (min === 0 || min === BigInt(0)) {
	        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
	      } else {
	        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
	                `${(byteLength + 1) * 8 - 1}${n}`;
	      }
	    } else {
	      range = `>= ${min}${n} and <= ${max}${n}`;
	    }
	    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
	  }
	  checkBounds(buf, offset, byteLength);
	}

	function validateNumber (value, name) {
	  if (typeof value !== 'number') {
	    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
	  }
	}

	function boundsError (value, length, type) {
	  if (Math.floor(value) !== value) {
	    validateNumber(value, type);
	    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
	  }

	  if (length < 0) {
	    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
	  }

	  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
	                                    `>= ${type ? 1 : 0} and <= ${length}`,
	                                    value)
	}

	// HELPER FUNCTIONS
	// ================

	const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node takes equal signs as end of the Base64 encoding
	  str = str.split('=')[0];
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = str.trim().replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  let codePoint;
	  const length = string.length;
	  let leadSurrogate = null;
	  const bytes = [];

	  for (let i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  const byteArray = [];
	  for (let i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  let c, hi, lo;
	  const byteArray = [];
	  for (let i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  let i;
	  for (i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
	// the `instanceof` check but they should be treated as of that type.
	// See: https://github.com/feross/buffer/issues/166
	function isInstance (obj, type) {
	  return obj instanceof type ||
	    (obj != null && obj.constructor != null && obj.constructor.name != null &&
	      obj.constructor.name === type.name)
	}
	function numberIsNaN (obj) {
	  // For IE11 support
	  return obj !== obj // eslint-disable-line no-self-compare
	}

	// Create lookup table for `toString('hex')`
	// See: https://github.com/feross/buffer/issues/219
	const hexSliceLookupTable = (function () {
	  const alphabet = '0123456789abcdef';
	  const table = new Array(256);
	  for (let i = 0; i < 16; ++i) {
	    const i16 = i * 16;
	    for (let j = 0; j < 16; ++j) {
	      table[i16 + j] = alphabet[i] + alphabet[j];
	    }
	  }
	  return table
	})();

	// Return not function with Error if BigInt not supported
	function defineBigIntMethod (fn) {
	  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
	}

	function BufferBigIntNotDefined () {
	  throw new Error('BigInt not supported')
	}
	}(buffer));

	var buf = {};

	var baseBuf = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$l = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(baseBuf, "__esModule", { value: true });
	/**
	 * Common base with default implementation for most buffer methods.
	 * Buffers are stateful - they track a current "position", this helps greatly
	 * when reading and writing from them incrementally. You can also ignore the
	 * stateful read/write methods.
	 * readXXX and writeXXX-methods move the inner position of the buffer.
	 * putXXX and getXXX-methods do not.
	 * @access private
	 */
	var BaseBuffer = /** @class */ (function () {
	    /**
	     * Create a instance with the injected size.
	     * @constructor
	     * @param {Integer} size
	     */
	    function BaseBuffer(size) {
	        this.position = 0;
	        this.length = size;
	    }
	    BaseBuffer.prototype.getUInt8 = function (position) {
	        throw new Error('Not implemented');
	    };
	    BaseBuffer.prototype.getInt8 = function (position) {
	        throw new Error('Not implemented');
	    };
	    BaseBuffer.prototype.getFloat64 = function (position) {
	        throw new Error('Not implemented');
	    };
	    BaseBuffer.prototype.putUInt8 = function (position, val) {
	        throw new Error('Not implemented');
	    };
	    BaseBuffer.prototype.putInt8 = function (position, val) {
	        throw new Error('Not implemented');
	    };
	    BaseBuffer.prototype.putFloat64 = function (position, val) {
	        throw new Error('Not implemented');
	    };
	    /**
	     * @param p
	     */
	    BaseBuffer.prototype.getInt16 = function (p) {
	        return (this.getInt8(p) << 8) | this.getUInt8(p + 1);
	    };
	    /**
	     * @param p
	     */
	    BaseBuffer.prototype.getUInt16 = function (p) {
	        return (this.getUInt8(p) << 8) | this.getUInt8(p + 1);
	    };
	    /**
	     * @param p
	     */
	    BaseBuffer.prototype.getInt32 = function (p) {
	        return ((this.getInt8(p) << 24) |
	            (this.getUInt8(p + 1) << 16) |
	            (this.getUInt8(p + 2) << 8) |
	            this.getUInt8(p + 3));
	    };
	    /**
	     * @param p
	     */
	    BaseBuffer.prototype.getUInt32 = function (p) {
	        return ((this.getUInt8(p) << 24) |
	            (this.getUInt8(p + 1) << 16) |
	            (this.getUInt8(p + 2) << 8) |
	            this.getUInt8(p + 3));
	    };
	    /**
	     * @param p
	     */
	    BaseBuffer.prototype.getInt64 = function (p) {
	        return ((this.getInt8(p) << 56) |
	            (this.getUInt8(p + 1) << 48) |
	            (this.getUInt8(p + 2) << 40) |
	            (this.getUInt8(p + 3) << 32) |
	            (this.getUInt8(p + 4) << 24) |
	            (this.getUInt8(p + 5) << 16) |
	            (this.getUInt8(p + 6) << 8) |
	            this.getUInt8(p + 7));
	    };
	    /**
	     * Get a slice of this buffer. This method does not copy any data,
	     * but simply provides a slice view of this buffer
	     * @param start
	     * @param length
	     */
	    BaseBuffer.prototype.getSlice = function (start, length) {
	        return new SliceBuffer(start, length, this);
	    };
	    /**
	     * @param p
	     * @param val
	     */
	    BaseBuffer.prototype.putInt16 = function (p, val) {
	        this.putInt8(p, val >> 8);
	        this.putUInt8(p + 1, val & 0xff);
	    };
	    /**
	     * @param p
	     * @param val
	     */
	    BaseBuffer.prototype.putUInt16 = function (p, val) {
	        this.putUInt8(p, (val >> 8) & 0xff);
	        this.putUInt8(p + 1, val & 0xff);
	    };
	    /**
	     * @param p
	     * @param val
	     */
	    BaseBuffer.prototype.putInt32 = function (p, val) {
	        this.putInt8(p, val >> 24);
	        this.putUInt8(p + 1, (val >> 16) & 0xff);
	        this.putUInt8(p + 2, (val >> 8) & 0xff);
	        this.putUInt8(p + 3, val & 0xff);
	    };
	    /**
	     * @param p
	     * @param val
	     */
	    BaseBuffer.prototype.putUInt32 = function (p, val) {
	        this.putUInt8(p, (val >> 24) & 0xff);
	        this.putUInt8(p + 1, (val >> 16) & 0xff);
	        this.putUInt8(p + 2, (val >> 8) & 0xff);
	        this.putUInt8(p + 3, val & 0xff);
	    };
	    /**
	     * @param p
	     * @param val
	     */
	    BaseBuffer.prototype.putInt64 = function (p, val) {
	        this.putInt8(p, val >> 48);
	        this.putUInt8(p + 1, (val >> 42) & 0xff);
	        this.putUInt8(p + 2, (val >> 36) & 0xff);
	        this.putUInt8(p + 3, (val >> 30) & 0xff);
	        this.putUInt8(p + 4, (val >> 24) & 0xff);
	        this.putUInt8(p + 5, (val >> 16) & 0xff);
	        this.putUInt8(p + 6, (val >> 8) & 0xff);
	        this.putUInt8(p + 7, val & 0xff);
	    };
	    /**
	     * @param position
	     * @param other
	     */
	    BaseBuffer.prototype.putBytes = function (position, other) {
	        for (var i = 0, end = other.remaining(); i < end; i++) {
	            this.putUInt8(position + i, other.readUInt8());
	        }
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readUInt8 = function () {
	        return this.getUInt8(this._updatePos(1));
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readInt8 = function () {
	        return this.getInt8(this._updatePos(1));
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readUInt16 = function () {
	        return this.getUInt16(this._updatePos(2));
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readUInt32 = function () {
	        return this.getUInt32(this._updatePos(4));
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readInt16 = function () {
	        return this.getInt16(this._updatePos(2));
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readInt32 = function () {
	        return this.getInt32(this._updatePos(4));
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readInt64 = function () {
	        return this.getInt32(this._updatePos(8));
	    };
	    /**
	     * Read from state position.
	     */
	    BaseBuffer.prototype.readFloat64 = function () {
	        return this.getFloat64(this._updatePos(8));
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeUInt8 = function (val) {
	        this.putUInt8(this._updatePos(1), val);
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeInt8 = function (val) {
	        this.putInt8(this._updatePos(1), val);
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeInt16 = function (val) {
	        this.putInt16(this._updatePos(2), val);
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeInt32 = function (val) {
	        this.putInt32(this._updatePos(4), val);
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeUInt32 = function (val) {
	        this.putUInt32(this._updatePos(4), val);
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeInt64 = function (val) {
	        this.putInt64(this._updatePos(8), val);
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeFloat64 = function (val) {
	        this.putFloat64(this._updatePos(8), val);
	    };
	    /**
	     * Write to state position.
	     * @param val
	     */
	    BaseBuffer.prototype.writeBytes = function (val) {
	        this.putBytes(this._updatePos(val.remaining()), val);
	    };
	    /**
	     * Get a slice of this buffer. This method does not copy any data,
	     * but simply provides a slice view of this buffer
	     * @param length
	     */
	    BaseBuffer.prototype.readSlice = function (length) {
	        return this.getSlice(this._updatePos(length), length);
	    };
	    BaseBuffer.prototype._updatePos = function (length) {
	        var p = this.position;
	        this.position += length;
	        return p;
	    };
	    /**
	     * Get remaining
	     */
	    BaseBuffer.prototype.remaining = function () {
	        return this.length - this.position;
	    };
	    /**
	     * Has remaining
	     */
	    BaseBuffer.prototype.hasRemaining = function () {
	        return this.remaining() > 0;
	    };
	    /**
	     * Reset position state
	     */
	    BaseBuffer.prototype.reset = function () {
	        this.position = 0;
	    };
	    /**
	     * Get string representation of buffer and it's state.
	     * @return {string} Buffer as a string
	     */
	    BaseBuffer.prototype.toString = function () {
	        return (this.constructor.name +
	            '( position=' +
	            this.position +
	            ' )\n  ' +
	            this.toHex());
	    };
	    /**
	     * Get string representation of buffer.
	     * @return {string} Buffer as a string
	     */
	    BaseBuffer.prototype.toHex = function () {
	        var out = '';
	        for (var i = 0; i < this.length; i++) {
	            var hexByte = this.getUInt8(i).toString(16);
	            if (hexByte.length === 1) {
	                hexByte = '0' + hexByte;
	            }
	            out += hexByte;
	            if (i !== this.length - 1) {
	                out += ' ';
	            }
	        }
	        return out;
	    };
	    return BaseBuffer;
	}());
	baseBuf.default = BaseBuffer;
	/**
	 * Represents a view as slice of another buffer.
	 * @access private
	 */
	var SliceBuffer = /** @class */ (function (_super) {
	    __extends$l(SliceBuffer, _super);
	    function SliceBuffer(start, length, inner) {
	        var _this = _super.call(this, length) || this;
	        _this._start = start;
	        _this._inner = inner;
	        return _this;
	    }
	    SliceBuffer.prototype.putUInt8 = function (position, val) {
	        this._inner.putUInt8(this._start + position, val);
	    };
	    SliceBuffer.prototype.getUInt8 = function (position) {
	        return this._inner.getUInt8(this._start + position);
	    };
	    SliceBuffer.prototype.putInt8 = function (position, val) {
	        this._inner.putInt8(this._start + position, val);
	    };
	    SliceBuffer.prototype.putFloat64 = function (position, val) {
	        this._inner.putFloat64(this._start + position, val);
	    };
	    SliceBuffer.prototype.getInt8 = function (position) {
	        return this._inner.getInt8(this._start + position);
	    };
	    SliceBuffer.prototype.getFloat64 = function (position) {
	        return this._inner.getFloat64(this._start + position);
	    };
	    return SliceBuffer;
	}(BaseBuffer));

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __importDefault$x = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(buf, "__esModule", { value: true });
	buf.BaseBuffer = void 0;
	var base_buf_1$1 = __importDefault$x(baseBuf);
	buf.BaseBuffer = base_buf_1$1.default;
	buf.default = base_buf_1$1.default;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$k = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$w = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(channelBuf, "__esModule", { value: true });
	channelBuf.alloc = void 0;
	var buffer_1$1 = __importDefault$w(buffer);
	var buf_1$1 = __importDefault$w(buf);
	var ChannelBuffer = /** @class */ (function (_super) {
	    __extends$k(ChannelBuffer, _super);
	    function ChannelBuffer(arg) {
	        var _this = this;
	        var buffer = newChannelJSBuffer(arg);
	        _this = _super.call(this, buffer.length) || this;
	        _this._buffer = buffer;
	        return _this;
	    }
	    ChannelBuffer.prototype.getUInt8 = function (position) {
	        return this._buffer.readUInt8(position);
	    };
	    ChannelBuffer.prototype.getInt8 = function (position) {
	        return this._buffer.readInt8(position);
	    };
	    ChannelBuffer.prototype.getFloat64 = function (position) {
	        return this._buffer.readDoubleBE(position);
	    };
	    ChannelBuffer.prototype.putUInt8 = function (position, val) {
	        this._buffer.writeUInt8(val, position);
	    };
	    ChannelBuffer.prototype.putInt8 = function (position, val) {
	        this._buffer.writeInt8(val, position);
	    };
	    ChannelBuffer.prototype.putFloat64 = function (position, val) {
	        this._buffer.writeDoubleBE(val, position);
	    };
	    ChannelBuffer.prototype.putBytes = function (position, val) {
	        if (val instanceof ChannelBuffer) {
	            var bytesToCopy = Math.min(val.length - val.position, this.length - position);
	            val._buffer.copy(this._buffer, position, val.position, val.position + bytesToCopy);
	            val.position += bytesToCopy;
	        }
	        else {
	            _super.prototype.putBytes.call(this, position, val);
	        }
	    };
	    ChannelBuffer.prototype.getSlice = function (start, length) {
	        return new ChannelBuffer(this._buffer.slice(start, start + length));
	    };
	    return ChannelBuffer;
	}(buf_1$1.default));
	channelBuf.default = ChannelBuffer;
	/**
	 * Allocate a buffer
	 *
	 * @param {number} size The buffer sizzer
	 * @returns {BaseBuffer} The buffer
	 */
	function alloc(size) {
	    return new ChannelBuffer(size);
	}
	channelBuf.alloc = alloc;
	function newChannelJSBuffer(arg) {
	    if (arg instanceof buffer_1$1.default.Buffer) {
	        return arg;
	    }
	    else if (typeof arg === 'number' &&
	        typeof buffer_1$1.default.Buffer.alloc === 'function') {
	        // use static factory function present in newer NodeJS versions to allocate new buffer with specified size
	        return buffer_1$1.default.Buffer.alloc(arg);
	    }
	    else {
	        // fallback to the old, potentially deprecated constructor
	        // eslint-disable-next-line node/no-deprecated-api
	        return new buffer_1$1.default.Buffer(arg);
	    }
	}

	var __importDefault$v = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(browserChannel, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/* eslint-env browser */
	var channel_buf_1$3 = __importDefault$v(channelBuf);
	var neo4j_driver_core_1$y = lib$1;
	var _a$a = neo4j_driver_core_1$y.internal.util, ENCRYPTION_OFF$1 = _a$a.ENCRYPTION_OFF, ENCRYPTION_ON$1 = _a$a.ENCRYPTION_ON;
	var WS_OPEN = 1;
	var WS_CLOSED = 3;
	/**
	 * Create a new WebSocketChannel to be used in web browsers.
	 * @access private
	 */
	var WebSocketChannel = /** @class */ (function () {
	    /**
	     * Create new instance
	     * @param {ChannelConfig} config - configuration for this channel.
	     * @param {function(): string} protocolSupplier - function that detects protocol of the web page. Should only be used in tests.
	     */
	    function WebSocketChannel(config, protocolSupplier, socketFactory) {
	        if (protocolSupplier === void 0) { protocolSupplier = detectWebPageProtocol; }
	        if (socketFactory === void 0) { socketFactory = function (url) { return new WebSocket(url); }; }
	        var _this = this;
	        this._open = true;
	        this._pending = [];
	        this._error = null;
	        this._handleConnectionError = this._handleConnectionError.bind(this);
	        this._config = config;
	        this._receiveTimeout = null;
	        this._receiveTimeoutStarted = false;
	        this._receiveTimeoutId = null;
	        var _a = determineWebSocketScheme(config, protocolSupplier), scheme = _a.scheme, error = _a.error;
	        if (error) {
	            this._error = error;
	            return;
	        }
	        this._ws = createWebSocket(scheme, config.address, socketFactory);
	        this._ws.binaryType = 'arraybuffer';
	        var self = this;
	        // All connection errors are not sent to the error handler
	        // we must also check for dirty close calls
	        this._ws.onclose = function (e) {
	            if (e && !e.wasClean) {
	                self._handleConnectionError();
	            }
	            self._open = false;
	        };
	        this._ws.onopen = function () {
	            // Connected! Cancel the connection timeout
	            self._clearConnectionTimeout();
	            // Drain all pending messages
	            var pending = self._pending;
	            self._pending = null;
	            for (var i = 0; i < pending.length; i++) {
	                self.write(pending[i]);
	            }
	        };
	        this._ws.onmessage = function (event) {
	            _this._resetTimeout();
	            if (self.onmessage) {
	                var b = new channel_buf_1$3.default(event.data);
	                self.onmessage(b);
	            }
	        };
	        this._ws.onerror = this._handleConnectionError;
	        this._connectionTimeoutFired = false;
	        this._connectionTimeoutId = this._setupConnectionTimeout();
	    }
	    WebSocketChannel.prototype._handleConnectionError = function () {
	        if (this._connectionTimeoutFired) {
	            // timeout fired - not connected within configured time
	            this._error = (0, neo4j_driver_core_1$y.newError)("Failed to establish connection in ".concat(this._config.connectionTimeout, "ms"), this._config.connectionErrorCode);
	            if (this.onerror) {
	                this.onerror(this._error);
	            }
	            return;
	        }
	        // onerror triggers on websocket close as well.. don't get me started.
	        if (this._open && !this._timedout) {
	            // http://stackoverflow.com/questions/25779831/how-to-catch-websocket-connection-to-ws-xxxnn-failed-connection-closed-be
	            this._error = (0, neo4j_driver_core_1$y.newError)('WebSocket connection failure. Due to security ' +
	                'constraints in your web browser, the reason for the failure is not available ' +
	                'to this Neo4j Driver. Please use your browsers development console to determine ' +
	                'the root cause of the failure. Common reasons include the database being ' +
	                'unavailable, using the wrong connection URL or temporary network problems. ' +
	                'If you have enabled encryption, ensure your browser is configured to trust the ' +
	                'certificate Neo4j is configured to use. WebSocket `readyState` is: ' +
	                this._ws.readyState, this._config.connectionErrorCode);
	            if (this.onerror) {
	                this.onerror(this._error);
	            }
	        }
	    };
	    /**
	     * Write the passed in buffer to connection
	     * @param {ChannelBuffer} buffer - Buffer to write
	     */
	    WebSocketChannel.prototype.write = function (buffer) {
	        // If there is a pending queue, push this on that queue. This means
	        // we are not yet connected, so we queue things locally.
	        if (this._pending !== null) {
	            this._pending.push(buffer);
	        }
	        else if (buffer instanceof channel_buf_1$3.default) {
	            try {
	                this._ws.send(buffer._buffer);
	            }
	            catch (error) {
	                if (this._ws.readyState !== WS_OPEN) {
	                    // Websocket has been closed
	                    this._handleConnectionError();
	                }
	                else {
	                    // Some other error occured
	                    throw error;
	                }
	            }
	        }
	        else {
	            throw (0, neo4j_driver_core_1$y.newError)("Don't know how to send buffer: " + buffer);
	        }
	    };
	    /**
	     * Close the connection
	     * @returns {Promise} A promise that will be resolved after channel is closed
	     */
	    WebSocketChannel.prototype.close = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            if (_this._ws && _this._ws.readyState !== WS_CLOSED) {
	                _this._open = false;
	                _this.stopReceiveTimeout();
	                _this._clearConnectionTimeout();
	                _this._ws.onclose = function () { return resolve(); };
	                _this._ws.close();
	            }
	            else {
	                resolve();
	            }
	        });
	    };
	    /**
	     * Setup the receive timeout for the channel.
	     *
	     * Not supported for the browser channel.
	     *
	     * @param {number} receiveTimeout The amount of time the channel will keep without receive any data before timeout (ms)
	     * @returns {void}
	     */
	    WebSocketChannel.prototype.setupReceiveTimeout = function (receiveTimeout) {
	        this._receiveTimeout = receiveTimeout;
	    };
	    /**
	     * Stops the receive timeout for the channel.
	     */
	    WebSocketChannel.prototype.stopReceiveTimeout = function () {
	        if (this._receiveTimeout !== null && this._receiveTimeoutStarted) {
	            this._receiveTimeoutStarted = false;
	            if (this._receiveTimeoutId != null) {
	                clearTimeout(this._receiveTimeoutId);
	            }
	            this._receiveTimeoutId = null;
	        }
	    };
	    /**
	     * Start the receive timeout for the channel.
	     */
	    WebSocketChannel.prototype.startReceiveTimeout = function () {
	        if (this._open && this._receiveTimeout !== null && !this._receiveTimeoutStarted) {
	            this._receiveTimeoutStarted = true;
	            this._resetTimeout();
	        }
	    };
	    WebSocketChannel.prototype._resetTimeout = function () {
	        var _this = this;
	        if (!this._receiveTimeoutStarted) {
	            return;
	        }
	        if (this._receiveTimeoutId !== null) {
	            clearTimeout(this._receiveTimeoutId);
	        }
	        this._receiveTimeoutId = setTimeout(function () {
	            _this._receiveTimeoutId = null;
	            _this._timedout = true;
	            _this.stopReceiveTimeout();
	            _this._error = (0, neo4j_driver_core_1$y.newError)("Connection lost. Server didn't respond in ".concat(_this._receiveTimeout, "ms"), _this._config.connectionErrorCode);
	            _this.close();
	            if (_this.onerror) {
	                _this.onerror(_this._error);
	            }
	        }, this._receiveTimeout);
	    };
	    /**
	     * Set connection timeout on the given WebSocket, if configured.
	     * @return {number} the timeout id or null.
	     * @private
	     */
	    WebSocketChannel.prototype._setupConnectionTimeout = function () {
	        var _this = this;
	        var timeout = this._config.connectionTimeout;
	        if (timeout) {
	            var webSocket_1 = this._ws;
	            return setTimeout(function () {
	                if (webSocket_1.readyState !== WS_OPEN) {
	                    _this._connectionTimeoutFired = true;
	                    webSocket_1.close();
	                }
	            }, timeout);
	        }
	        return null;
	    };
	    /**
	     * Remove active connection timeout, if any.
	     * @private
	     */
	    WebSocketChannel.prototype._clearConnectionTimeout = function () {
	        var timeoutId = this._connectionTimeoutId;
	        if (timeoutId || timeoutId === 0) {
	            this._connectionTimeoutFired = false;
	            this._connectionTimeoutId = null;
	            clearTimeout(timeoutId);
	        }
	    };
	    return WebSocketChannel;
	}());
	browserChannel.default = WebSocketChannel;
	function createWebSocket(scheme, address, socketFactory) {
	    var url = scheme + '://' + address.asHostPort();
	    try {
	        return socketFactory(url);
	    }
	    catch (error) {
	        if (isIPv6AddressIssueOnWindows(error, address)) {
	            // WebSocket in IE and Edge browsers on Windows do not support regular IPv6 address syntax because they contain ':'.
	            // It's an invalid character for UNC (https://en.wikipedia.org/wiki/IPv6_address#Literal_IPv6_addresses_in_UNC_path_names)
	            // and Windows requires IPv6 to be changes in the following way:
	            //   1) replace all ':' with '-'
	            //   2) replace '%' with 's' for link-local address
	            //   3) append '.ipv6-literal.net' suffix
	            // only then resulting string can be considered a valid IPv6 address. Yes, this is extremely weird!
	            // For more details see:
	            //   https://social.msdn.microsoft.com/Forums/ie/en-US/06cca73b-63c2-4bf9-899b-b229c50449ff/whether-ie10-websocket-support-ipv6?forum=iewebdevelopment
	            //   https://www.itdojo.com/ipv6-addresses-and-unc-path-names-overcoming-illegal/
	            // Creation of WebSocket with unconverted address results in SyntaxError without message or stacktrace.
	            // That is why here we "catch" SyntaxError and rewrite IPv6 address if needed.
	            var windowsFriendlyUrl = asWindowsFriendlyIPv6Address(scheme, address);
	            return socketFactory(windowsFriendlyUrl);
	        }
	        else {
	            throw error;
	        }
	    }
	}
	function isIPv6AddressIssueOnWindows(error, address) {
	    return error.name === 'SyntaxError' && isIPv6Address(address.asHostPort());
	}
	function isIPv6Address(hostAndPort) {
	    return hostAndPort.charAt(0) === '[' && hostAndPort.indexOf(']') !== -1;
	}
	function asWindowsFriendlyIPv6Address(scheme, address) {
	    // replace all ':' with '-'
	    var hostWithoutColons = address.host().replace(/:/g, '-');
	    // replace '%' with 's' for link-local IPv6 address like 'fe80::1%lo0'
	    var hostWithoutPercent = hostWithoutColons.replace('%', 's');
	    // append magic '.ipv6-literal.net' suffix
	    var ipv6Host = hostWithoutPercent + '.ipv6-literal.net';
	    return "".concat(scheme, "://").concat(ipv6Host, ":").concat(address.port());
	}
	/**
	 * @param {ChannelConfig} config - configuration for the channel.
	 * @param {function(): string} protocolSupplier - function that detects protocol of the web page.
	 * @return {{scheme: string|null, error: Neo4jError|null}} object containing either scheme or error.
	 */
	function determineWebSocketScheme(config, protocolSupplier) {
	    var encryptionOn = isEncryptionExplicitlyTurnedOn(config);
	    var encryptionOff = isEncryptionExplicitlyTurnedOff(config);
	    var trust = config.trust;
	    var secureProtocol = isProtocolSecure(protocolSupplier);
	    verifyEncryptionSettings(encryptionOn, encryptionOff, secureProtocol);
	    if (encryptionOff) {
	        // encryption explicitly turned off in the config
	        return { scheme: 'ws', error: null };
	    }
	    if (secureProtocol) {
	        // driver is used in a secure https web page, use 'wss'
	        return { scheme: 'wss', error: null };
	    }
	    if (encryptionOn) {
	        // encryption explicitly requested in the config
	        if (!trust || trust === 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES') {
	            // trust strategy not specified or the only supported strategy is specified
	            return { scheme: 'wss', error: null };
	        }
	        else {
	            var error = (0, neo4j_driver_core_1$y.newError)('The browser version of this driver only supports one trust ' +
	                "strategy, 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'. " +
	                trust +
	                ' is not supported. Please ' +
	                'either use TRUST_SYSTEM_CA_SIGNED_CERTIFICATES or disable encryption by setting ' +
	                '`encrypted:"' +
	                ENCRYPTION_OFF$1 +
	                '"` in the driver configuration.');
	            return { scheme: null, error: error };
	        }
	    }
	    // default to unencrypted web socket
	    return { scheme: 'ws', error: null };
	}
	/**
	 * @param {ChannelConfig} config - configuration for the channel.
	 * @return {boolean} `true` if encryption enabled in the config, `false` otherwise.
	 */
	function isEncryptionExplicitlyTurnedOn(config) {
	    return config.encrypted === true || config.encrypted === ENCRYPTION_ON$1;
	}
	/**
	 * @param {ChannelConfig} config - configuration for the channel.
	 * @return {boolean} `true` if encryption disabled in the config, `false` otherwise.
	 */
	function isEncryptionExplicitlyTurnedOff(config) {
	    return config.encrypted === false || config.encrypted === ENCRYPTION_OFF$1;
	}
	/**
	 * @param {function(): string} protocolSupplier - function that detects protocol of the web page.
	 * @return {boolean} `true` if protocol returned by the given function is secure, `false` otherwise.
	 */
	function isProtocolSecure(protocolSupplier) {
	    var protocol = typeof protocolSupplier === 'function' ? protocolSupplier() : '';
	    return protocol && protocol.toLowerCase().indexOf('https') >= 0;
	}
	function verifyEncryptionSettings(encryptionOn, encryptionOff, secureProtocol) {
	    if (secureProtocol === null) ;
	    else if (encryptionOn && !secureProtocol) {
	        // encryption explicitly turned on for a driver used on a HTTP web page
	        console.warn('Neo4j driver is configured to use secure WebSocket on a HTTP web page. ' +
	            'WebSockets might not work in a mixed content environment. ' +
	            'Please consider configuring driver to not use encryption.');
	    }
	    else if (encryptionOff && secureProtocol) {
	        // encryption explicitly turned off for a driver used on a HTTPS web page
	        console.warn('Neo4j driver is configured to use insecure WebSocket on a HTTPS web page. ' +
	            'WebSockets might not work in a mixed content environment. ' +
	            'Please consider configuring driver to use encryption.');
	    }
	}
	function detectWebPageProtocol() {
	    return typeof window !== 'undefined' && window.location
	        ? window.location.protocol
	        : null;
	}

	var browserHostNameResolver = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$j = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(browserHostNameResolver, "__esModule", { value: true });
	var neo4j_driver_core_1$x = lib$1;
	var BaseHostNameResolver = neo4j_driver_core_1$x.internal.resolver.BaseHostNameResolver;
	var BrowserHostNameResolver = /** @class */ (function (_super) {
	    __extends$j(BrowserHostNameResolver, _super);
	    function BrowserHostNameResolver() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BrowserHostNameResolver.prototype.resolve = function (address) {
	        return this._resolveToItself(address);
	    };
	    return BrowserHostNameResolver;
	}(BaseHostNameResolver));
	browserHostNameResolver.default = BrowserHostNameResolver;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __importDefault$u = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(browser, "__esModule", { value: true });
	browser.HostNameResolver = browser.Channel = void 0;
	var browser_channel_1 = __importDefault$u(browserChannel);
	var browser_host_name_resolver_1 = __importDefault$u(browserHostNameResolver);
	/*

	This module exports a set of components to be used in browser environment.
	They are not compatible with NodeJS environment.
	All files import/require APIs from `node/index.js` by default.
	Such imports are replaced at build time with `browser/index.js` when building a browser bundle.

	NOTE: exports in this module should have exactly the same names/structure as exports in `node/index.js`.

	 */
	browser.Channel = browser_channel_1.default;
	browser.HostNameResolver = browser_host_name_resolver_1.default;

	var chunking = {};

	var combinedBuf = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$i = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(combinedBuf, "__esModule", { value: true });
	var buf_1 = buf;
	var channel_buf_1$2 = channelBuf;
	/**
	 * Buffer that combines multiple buffers, exposing them as one single buffer.
	 */
	var CombinedBuffer = /** @class */ (function (_super) {
	    __extends$i(CombinedBuffer, _super);
	    function CombinedBuffer(buffers) {
	        var _this = this;
	        var length = 0;
	        for (var i = 0; i < buffers.length; i++) {
	            length += buffers[i].length;
	        }
	        _this = _super.call(this, length) || this;
	        _this._buffers = buffers;
	        return _this;
	    }
	    CombinedBuffer.prototype.getUInt8 = function (position) {
	        // Surely there's a faster way to do this.. some sort of lookup table thing?
	        for (var i = 0; i < this._buffers.length; i++) {
	            var buffer = this._buffers[i];
	            // If the position is not in the current buffer, skip the current buffer
	            if (position >= buffer.length) {
	                position -= buffer.length;
	            }
	            else {
	                return buffer.getUInt8(position);
	            }
	        }
	    };
	    CombinedBuffer.prototype.getInt8 = function (position) {
	        // Surely there's a faster way to do this.. some sort of lookup table thing?
	        for (var i = 0; i < this._buffers.length; i++) {
	            var buffer = this._buffers[i];
	            // If the position is not in the current buffer, skip the current buffer
	            if (position >= buffer.length) {
	                position -= buffer.length;
	            }
	            else {
	                return buffer.getInt8(position);
	            }
	        }
	    };
	    CombinedBuffer.prototype.getFloat64 = function (position) {
	        // At some point, a more efficient impl. For now, we copy the 8 bytes
	        // we want to read and depend on the platform impl of IEEE 754.
	        var b = (0, channel_buf_1$2.alloc)(8);
	        for (var i = 0; i < 8; i++) {
	            b.putUInt8(i, this.getUInt8(position + i));
	        }
	        return b.getFloat64(0);
	    };
	    return CombinedBuffer;
	}(buf_1.BaseBuffer));
	combinedBuf.default = CombinedBuffer;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$h = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$t = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(chunking, "__esModule", { value: true });
	chunking.Dechunker = chunking.Chunker = void 0;
	var base_buf_1 = __importDefault$t(baseBuf);
	var channel_buf_1$1 = channelBuf;
	var combined_buf_1 = __importDefault$t(combinedBuf);
	var _CHUNK_HEADER_SIZE = 2;
	var _MESSAGE_BOUNDARY = 0x00;
	var _DEFAULT_BUFFER_SIZE = 1400; // http://stackoverflow.com/questions/2613734/maximum-packet-size-for-a-tcp-connection
	/**
	 * Looks like a writable buffer, chunks output transparently into a channel below.
	 * @access private
	 */
	var Chunker = /** @class */ (function (_super) {
	    __extends$h(Chunker, _super);
	    function Chunker(channel, bufferSize) {
	        var _this = _super.call(this, 0) || this;
	        _this._bufferSize = bufferSize || _DEFAULT_BUFFER_SIZE;
	        _this._ch = channel;
	        _this._buffer = (0, channel_buf_1$1.alloc)(_this._bufferSize);
	        _this._currentChunkStart = 0;
	        _this._chunkOpen = false;
	        return _this;
	    }
	    Chunker.prototype.putUInt8 = function (position, val) {
	        this._ensure(1);
	        this._buffer.writeUInt8(val);
	    };
	    Chunker.prototype.putInt8 = function (position, val) {
	        this._ensure(1);
	        this._buffer.writeInt8(val);
	    };
	    Chunker.prototype.putFloat64 = function (position, val) {
	        this._ensure(8);
	        this._buffer.writeFloat64(val);
	    };
	    Chunker.prototype.putBytes = function (position, data) {
	        // TODO: If data is larger than our chunk size or so, we're very likely better off just passing this buffer on
	        // rather than doing the copy here TODO: *however* note that we need some way to find out when the data has been
	        // written (and thus the buffer can be re-used) if we take that approach
	        while (data.remaining() > 0) {
	            // Ensure there is an open chunk, and that it has at least one byte of space left
	            this._ensure(1);
	            if (this._buffer.remaining() > data.remaining()) {
	                this._buffer.writeBytes(data);
	            }
	            else {
	                this._buffer.writeBytes(data.readSlice(this._buffer.remaining()));
	            }
	        }
	        return this;
	    };
	    Chunker.prototype.flush = function () {
	        if (this._buffer.position > 0) {
	            this._closeChunkIfOpen();
	            // Local copy and clear the buffer field. This ensures that the buffer is not re-released if the flush call fails
	            var out = this._buffer;
	            this._buffer = null;
	            this._ch.write(out.getSlice(0, out.position));
	            // Alloc a new output buffer. We assume we're using NodeJS's buffer pooling under the hood here!
	            this._buffer = (0, channel_buf_1$1.alloc)(this._bufferSize);
	            this._chunkOpen = false;
	        }
	        return this;
	    };
	    /**
	     * Bolt messages are encoded in one or more chunks, and the boundary between two messages
	     * is encoded as a 0-length chunk, `00 00`. This inserts such a message boundary, closing
	     * any currently open chunk as needed
	     */
	    Chunker.prototype.messageBoundary = function () {
	        this._closeChunkIfOpen();
	        if (this._buffer.remaining() < _CHUNK_HEADER_SIZE) {
	            this.flush();
	        }
	        // Write message boundary
	        this._buffer.writeInt16(_MESSAGE_BOUNDARY);
	    };
	    /** Ensure at least the given size is available for writing */
	    Chunker.prototype._ensure = function (size) {
	        var toWriteSize = this._chunkOpen ? size : size + _CHUNK_HEADER_SIZE;
	        if (this._buffer.remaining() < toWriteSize) {
	            this.flush();
	        }
	        if (!this._chunkOpen) {
	            this._currentChunkStart = this._buffer.position;
	            this._buffer.position = this._buffer.position + _CHUNK_HEADER_SIZE;
	            this._chunkOpen = true;
	        }
	    };
	    Chunker.prototype._closeChunkIfOpen = function () {
	        if (this._chunkOpen) {
	            var chunkSize = this._buffer.position - (this._currentChunkStart + _CHUNK_HEADER_SIZE);
	            this._buffer.putUInt16(this._currentChunkStart, chunkSize);
	            this._chunkOpen = false;
	        }
	    };
	    return Chunker;
	}(base_buf_1.default));
	chunking.Chunker = Chunker;
	/**
	 * Combines chunks until a complete message is gathered up, and then forwards that
	 * message to an 'onmessage' listener.
	 * @access private
	 */
	var Dechunker = /** @class */ (function () {
	    function Dechunker() {
	        this._currentMessage = [];
	        this._partialChunkHeader = 0;
	        this._state = this.AWAITING_CHUNK;
	    }
	    Dechunker.prototype.AWAITING_CHUNK = function (buf) {
	        if (buf.remaining() >= 2) {
	            // Whole header available, read that
	            return this._onHeader(buf.readUInt16());
	        }
	        else {
	            // Only one byte available, read that and wait for the second byte
	            this._partialChunkHeader = buf.readUInt8() << 8;
	            return this.IN_HEADER;
	        }
	    };
	    Dechunker.prototype.IN_HEADER = function (buf) {
	        // First header byte read, now we read the next one
	        return this._onHeader((this._partialChunkHeader | buf.readUInt8()) & 0xffff);
	    };
	    Dechunker.prototype.IN_CHUNK = function (buf) {
	        if (this._chunkSize <= buf.remaining()) {
	            // Current packet is larger than current chunk, or same size:
	            this._currentMessage.push(buf.readSlice(this._chunkSize));
	            return this.AWAITING_CHUNK;
	        }
	        else {
	            // Current packet is smaller than the chunk we're reading, split the current chunk itself up
	            this._chunkSize -= buf.remaining();
	            this._currentMessage.push(buf.readSlice(buf.remaining()));
	            return this.IN_CHUNK;
	        }
	    };
	    Dechunker.prototype.CLOSED = function (buf) {
	        // no-op
	    };
	    /** Called when a complete chunk header has been received */
	    Dechunker.prototype._onHeader = function (header) {
	        if (header === 0) {
	            // Message boundary
	            var message = void 0;
	            switch (this._currentMessage.length) {
	                case 0:
	                    // Keep alive chunk, sent by server to keep network alive.
	                    return this.AWAITING_CHUNK;
	                case 1:
	                    // All data in one chunk, this signals the end of that chunk.
	                    message = this._currentMessage[0];
	                    break;
	                default:
	                    // A large chunk of data received, this signals that the last chunk has been received.
	                    message = new combined_buf_1.default(this._currentMessage);
	                    break;
	            }
	            this._currentMessage = [];
	            this.onmessage(message);
	            return this.AWAITING_CHUNK;
	        }
	        else {
	            this._chunkSize = header;
	            return this.IN_CHUNK;
	        }
	    };
	    Dechunker.prototype.write = function (buf) {
	        while (buf.hasRemaining()) {
	            this._state = this._state(buf);
	        }
	    };
	    return Dechunker;
	}());
	chunking.Dechunker = Dechunker;

	var channelConfig = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(channelConfig, "__esModule", { value: true });
	var neo4j_driver_core_1$w = lib$1;
	var _a$9 = neo4j_driver_core_1$w.internal.util, ENCRYPTION_OFF = _a$9.ENCRYPTION_OFF, ENCRYPTION_ON = _a$9.ENCRYPTION_ON;
	var SERVICE_UNAVAILABLE$4 = neo4j_driver_core_1$w.error.SERVICE_UNAVAILABLE;
	var ALLOWED_VALUES_ENCRYPTED = [
	    null,
	    undefined,
	    true,
	    false,
	    ENCRYPTION_ON,
	    ENCRYPTION_OFF
	];
	var ALLOWED_VALUES_TRUST = [
	    null,
	    undefined,
	    'TRUST_ALL_CERTIFICATES',
	    'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES',
	    'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'
	];
	var ChannelConfig = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {ServerAddress} address the address for the channel to connect to.
	     * @param {Object} driverConfig the driver config provided by the user when driver is created.
	     * @param {string} connectionErrorCode the default error code to use on connection errors.
	     */
	    function ChannelConfig(address, driverConfig, connectionErrorCode) {
	        this.address = address;
	        this.encrypted = extractEncrypted(driverConfig);
	        this.trust = extractTrust(driverConfig);
	        this.trustedCertificates = extractTrustedCertificates(driverConfig);
	        this.knownHostsPath = extractKnownHostsPath(driverConfig);
	        this.connectionErrorCode = connectionErrorCode || SERVICE_UNAVAILABLE$4;
	        this.connectionTimeout = driverConfig.connectionTimeout;
	    }
	    return ChannelConfig;
	}());
	channelConfig.default = ChannelConfig;
	function extractEncrypted(driverConfig) {
	    var value = driverConfig.encrypted;
	    if (ALLOWED_VALUES_ENCRYPTED.indexOf(value) === -1) {
	        throw (0, neo4j_driver_core_1$w.newError)("Illegal value of the encrypted setting ".concat(value, ". Expected one of ").concat(ALLOWED_VALUES_ENCRYPTED));
	    }
	    return value;
	}
	function extractTrust(driverConfig) {
	    var value = driverConfig.trust;
	    if (ALLOWED_VALUES_TRUST.indexOf(value) === -1) {
	        throw (0, neo4j_driver_core_1$w.newError)("Illegal value of the trust setting ".concat(value, ". Expected one of ").concat(ALLOWED_VALUES_TRUST));
	    }
	    return value;
	}
	function extractTrustedCertificates(driverConfig) {
	    return driverConfig.trustedCertificates || [];
	}
	function extractKnownHostsPath(driverConfig) {
	    return driverConfig.knownHosts || null;
	}

	var utf8 = {};

	var string_decoder = {};

	var safeBuffer = {exports: {}};

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */
	var buffer$1 = buffer;
	var Buffer = buffer$1.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer$1;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer$1, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer$1.SlowBuffer(size)
	};
	}(safeBuffer, safeBuffer.exports));

	/*<replacement>*/

	var Buffer = safeBuffer.exports.Buffer;
	/*</replacement>*/

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	string_decoder.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __importDefault$s = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(utf8, "__esModule", { value: true });
	var channel_buf_1 = __importDefault$s(channelBuf);
	var neo4j_driver_core_1$v = lib$1;
	var buffer_1 = __importDefault$s(buffer);
	var string_decoder_1 = string_decoder;
	var decoder = new string_decoder_1.StringDecoder('utf8');
	function encode(str) {
	    return new channel_buf_1.default(newBuffer(str));
	}
	function decode(buffer, length) {
	    if (Object.prototype.hasOwnProperty.call(buffer, '_buffer')) {
	        return decodeChannelBuffer(buffer, length);
	    }
	    else if (Object.prototype.hasOwnProperty.call(buffer, '_buffers')) {
	        return decodeCombinedBuffer(buffer, length);
	    }
	    else {
	        throw (0, neo4j_driver_core_1$v.newError)("Don't know how to decode strings from '".concat(buffer, "'"));
	    }
	}
	function decodeChannelBuffer(buffer, length) {
	    var start = buffer.position;
	    var end = start + length;
	    buffer.position = Math.min(end, buffer.length);
	    return buffer._buffer.toString('utf8', start, end);
	}
	function decodeCombinedBuffer(buffer, length) {
	    return streamDecodeCombinedBuffer(buffer, length, function (partBuffer) { return decoder.write(partBuffer._buffer); }, function () { return decoder.end(); });
	}
	function streamDecodeCombinedBuffer(combinedBuffers, length, decodeFn, endFn) {
	    var remainingBytesToRead = length;
	    var position = combinedBuffers.position;
	    combinedBuffers._updatePos(Math.min(length, combinedBuffers.length - position));
	    // Reduce CombinedBuffers to a decoded string
	    var out = combinedBuffers._buffers.reduce(function (last, partBuffer) {
	        if (remainingBytesToRead <= 0) {
	            return last;
	        }
	        else if (position >= partBuffer.length) {
	            position -= partBuffer.length;
	            return '';
	        }
	        else {
	            partBuffer._updatePos(position - partBuffer.position);
	            var bytesToRead = Math.min(partBuffer.length - position, remainingBytesToRead);
	            var lastSlice = partBuffer.readSlice(bytesToRead);
	            partBuffer._updatePos(bytesToRead);
	            remainingBytesToRead = Math.max(remainingBytesToRead - lastSlice.length, 0);
	            position = 0;
	            return last + decodeFn(lastSlice);
	        }
	    }, '');
	    return out + endFn();
	}
	function newBuffer(str) {
	    // use static factory function present in newer NodeJS versions to create a buffer containing the given string
	    // or fallback to the old, potentially deprecated constructor
	    if (typeof buffer_1.default.Buffer.from === 'function') {
	        return buffer_1.default.Buffer.from(str, 'utf8');
	    }
	    else {
	        // eslint-disable-next-line node/no-deprecated-api
	        return new buffer_1.default.Buffer(str, 'utf8');
	    }
	}
	utf8.default = {
	    encode: encode,
	    decode: decode
	};

	(function (exports) {
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.utf8 = exports.alloc = exports.ChannelConfig = void 0;
	__exportStar(browser, exports);
	__exportStar(chunking, exports);
	var channel_config_1 = channelConfig;
	Object.defineProperty(exports, "ChannelConfig", { enumerable: true, get: function () { return __importDefault(channel_config_1).default; } });
	var channel_buf_1 = channelBuf;
	Object.defineProperty(exports, "alloc", { enumerable: true, get: function () { return channel_buf_1.alloc; } });
	var utf8_1 = utf8;
	Object.defineProperty(exports, "utf8", { enumerable: true, get: function () { return __importDefault(utf8_1).default; } });
	}(channel));

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(handshake$1, "__esModule", { value: true });
	var channel_1$3 = channel;
	var neo4j_driver_core_1$u = lib$1;
	var BOLT_MAGIC_PREAMBLE = 0x6060b017;
	function version(major, minor) {
	    return {
	        major: major,
	        minor: minor
	    };
	}
	function createHandshakeMessage(versions) {
	    if (versions.length > 4) {
	        throw (0, neo4j_driver_core_1$u.newError)('It should not have more than 4 versions of the protocol');
	    }
	    var handshakeBuffer = (0, channel_1$3.alloc)(5 * 4);
	    handshakeBuffer.writeInt32(BOLT_MAGIC_PREAMBLE);
	    versions.forEach(function (version) {
	        if (version instanceof Array) {
	            var _a = version[0], major = _a.major, minor = _a.minor;
	            var minMinor = version[1].minor;
	            var range = minor - minMinor;
	            handshakeBuffer.writeInt32((range << 16) | (minor << 8) | major);
	        }
	        else {
	            var major = version.major, minor = version.minor;
	            handshakeBuffer.writeInt32((minor << 8) | major);
	        }
	    });
	    handshakeBuffer.reset();
	    return handshakeBuffer;
	}
	function parseNegotiatedResponse(buffer) {
	    var h = [
	        buffer.readUInt8(),
	        buffer.readUInt8(),
	        buffer.readUInt8(),
	        buffer.readUInt8()
	    ];
	    if (h[0] === 0x48 && h[1] === 0x54 && h[2] === 0x54 && h[3] === 0x50) {
	        throw (0, neo4j_driver_core_1$u.newError)('Server responded HTTP. Make sure you are not trying to connect to the http endpoint ' +
	            '(HTTP defaults to port 7474 whereas BOLT defaults to port 7687)');
	    }
	    return Number(h[3] + '.' + h[2]);
	}
	/**
	 * @return {BaseBuffer}
	 * @private
	 */
	function newHandshakeBuffer() {
	    return createHandshakeMessage([
	        version(5, 0),
	        [version(4, 4), version(4, 2)],
	        version(4, 1),
	        version(3, 0)
	    ]);
	}
	/**
	 * This callback is displayed as a global member.
	 * @callback BufferConsumerCallback
	 * @param {buffer} buffer the remaining buffer
	 */
	/**
	 * @typedef HandshakeResult
	 * @property {number} protocolVersion The protocol version negotiated in the handshake
	 * @property {function(BufferConsumerCallback)} consumeRemainingBuffer A function to consume the remaining buffer if it exists
	 */
	/**
	 * Shake hands using the channel and return the protocol version
	 *
	 * @param {Channel} channel the channel use to shake hands
	 * @returns {Promise<HandshakeResult>} Promise of protocol version and consumeRemainingBuffer
	 */
	function handshake(channel) {
	    var _this = this;
	    return new Promise(function (resolve, reject) {
	        var handshakeErrorHandler = function (error) {
	            reject(error);
	        };
	        channel.onerror = handshakeErrorHandler.bind(_this);
	        if (channel._error) {
	            handshakeErrorHandler(channel._error);
	        }
	        channel.onmessage = function (buffer) {
	            try {
	                // read the response buffer and initialize the protocol
	                var protocolVersion = parseNegotiatedResponse(buffer);
	                resolve({
	                    protocolVersion: protocolVersion,
	                    consumeRemainingBuffer: function (consumer) {
	                        if (buffer.hasRemaining()) {
	                            consumer(buffer.readSlice(buffer.remaining()));
	                        }
	                    }
	                });
	            }
	            catch (e) {
	                reject(e);
	            }
	        };
	        channel.write(newHandshakeBuffer());
	    });
	}
	handshake$1.default = handshake;

	var create$1 = {};

	var boltProtocolV1 = {};

	var boltProtocolUtil = {};

	var streamObservers = {};

	var routingTableRaw = {};

	var __extends$g = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$r = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(routingTableRaw, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// eslint-disable-next-line no-unused-vars
	__importDefault$r(lib$1);
	/**
	 * Represente the raw version of the routing table
	 */
	var RawRoutingTable = /** @class */ (function () {
	    function RawRoutingTable() {
	    }
	    /**
	     * Constructs the raw routing table for Record based result
	     * @param {Record} record The record which will be used get the raw routing table
	     * @returns {RawRoutingTable} The raw routing table
	     */
	    RawRoutingTable.ofRecord = function (record) {
	        if (record === null) {
	            return RawRoutingTable.ofNull();
	        }
	        return new RecordRawRoutingTable(record);
	    };
	    /**
	     * Constructs the raw routing table for Success result for a Routing Message
	     * @param {object} response The result
	     * @returns {RawRoutingTable} The raw routing table
	     */
	    RawRoutingTable.ofMessageResponse = function (response) {
	        if (response === null) {
	            return RawRoutingTable.ofNull();
	        }
	        return new ResponseRawRoutingTable(response);
	    };
	    /**
	     * Construct the raw routing table of a null response
	     *
	     * @returns {RawRoutingTable} the raw routing table
	     */
	    RawRoutingTable.ofNull = function () {
	        return new NullRawRoutingTable();
	    };
	    Object.defineProperty(RawRoutingTable.prototype, "ttl", {
	        /**
	         * Get raw ttl
	         *
	         * @returns {number|string} ttl Time to live
	         */
	        get: function () {
	            throw new Error('Not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(RawRoutingTable.prototype, "db", {
	        /**
	         * Get raw db
	         *
	         * @returns {string?} The database name
	         */
	        get: function () {
	            throw new Error('Not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(RawRoutingTable.prototype, "servers", {
	        /**
	         *
	         * @typedef {Object} ServerRole
	         * @property {string} role the role of the address on the cluster
	         * @property {string[]} addresses the address within the role
	         *
	         * @return {ServerRole[]} list of servers addresses
	         */
	        get: function () {
	            throw new Error('Not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(RawRoutingTable.prototype, "isNull", {
	        /**
	         * Indicates the result is null
	         *
	         * @returns {boolean} Is null
	         */
	        get: function () {
	            throw new Error('Not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return RawRoutingTable;
	}());
	routingTableRaw.default = RawRoutingTable;
	/**
	 * Get the raw routing table information from route message response
	 */
	var ResponseRawRoutingTable = /** @class */ (function (_super) {
	    __extends$g(ResponseRawRoutingTable, _super);
	    function ResponseRawRoutingTable(response) {
	        var _this = _super.call(this) || this;
	        _this._response = response;
	        return _this;
	    }
	    Object.defineProperty(ResponseRawRoutingTable.prototype, "ttl", {
	        get: function () {
	            return this._response.rt.ttl;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ResponseRawRoutingTable.prototype, "servers", {
	        get: function () {
	            return this._response.rt.servers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ResponseRawRoutingTable.prototype, "db", {
	        get: function () {
	            return this._response.rt.db;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ResponseRawRoutingTable.prototype, "isNull", {
	        get: function () {
	            return this._response === null;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return ResponseRawRoutingTable;
	}(RawRoutingTable));
	/**
	 * Null routing table
	 */
	var NullRawRoutingTable = /** @class */ (function (_super) {
	    __extends$g(NullRawRoutingTable, _super);
	    function NullRawRoutingTable() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(NullRawRoutingTable.prototype, "isNull", {
	        get: function () {
	            return true;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return NullRawRoutingTable;
	}(RawRoutingTable));
	/**
	 * Get the raw routing table information from the record
	 */
	var RecordRawRoutingTable = /** @class */ (function (_super) {
	    __extends$g(RecordRawRoutingTable, _super);
	    function RecordRawRoutingTable(record) {
	        var _this = _super.call(this) || this;
	        _this._record = record;
	        return _this;
	    }
	    Object.defineProperty(RecordRawRoutingTable.prototype, "ttl", {
	        get: function () {
	            return this._record.get('ttl');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(RecordRawRoutingTable.prototype, "servers", {
	        get: function () {
	            return this._record.get('servers');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(RecordRawRoutingTable.prototype, "db", {
	        get: function () {
	            return this._record.has('db') ? this._record.get('db') : null;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(RecordRawRoutingTable.prototype, "isNull", {
	        get: function () {
	            return this._record === null;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return RecordRawRoutingTable;
	}(RawRoutingTable));

	var __extends$f = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$q = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(streamObservers, "__esModule", { value: true });
	streamObservers.ProcedureRouteObserver = streamObservers.RouteObserver = streamObservers.CompletedObserver = streamObservers.FailedObserver = streamObservers.ResetObserver = streamObservers.LoginObserver = streamObservers.ResultStreamObserver = streamObservers.StreamObserver = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var neo4j_driver_core_1$t = lib$1;
	var routing_table_raw_1 = __importDefault$q(routingTableRaw);
	var FETCH_ALL$3 = neo4j_driver_core_1$t.internal.constants.FETCH_ALL;
	var PROTOCOL_ERROR$5 = neo4j_driver_core_1$t.error.PROTOCOL_ERROR;
	var StreamObserver = /** @class */ (function () {
	    function StreamObserver() {
	    }
	    StreamObserver.prototype.onNext = function (rawRecord) { };
	    StreamObserver.prototype.onError = function (_error) { };
	    StreamObserver.prototype.onCompleted = function (meta) { };
	    return StreamObserver;
	}());
	streamObservers.StreamObserver = StreamObserver;
	/**
	 * Handles a RUN/PULL_ALL, or RUN/DISCARD_ALL requests, maps the responses
	 * in a way that a user-provided observer can see these as a clean Stream
	 * of records.
	 * This class will queue up incoming messages until a user-provided observer
	 * for the incoming stream is registered. Thus, we keep fields around
	 * for tracking head/records/tail. These are only used if there is no
	 * observer registered.
	 * @access private
	 */
	var ResultStreamObserver = /** @class */ (function (_super) {
	    __extends$f(ResultStreamObserver, _super);
	    /**
	     *
	     * @param {Object} param
	     * @param {Object} param.server
	     * @param {boolean} param.reactive
	     * @param {function(stmtId: number|Integer, n: number|Integer, observer: StreamObserver)} param.moreFunction -
	     * @param {function(stmtId: number|Integer, observer: StreamObserver)} param.discardFunction -
	     * @param {number|Integer} param.fetchSize -
	     * @param {function(err: Error): Promise|void} param.beforeError -
	     * @param {function(err: Error): Promise|void} param.afterError -
	     * @param {function(keys: string[]): Promise|void} param.beforeKeys -
	     * @param {function(keys: string[]): Promise|void} param.afterKeys -
	     * @param {function(metadata: Object): Promise|void} param.beforeComplete -
	     * @param {function(metadata: Object): Promise|void} param.afterComplete -
	     */
	    function ResultStreamObserver(_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.reactive, reactive = _c === void 0 ? false : _c, moreFunction = _b.moreFunction, discardFunction = _b.discardFunction, _d = _b.fetchSize, fetchSize = _d === void 0 ? FETCH_ALL$3 : _d, beforeError = _b.beforeError, afterError = _b.afterError, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, server = _b.server, _e = _b.highRecordWatermark, highRecordWatermark = _e === void 0 ? Number.MAX_VALUE : _e, _f = _b.lowRecordWatermark, lowRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f;
	        var _this = _super.call(this) || this;
	        _this._fieldKeys = null;
	        _this._fieldLookup = null;
	        _this._head = null;
	        _this._queuedRecords = [];
	        _this._tail = null;
	        _this._error = null;
	        _this._observers = [];
	        _this._meta = {};
	        _this._server = server;
	        _this._beforeError = beforeError;
	        _this._afterError = afterError;
	        _this._beforeKeys = beforeKeys;
	        _this._afterKeys = afterKeys;
	        _this._beforeComplete = beforeComplete;
	        _this._afterComplete = afterComplete;
	        _this._queryId = null;
	        _this._moreFunction = moreFunction;
	        _this._discardFunction = discardFunction;
	        _this._discard = false;
	        _this._fetchSize = fetchSize;
	        _this._lowRecordWatermark = lowRecordWatermark;
	        _this._highRecordWatermark = highRecordWatermark;
	        _this._setState(reactive ? _states.READY : _states.READY_STREAMING);
	        _this._setupAutoPull();
	        _this._paused = false;
	        return _this;
	    }
	    /**
	     * Pause the record consuming
	     *
	     * This function will supend the record consuming. It will not cancel the stream and the already
	     * requested records will be sent to the subscriber.
	     */
	    ResultStreamObserver.prototype.pause = function () {
	        this._paused = true;
	    };
	    /**
	     * Resume the record consuming
	     *
	     * This function will resume the record consuming fetching more records from the server.
	     */
	    ResultStreamObserver.prototype.resume = function () {
	        this._paused = false;
	        this._setupAutoPull(true);
	        this._state.pull(this);
	    };
	    /**
	     * Will be called on every record that comes in and transform a raw record
	     * to a Object. If user-provided observer is present, pass transformed record
	     * to it's onNext method, otherwise, push to record que.
	     * @param {Array} rawRecord - An array with the raw record
	     */
	    ResultStreamObserver.prototype.onNext = function (rawRecord) {
	        var record = new neo4j_driver_core_1$t.Record(this._fieldKeys, rawRecord, this._fieldLookup);
	        if (this._observers.some(function (o) { return o.onNext; })) {
	            this._observers.forEach(function (o) {
	                if (o.onNext) {
	                    o.onNext(record);
	                }
	            });
	        }
	        else {
	            this._queuedRecords.push(record);
	            if (this._queuedRecords.length > this._highRecordWatermark) {
	                this._autoPull = false;
	            }
	        }
	    };
	    ResultStreamObserver.prototype.onCompleted = function (meta) {
	        this._state.onSuccess(this, meta);
	    };
	    /**
	     * Will be called on errors.
	     * If user-provided observer is present, pass the error
	     * to it's onError method, otherwise set instance variable _error.
	     * @param {Object} error - An error object
	     */
	    ResultStreamObserver.prototype.onError = function (error) {
	        this._state.onError(this, error);
	    };
	    /**
	     * Cancel pending record stream
	     */
	    ResultStreamObserver.prototype.cancel = function () {
	        this._discard = true;
	    };
	    /**
	     * Stream observer defaults to handling responses for two messages: RUN + PULL_ALL or RUN + DISCARD_ALL.
	     * Response for RUN initializes query keys. Response for PULL_ALL / DISCARD_ALL exposes the result stream.
	     *
	     * However, some operations can be represented as a single message which receives full metadata in a single response.
	     * For example, operations to begin, commit and rollback an explicit transaction use two messages in Bolt V1 but a single message in Bolt V3.
	     * Messages are `RUN "BEGIN" {}` + `PULL_ALL` in Bolt V1 and `BEGIN` in Bolt V3.
	     *
	     * This function prepares the observer to only handle a single response message.
	     */
	    ResultStreamObserver.prototype.prepareToHandleSingleResponse = function () {
	        this._head = [];
	        this._fieldKeys = [];
	        this._setState(_states.STREAMING);
	    };
	    /**
	     * Mark this observer as if it has completed with no metadata.
	     */
	    ResultStreamObserver.prototype.markCompleted = function () {
	        this._head = [];
	        this._fieldKeys = [];
	        this._tail = {};
	        this._setState(_states.SUCCEEDED);
	    };
	    /**
	     * Subscribe to events with provided observer.
	     * @param {Object} observer - Observer object
	     * @param {function(keys: String[])} observer.onKeys - Handle stream header, field keys.
	     * @param {function(record: Object)} observer.onNext - Handle records, one by one.
	     * @param {function(metadata: Object)} observer.onCompleted - Handle stream tail, the metadata.
	     * @param {function(error: Object)} observer.onError - Handle errors, should always be provided.
	     */
	    ResultStreamObserver.prototype.subscribe = function (observer) {
	        if (this._head && observer.onKeys) {
	            observer.onKeys(this._head);
	        }
	        if (this._queuedRecords.length > 0 && observer.onNext) {
	            for (var i = 0; i < this._queuedRecords.length; i++) {
	                observer.onNext(this._queuedRecords[i]);
	                if (this._queuedRecords.length - i - 1 <= this._lowRecordWatermark) {
	                    this._autoPull = true;
	                    if (this._state === _states.READY) {
	                        this._handleStreaming();
	                    }
	                }
	            }
	        }
	        if (this._tail && observer.onCompleted) {
	            observer.onCompleted(this._tail);
	        }
	        if (this._error) {
	            observer.onError(this._error);
	        }
	        this._observers.push(observer);
	        if (this._state === _states.READY) {
	            this._handleStreaming();
	        }
	    };
	    ResultStreamObserver.prototype._handleHasMore = function (meta) {
	        // We've consumed current batch and server notified us that there're more
	        // records to stream. Let's invoke more or discard function based on whether
	        // the user wants to discard streaming or not
	        this._setState(_states.READY); // we've done streaming
	        this._handleStreaming();
	        delete meta.has_more;
	    };
	    ResultStreamObserver.prototype._handlePullSuccess = function (meta) {
	        var _this = this;
	        var completionMetadata = Object.assign(this._server ? { server: this._server } : {}, this._meta, meta);
	        if (![undefined, null, 'r', 'w', 'rw', 's'].includes(completionMetadata.type)) {
	            this.onError((0, neo4j_driver_core_1$t.newError)("Server returned invalid query type. Expected one of [undefined, null, \"r\", \"w\", \"rw\", \"s\"] but got '".concat(completionMetadata.type, "'"), PROTOCOL_ERROR$5));
	            return;
	        }
	        this._setState(_states.SUCCEEDED);
	        var beforeHandlerResult = null;
	        if (this._beforeComplete) {
	            beforeHandlerResult = this._beforeComplete(completionMetadata);
	        }
	        var continuation = function () {
	            // End of stream
	            _this._tail = completionMetadata;
	            if (_this._observers.some(function (o) { return o.onCompleted; })) {
	                _this._observers.forEach(function (o) {
	                    if (o.onCompleted) {
	                        o.onCompleted(completionMetadata);
	                    }
	                });
	            }
	            if (_this._afterComplete) {
	                _this._afterComplete(completionMetadata);
	            }
	        };
	        if (beforeHandlerResult) {
	            Promise.resolve(beforeHandlerResult).then(function () { return continuation(); });
	        }
	        else {
	            continuation();
	        }
	    };
	    ResultStreamObserver.prototype._handleRunSuccess = function (meta, afterSuccess) {
	        var _this = this;
	        if (this._fieldKeys === null) {
	            // Stream header, build a name->index field lookup table
	            // to be used by records. This is an optimization to make it
	            // faster to look up fields in a record by name, rather than by index.
	            // Since the records we get back via Bolt are just arrays of values.
	            this._fieldKeys = [];
	            this._fieldLookup = {};
	            if (meta.fields && meta.fields.length > 0) {
	                this._fieldKeys = meta.fields;
	                for (var i = 0; i < meta.fields.length; i++) {
	                    this._fieldLookup[meta.fields[i]] = i;
	                }
	                // remove fields key from metadata object
	                delete meta.fields;
	            }
	            // Extract server generated query id for use in requestMore and discard
	            // functions
	            if (meta.qid !== null && meta.qid !== undefined) {
	                this._queryId = meta.qid;
	                // remove qid from metadata object
	                delete meta.qid;
	            }
	            this._storeMetadataForCompletion(meta);
	            var beforeHandlerResult = null;
	            if (this._beforeKeys) {
	                beforeHandlerResult = this._beforeKeys(this._fieldKeys);
	            }
	            var continuation_1 = function () {
	                _this._head = _this._fieldKeys;
	                if (_this._observers.some(function (o) { return o.onKeys; })) {
	                    _this._observers.forEach(function (o) {
	                        if (o.onKeys) {
	                            o.onKeys(_this._fieldKeys);
	                        }
	                    });
	                }
	                if (_this._afterKeys) {
	                    _this._afterKeys(_this._fieldKeys);
	                }
	                afterSuccess();
	            };
	            if (beforeHandlerResult) {
	                Promise.resolve(beforeHandlerResult).then(function () { return continuation_1(); });
	            }
	            else {
	                continuation_1();
	            }
	        }
	    };
	    ResultStreamObserver.prototype._handleError = function (error) {
	        var _this = this;
	        this._setState(_states.FAILED);
	        this._error = error;
	        var beforeHandlerResult = null;
	        if (this._beforeError) {
	            beforeHandlerResult = this._beforeError(error);
	        }
	        var continuation = function () {
	            if (_this._observers.some(function (o) { return o.onError; })) {
	                _this._observers.forEach(function (o) {
	                    if (o.onError) {
	                        o.onError(error);
	                    }
	                });
	            }
	            if (_this._afterError) {
	                _this._afterError(error);
	            }
	        };
	        if (beforeHandlerResult) {
	            Promise.resolve(beforeHandlerResult).then(function () { return continuation(); });
	        }
	        else {
	            continuation();
	        }
	    };
	    ResultStreamObserver.prototype._handleStreaming = function () {
	        if (this._head && this._observers.some(function (o) { return o.onNext || o.onCompleted; })) {
	            if (!this._paused && (this._discard || this._autoPull)) {
	                this._more();
	            }
	        }
	    };
	    ResultStreamObserver.prototype._more = function () {
	        if (this._discard) {
	            this._discardFunction(this._queryId, this);
	        }
	        else {
	            this._moreFunction(this._queryId, this._fetchSize, this);
	        }
	        this._setState(_states.STREAMING);
	    };
	    ResultStreamObserver.prototype._storeMetadataForCompletion = function (meta) {
	        var keys = Object.keys(meta);
	        var index = keys.length;
	        var key = '';
	        while (index--) {
	            key = keys[index];
	            this._meta[key] = meta[key];
	        }
	    };
	    ResultStreamObserver.prototype._setState = function (state) {
	        this._state = state;
	    };
	    ResultStreamObserver.prototype._setupAutoPull = function () {
	        this._autoPull = true;
	    };
	    return ResultStreamObserver;
	}(StreamObserver));
	streamObservers.ResultStreamObserver = ResultStreamObserver;
	var LoginObserver = /** @class */ (function (_super) {
	    __extends$f(LoginObserver, _super);
	    /**
	     *
	     * @param {Object} param -
	     * @param {function(err: Error)} param.onError
	     * @param {function(metadata)} param.onCompleted
	     */
	    function LoginObserver(_a) {
	        var _b = _a === void 0 ? {} : _a, onError = _b.onError, onCompleted = _b.onCompleted;
	        var _this = _super.call(this) || this;
	        _this._onError = onError;
	        _this._onCompleted = onCompleted;
	        return _this;
	    }
	    LoginObserver.prototype.onNext = function (record) {
	        this.onError((0, neo4j_driver_core_1$t.newError)('Received RECORD when initializing ' + neo4j_driver_core_1$t.json.stringify(record)));
	    };
	    LoginObserver.prototype.onError = function (error) {
	        if (this._onError) {
	            this._onError(error);
	        }
	    };
	    LoginObserver.prototype.onCompleted = function (metadata) {
	        if (this._onCompleted) {
	            this._onCompleted(metadata);
	        }
	    };
	    return LoginObserver;
	}(StreamObserver));
	streamObservers.LoginObserver = LoginObserver;
	var ResetObserver = /** @class */ (function (_super) {
	    __extends$f(ResetObserver, _super);
	    /**
	     *
	     * @param {Object} param -
	     * @param {function(err: String)} param.onProtocolError
	     * @param {function(err: Error)} param.onError
	     * @param {function(metadata)} param.onComplete
	     */
	    function ResetObserver(_a) {
	        var _b = _a === void 0 ? {} : _a, onProtocolError = _b.onProtocolError, onError = _b.onError, onComplete = _b.onComplete;
	        var _this = _super.call(this) || this;
	        _this._onProtocolError = onProtocolError;
	        _this._onError = onError;
	        _this._onComplete = onComplete;
	        return _this;
	    }
	    ResetObserver.prototype.onNext = function (record) {
	        this.onError((0, neo4j_driver_core_1$t.newError)('Received RECORD when resetting: received record is: ' +
	            neo4j_driver_core_1$t.json.stringify(record), PROTOCOL_ERROR$5));
	    };
	    ResetObserver.prototype.onError = function (error) {
	        if (error.code === PROTOCOL_ERROR$5 && this._onProtocolError) {
	            this._onProtocolError(error.message);
	        }
	        if (this._onError) {
	            this._onError(error);
	        }
	    };
	    ResetObserver.prototype.onCompleted = function (metadata) {
	        if (this._onComplete) {
	            this._onComplete(metadata);
	        }
	    };
	    return ResetObserver;
	}(StreamObserver));
	streamObservers.ResetObserver = ResetObserver;
	var FailedObserver = /** @class */ (function (_super) {
	    __extends$f(FailedObserver, _super);
	    function FailedObserver(_a) {
	        var error = _a.error, onError = _a.onError;
	        var _this = _super.call(this, { beforeError: onError }) || this;
	        _this.onError(error);
	        return _this;
	    }
	    return FailedObserver;
	}(ResultStreamObserver));
	streamObservers.FailedObserver = FailedObserver;
	var CompletedObserver = /** @class */ (function (_super) {
	    __extends$f(CompletedObserver, _super);
	    function CompletedObserver() {
	        var _this = _super.call(this) || this;
	        _super.prototype.markCompleted.call(_this);
	        return _this;
	    }
	    return CompletedObserver;
	}(ResultStreamObserver));
	streamObservers.CompletedObserver = CompletedObserver;
	var ProcedureRouteObserver = /** @class */ (function (_super) {
	    __extends$f(ProcedureRouteObserver, _super);
	    function ProcedureRouteObserver(_a) {
	        var resultObserver = _a.resultObserver, onProtocolError = _a.onProtocolError, onError = _a.onError, onCompleted = _a.onCompleted;
	        var _this = _super.call(this) || this;
	        _this._resultObserver = resultObserver;
	        _this._onError = onError;
	        _this._onCompleted = onCompleted;
	        _this._records = [];
	        _this._onProtocolError = onProtocolError;
	        resultObserver.subscribe(_this);
	        return _this;
	    }
	    ProcedureRouteObserver.prototype.onNext = function (record) {
	        this._records.push(record);
	    };
	    ProcedureRouteObserver.prototype.onError = function (error) {
	        if (error.code === PROTOCOL_ERROR$5 && this._onProtocolError) {
	            this._onProtocolError(error.message);
	        }
	        if (this._onError) {
	            this._onError(error);
	        }
	    };
	    ProcedureRouteObserver.prototype.onCompleted = function () {
	        if (this._records !== null && this._records.length !== 1) {
	            this.onError((0, neo4j_driver_core_1$t.newError)('Illegal response from router. Received ' +
	                this._records.length +
	                ' records but expected only one.\n' +
	                neo4j_driver_core_1$t.json.stringify(this._records), PROTOCOL_ERROR$5));
	            return;
	        }
	        if (this._onCompleted) {
	            this._onCompleted(routing_table_raw_1.default.ofRecord(this._records[0]));
	        }
	    };
	    return ProcedureRouteObserver;
	}(StreamObserver));
	streamObservers.ProcedureRouteObserver = ProcedureRouteObserver;
	var RouteObserver = /** @class */ (function (_super) {
	    __extends$f(RouteObserver, _super);
	    /**
	     *
	     * @param {Object} param -
	     * @param {function(err: String)} param.onProtocolError
	     * @param {function(err: Error)} param.onError
	     * @param {function(RawRoutingTable)} param.onCompleted
	     */
	    function RouteObserver(_a) {
	        var _b = _a === void 0 ? {} : _a, onProtocolError = _b.onProtocolError, onError = _b.onError, onCompleted = _b.onCompleted;
	        var _this = _super.call(this) || this;
	        _this._onProtocolError = onProtocolError;
	        _this._onError = onError;
	        _this._onCompleted = onCompleted;
	        return _this;
	    }
	    RouteObserver.prototype.onNext = function (record) {
	        this.onError((0, neo4j_driver_core_1$t.newError)('Received RECORD when resetting: received record is: ' +
	            neo4j_driver_core_1$t.json.stringify(record), PROTOCOL_ERROR$5));
	    };
	    RouteObserver.prototype.onError = function (error) {
	        if (error.code === PROTOCOL_ERROR$5 && this._onProtocolError) {
	            this._onProtocolError(error.message);
	        }
	        if (this._onError) {
	            this._onError(error);
	        }
	    };
	    RouteObserver.prototype.onCompleted = function (metadata) {
	        if (this._onCompleted) {
	            this._onCompleted(routing_table_raw_1.default.ofMessageResponse(metadata));
	        }
	    };
	    return RouteObserver;
	}(StreamObserver));
	streamObservers.RouteObserver = RouteObserver;
	var _states = {
	    READY_STREAMING: {
	        // async start state
	        onSuccess: function (streamObserver, meta) {
	            streamObserver._handleRunSuccess(meta, function () {
	                streamObserver._setState(_states.STREAMING);
	            } // after run succeeded, async directly move to streaming
	            // state
	            );
	        },
	        onError: function (streamObserver, error) {
	            streamObserver._handleError(error);
	        },
	        name: function () {
	            return 'READY_STREAMING';
	        },
	        pull: function () { }
	    },
	    READY: {
	        // reactive start state
	        onSuccess: function (streamObserver, meta) {
	            streamObserver._handleRunSuccess(meta, function () { return streamObserver._handleStreaming(); } // after run succeeded received, reactive shall start pulling
	            );
	        },
	        onError: function (streamObserver, error) {
	            streamObserver._handleError(error);
	        },
	        name: function () {
	            return 'READY';
	        },
	        pull: function (streamObserver) { return streamObserver._more(); }
	    },
	    STREAMING: {
	        onSuccess: function (streamObserver, meta) {
	            if (meta.has_more) {
	                streamObserver._handleHasMore(meta);
	            }
	            else {
	                streamObserver._handlePullSuccess(meta);
	            }
	        },
	        onError: function (streamObserver, error) {
	            streamObserver._handleError(error);
	        },
	        name: function () {
	            return 'STREAMING';
	        },
	        pull: function () { }
	    },
	    FAILED: {
	        onError: function (_error) {
	            // more errors are ignored
	        },
	        name: function () {
	            return 'FAILED';
	        },
	        pull: function () { }
	    },
	    SUCCEEDED: {
	        name: function () {
	            return 'SUCCEEDED';
	        },
	        pull: function () { }
	    }
	};

	Object.defineProperty(boltProtocolUtil, "__esModule", { value: true });
	boltProtocolUtil.assertImpersonatedUserIsEmpty = boltProtocolUtil.assertTxConfigIsEmpty = boltProtocolUtil.assertDatabaseIsEmpty = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var neo4j_driver_core_1$s = lib$1;
	/**
	 * @param {TxConfig} txConfig the auto-commit transaction configuration.
	 * @param {function(error: string)} onProtocolError called when the txConfig is not empty.
	 * @param {ResultStreamObserver} observer the response observer.
	 */
	function assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {
	    if (onProtocolError === void 0) { onProtocolError = function () { }; }
	    if (txConfig && !txConfig.isEmpty()) {
	        var error = (0, neo4j_driver_core_1$s.newError)('Driver is connected to the database that does not support transaction configuration. ' +
	            'Please upgrade to neo4j 3.5.0 or later in order to use this functionality');
	        // unsupported API was used, consider this a fatal error for the current connection
	        onProtocolError(error.message);
	        observer.onError(error);
	        throw error;
	    }
	}
	boltProtocolUtil.assertTxConfigIsEmpty = assertTxConfigIsEmpty;
	/**
	 * Asserts that the passed-in database name is empty.
	 * @param {string} database
	 * @param {fuction(err: String)} onProtocolError Called when it doesn't have database set
	 */
	function assertDatabaseIsEmpty(database, onProtocolError, observer) {
	    if (onProtocolError === void 0) { onProtocolError = function () { }; }
	    if (database) {
	        var error = (0, neo4j_driver_core_1$s.newError)('Driver is connected to the database that does not support multiple databases. ' +
	            'Please upgrade to neo4j 4.0.0 or later in order to use this functionality');
	        // unsupported API was used, consider this a fatal error for the current connection
	        onProtocolError(error.message);
	        observer.onError(error);
	        throw error;
	    }
	}
	boltProtocolUtil.assertDatabaseIsEmpty = assertDatabaseIsEmpty;
	/**
	 * Asserts that the passed-in impersonated user is empty
	 * @param {string} impersonatedUser
	 * @param {function (err:Error)} onProtocolError Called when it does have impersonated user set
	 * @param {any} observer
	 */
	function assertImpersonatedUserIsEmpty(impersonatedUser, onProtocolError, observer) {
	    if (onProtocolError === void 0) { onProtocolError = function () { }; }
	    if (impersonatedUser) {
	        var error = (0, neo4j_driver_core_1$s.newError)('Driver is connected to the database that does not support user impersonation. ' +
	            'Please upgrade to neo4j 4.4.0 or later in order to use this functionality. ' +
	            "Trying to impersonate ".concat(impersonatedUser, "."));
	        // unsupported API was used, consider this a fatal error for the current connection
	        onProtocolError(error.message);
	        observer.onError(error);
	        throw error;
	    }
	}
	boltProtocolUtil.assertImpersonatedUserIsEmpty = assertImpersonatedUserIsEmpty;

	var packstream = {};

	var packstreamV1 = {};

	var lang = {};

	var functional = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(functional, "__esModule", { value: true });
	functional.identity = void 0;
	/**
	 * Identity function.
	 *
	 * Identity functions are function which returns the input as output.
	 *
	 * @param {any} x
	 * @returns {any} the x
	 */
	function identity(x) {
	    return x;
	}
	functional.identity = identity;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding$4 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$4 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
	    __setModuleDefault$4(result, mod);
	    return result;
	};
	Object.defineProperty(lang, "__esModule", { value: true });
	lang.functional = void 0;
	lang.functional = __importStar$4(functional);

	var structure$1 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(structure$1, "__esModule", { value: true });
	structure$1.verifyStructSize = structure$1.Structure = void 0;
	var neo4j_driver_core_1$r = lib$1;
	var PROTOCOL_ERROR$4 = neo4j_driver_core_1$r.error.PROTOCOL_ERROR;
	/**
	 * A Structure have a signature and fields.
	 */
	var Structure = /** @class */ (function () {
	    /**
	     * Create new instance
	     */
	    function Structure(signature, fields) {
	        this.signature = signature;
	        this.fields = fields;
	    }
	    Object.defineProperty(Structure.prototype, "size", {
	        get: function () {
	            return this.fields.length;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Structure.prototype.toString = function () {
	        var fieldStr = '';
	        for (var i = 0; i < this.fields.length; i++) {
	            if (i > 0) {
	                fieldStr += ', ';
	            }
	            fieldStr += this.fields[i];
	        }
	        return 'Structure(' + this.signature + ', [' + fieldStr + '])';
	    };
	    return Structure;
	}());
	structure$1.Structure = Structure;
	function verifyStructSize(structName, expectedSize, actualSize) {
	    if (expectedSize !== actualSize) {
	        throw (0, neo4j_driver_core_1$r.newError)("Wrong struct size for ".concat(structName, ", expected ").concat(expectedSize, " but was ").concat(actualSize), PROTOCOL_ERROR$4);
	    }
	}
	structure$1.verifyStructSize = verifyStructSize;
	structure$1.default = Structure;

	Object.defineProperty(packstreamV1, "__esModule", { value: true });
	packstreamV1.Unpacker = packstreamV1.Packer = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var channel_1$2 = channel;
	var lang_1 = lang;
	var structure_1 = structure$1;
	var neo4j_driver_core_1$q = lib$1;
	var PROTOCOL_ERROR$3 = neo4j_driver_core_1$q.error.PROTOCOL_ERROR;
	var TINY_STRING = 0x80;
	var TINY_LIST = 0x90;
	var TINY_MAP = 0xa0;
	var TINY_STRUCT = 0xb0;
	var NULL = 0xc0;
	var FLOAT_64 = 0xc1;
	var FALSE = 0xc2;
	var TRUE = 0xc3;
	var INT_8 = 0xc8;
	var INT_16 = 0xc9;
	var INT_32 = 0xca;
	var INT_64 = 0xcb;
	var STRING_8 = 0xd0;
	var STRING_16 = 0xd1;
	var STRING_32 = 0xd2;
	var LIST_8 = 0xd4;
	var LIST_16 = 0xd5;
	var LIST_32 = 0xd6;
	var BYTES_8 = 0xcc;
	var BYTES_16 = 0xcd;
	var BYTES_32 = 0xce;
	var MAP_8 = 0xd8;
	var MAP_16 = 0xd9;
	var MAP_32 = 0xda;
	var STRUCT_8 = 0xdc;
	var STRUCT_16 = 0xdd;
	/**
	 * Class to pack
	 * @access private
	 */
	var Packer$1 = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {Chunker} channel the chunker backed by a network channel.
	     */
	    function Packer(channel) {
	        this._ch = channel;
	        this._byteArraysSupported = true;
	    }
	    /**
	     * Creates a packable function out of the provided value
	     * @param x the value to pack
	     * @returns Function
	     */
	    Packer.prototype.packable = function (x, dehydrateStruct) {
	        var _this = this;
	        if (dehydrateStruct === void 0) { dehydrateStruct = lang_1.functional.identity; }
	        try {
	            x = dehydrateStruct(x);
	        }
	        catch (ex) {
	            return function () { throw ex; };
	        }
	        if (x === null) {
	            return function () { return _this._ch.writeUInt8(NULL); };
	        }
	        else if (x === true) {
	            return function () { return _this._ch.writeUInt8(TRUE); };
	        }
	        else if (x === false) {
	            return function () { return _this._ch.writeUInt8(FALSE); };
	        }
	        else if (typeof x === 'number') {
	            return function () { return _this.packFloat(x); };
	        }
	        else if (typeof x === 'string') {
	            return function () { return _this.packString(x); };
	        }
	        else if (typeof x === 'bigint') {
	            return function () { return _this.packInteger((0, neo4j_driver_core_1$q.int)(x)); };
	        }
	        else if ((0, neo4j_driver_core_1$q.isInt)(x)) {
	            return function () { return _this.packInteger(x); };
	        }
	        else if (x instanceof Int8Array) {
	            return function () { return _this.packBytes(x); };
	        }
	        else if (x instanceof Array) {
	            return function () {
	                _this.packListHeader(x.length);
	                for (var i = 0; i < x.length; i++) {
	                    _this.packable(x[i] === undefined ? null : x[i], dehydrateStruct)();
	                }
	            };
	        }
	        else if (isIterable(x)) {
	            return this.packableIterable(x, dehydrateStruct);
	        }
	        else if (x instanceof structure_1.Structure) {
	            var packableFields_1 = [];
	            for (var i = 0; i < x.fields.length; i++) {
	                packableFields_1[i] = this.packable(x.fields[i], dehydrateStruct);
	            }
	            return function () { return _this.packStruct(x.signature, packableFields_1); };
	        }
	        else if (typeof x === 'object') {
	            return function () {
	                var keys = Object.keys(x);
	                var count = 0;
	                for (var i = 0; i < keys.length; i++) {
	                    if (x[keys[i]] !== undefined) {
	                        count++;
	                    }
	                }
	                _this.packMapHeader(count);
	                for (var i = 0; i < keys.length; i++) {
	                    var key = keys[i];
	                    if (x[key] !== undefined) {
	                        _this.packString(key);
	                        _this.packable(x[key], dehydrateStruct)();
	                    }
	                }
	            };
	        }
	        else {
	            return this._nonPackableValue("Unable to pack the given value: ".concat(x));
	        }
	    };
	    Packer.prototype.packableIterable = function (iterable, dehydrateStruct) {
	        try {
	            var array = Array.from(iterable);
	            return this.packable(array, dehydrateStruct);
	        }
	        catch (e) {
	            // handle errors from iterable to array conversion
	            throw (0, neo4j_driver_core_1$q.newError)("Cannot pack given iterable, ".concat(e.message, ": ").concat(iterable));
	        }
	    };
	    /**
	     * Packs a struct
	     * @param signature the signature of the struct
	     * @param packableFields the fields of the struct, make sure you call `packable on all fields`
	     */
	    Packer.prototype.packStruct = function (signature, packableFields) {
	        packableFields = packableFields || [];
	        this.packStructHeader(packableFields.length, signature);
	        for (var i = 0; i < packableFields.length; i++) {
	            packableFields[i]();
	        }
	    };
	    Packer.prototype.packInteger = function (x) {
	        var high = x.high;
	        var low = x.low;
	        if (x.greaterThanOrEqual(-0x10) && x.lessThan(0x80)) {
	            this._ch.writeInt8(low);
	        }
	        else if (x.greaterThanOrEqual(-0x80) && x.lessThan(-0x10)) {
	            this._ch.writeUInt8(INT_8);
	            this._ch.writeInt8(low);
	        }
	        else if (x.greaterThanOrEqual(-0x8000) && x.lessThan(0x8000)) {
	            this._ch.writeUInt8(INT_16);
	            this._ch.writeInt16(low);
	        }
	        else if (x.greaterThanOrEqual(-0x80000000) && x.lessThan(0x80000000)) {
	            this._ch.writeUInt8(INT_32);
	            this._ch.writeInt32(low);
	        }
	        else {
	            this._ch.writeUInt8(INT_64);
	            this._ch.writeInt32(high);
	            this._ch.writeInt32(low);
	        }
	    };
	    Packer.prototype.packFloat = function (x) {
	        this._ch.writeUInt8(FLOAT_64);
	        this._ch.writeFloat64(x);
	    };
	    Packer.prototype.packString = function (x) {
	        var bytes = channel_1$2.utf8.encode(x);
	        var size = bytes.length;
	        if (size < 0x10) {
	            this._ch.writeUInt8(TINY_STRING | size);
	            this._ch.writeBytes(bytes);
	        }
	        else if (size < 0x100) {
	            this._ch.writeUInt8(STRING_8);
	            this._ch.writeUInt8(size);
	            this._ch.writeBytes(bytes);
	        }
	        else if (size < 0x10000) {
	            this._ch.writeUInt8(STRING_16);
	            this._ch.writeUInt8((size / 256) >> 0);
	            this._ch.writeUInt8(size % 256);
	            this._ch.writeBytes(bytes);
	        }
	        else if (size < 0x100000000) {
	            this._ch.writeUInt8(STRING_32);
	            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
	            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
	            this._ch.writeUInt8(((size / 256) >> 0) % 256);
	            this._ch.writeUInt8(size % 256);
	            this._ch.writeBytes(bytes);
	        }
	        else {
	            throw (0, neo4j_driver_core_1$q.newError)('UTF-8 strings of size ' + size + ' are not supported');
	        }
	    };
	    Packer.prototype.packListHeader = function (size) {
	        if (size < 0x10) {
	            this._ch.writeUInt8(TINY_LIST | size);
	        }
	        else if (size < 0x100) {
	            this._ch.writeUInt8(LIST_8);
	            this._ch.writeUInt8(size);
	        }
	        else if (size < 0x10000) {
	            this._ch.writeUInt8(LIST_16);
	            this._ch.writeUInt8(((size / 256) >> 0) % 256);
	            this._ch.writeUInt8(size % 256);
	        }
	        else if (size < 0x100000000) {
	            this._ch.writeUInt8(LIST_32);
	            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
	            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
	            this._ch.writeUInt8(((size / 256) >> 0) % 256);
	            this._ch.writeUInt8(size % 256);
	        }
	        else {
	            throw (0, neo4j_driver_core_1$q.newError)('Lists of size ' + size + ' are not supported');
	        }
	    };
	    Packer.prototype.packBytes = function (array) {
	        if (this._byteArraysSupported) {
	            this.packBytesHeader(array.length);
	            for (var i = 0; i < array.length; i++) {
	                this._ch.writeInt8(array[i]);
	            }
	        }
	        else {
	            throw (0, neo4j_driver_core_1$q.newError)('Byte arrays are not supported by the database this driver is connected to');
	        }
	    };
	    Packer.prototype.packBytesHeader = function (size) {
	        if (size < 0x100) {
	            this._ch.writeUInt8(BYTES_8);
	            this._ch.writeUInt8(size);
	        }
	        else if (size < 0x10000) {
	            this._ch.writeUInt8(BYTES_16);
	            this._ch.writeUInt8(((size / 256) >> 0) % 256);
	            this._ch.writeUInt8(size % 256);
	        }
	        else if (size < 0x100000000) {
	            this._ch.writeUInt8(BYTES_32);
	            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
	            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
	            this._ch.writeUInt8(((size / 256) >> 0) % 256);
	            this._ch.writeUInt8(size % 256);
	        }
	        else {
	            throw (0, neo4j_driver_core_1$q.newError)('Byte arrays of size ' + size + ' are not supported');
	        }
	    };
	    Packer.prototype.packMapHeader = function (size) {
	        if (size < 0x10) {
	            this._ch.writeUInt8(TINY_MAP | size);
	        }
	        else if (size < 0x100) {
	            this._ch.writeUInt8(MAP_8);
	            this._ch.writeUInt8(size);
	        }
	        else if (size < 0x10000) {
	            this._ch.writeUInt8(MAP_16);
	            this._ch.writeUInt8((size / 256) >> 0);
	            this._ch.writeUInt8(size % 256);
	        }
	        else if (size < 0x100000000) {
	            this._ch.writeUInt8(MAP_32);
	            this._ch.writeUInt8(((size / 16777216) >> 0) % 256);
	            this._ch.writeUInt8(((size / 65536) >> 0) % 256);
	            this._ch.writeUInt8(((size / 256) >> 0) % 256);
	            this._ch.writeUInt8(size % 256);
	        }
	        else {
	            throw (0, neo4j_driver_core_1$q.newError)('Maps of size ' + size + ' are not supported');
	        }
	    };
	    Packer.prototype.packStructHeader = function (size, signature) {
	        if (size < 0x10) {
	            this._ch.writeUInt8(TINY_STRUCT | size);
	            this._ch.writeUInt8(signature);
	        }
	        else if (size < 0x100) {
	            this._ch.writeUInt8(STRUCT_8);
	            this._ch.writeUInt8(size);
	            this._ch.writeUInt8(signature);
	        }
	        else if (size < 0x10000) {
	            this._ch.writeUInt8(STRUCT_16);
	            this._ch.writeUInt8((size / 256) >> 0);
	            this._ch.writeUInt8(size % 256);
	        }
	        else {
	            throw (0, neo4j_driver_core_1$q.newError)('Structures of size ' + size + ' are not supported');
	        }
	    };
	    Packer.prototype.disableByteArrays = function () {
	        this._byteArraysSupported = false;
	    };
	    Packer.prototype._nonPackableValue = function (message) {
	        return function () {
	            throw (0, neo4j_driver_core_1$q.newError)(message, PROTOCOL_ERROR$3);
	        };
	    };
	    return Packer;
	}());
	packstreamV1.Packer = Packer$1;
	/**
	 * Class to unpack
	 * @access private
	 */
	var Unpacker$1 = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {boolean} disableLosslessIntegers if this unpacker should convert all received integers to native JS numbers.
	     * @param {boolean} useBigInt if this unpacker should convert all received integers to Bigint
	     */
	    function Unpacker(disableLosslessIntegers, useBigInt) {
	        if (disableLosslessIntegers === void 0) { disableLosslessIntegers = false; }
	        if (useBigInt === void 0) { useBigInt = false; }
	        this._disableLosslessIntegers = disableLosslessIntegers;
	        this._useBigInt = useBigInt;
	    }
	    Unpacker.prototype.unpack = function (buffer, hydrateStructure) {
	        if (hydrateStructure === void 0) { hydrateStructure = lang_1.functional.identity; }
	        var marker = buffer.readUInt8();
	        var markerHigh = marker & 0xf0;
	        var markerLow = marker & 0x0f;
	        if (marker === NULL) {
	            return null;
	        }
	        var boolean = this._unpackBoolean(marker);
	        if (boolean !== null) {
	            return boolean;
	        }
	        var numberOrInteger = this._unpackNumberOrInteger(marker, buffer);
	        if (numberOrInteger !== null) {
	            if ((0, neo4j_driver_core_1$q.isInt)(numberOrInteger)) {
	                if (this._useBigInt) {
	                    return numberOrInteger.toBigInt();
	                }
	                else if (this._disableLosslessIntegers) {
	                    return numberOrInteger.toNumberOrInfinity();
	                }
	            }
	            return numberOrInteger;
	        }
	        var string = this._unpackString(marker, markerHigh, markerLow, buffer);
	        if (string !== null) {
	            return string;
	        }
	        var list = this._unpackList(marker, markerHigh, markerLow, buffer, hydrateStructure);
	        if (list !== null) {
	            return list;
	        }
	        var byteArray = this._unpackByteArray(marker, buffer);
	        if (byteArray !== null) {
	            return byteArray;
	        }
	        var map = this._unpackMap(marker, markerHigh, markerLow, buffer, hydrateStructure);
	        if (map !== null) {
	            return map;
	        }
	        var struct = this._unpackStruct(marker, markerHigh, markerLow, buffer, hydrateStructure);
	        if (struct !== null) {
	            return struct;
	        }
	        throw (0, neo4j_driver_core_1$q.newError)('Unknown packed value with marker ' + marker.toString(16));
	    };
	    Unpacker.prototype.unpackInteger = function (buffer) {
	        var marker = buffer.readUInt8();
	        var result = this._unpackInteger(marker, buffer);
	        if (result == null) {
	            throw (0, neo4j_driver_core_1$q.newError)('Unable to unpack integer value with marker ' + marker.toString(16));
	        }
	        return result;
	    };
	    Unpacker.prototype._unpackBoolean = function (marker) {
	        if (marker === TRUE) {
	            return true;
	        }
	        else if (marker === FALSE) {
	            return false;
	        }
	        else {
	            return null;
	        }
	    };
	    Unpacker.prototype._unpackNumberOrInteger = function (marker, buffer) {
	        if (marker === FLOAT_64) {
	            return buffer.readFloat64();
	        }
	        else {
	            return this._unpackInteger(marker, buffer);
	        }
	    };
	    Unpacker.prototype._unpackInteger = function (marker, buffer) {
	        if (marker >= 0 && marker < 128) {
	            return (0, neo4j_driver_core_1$q.int)(marker);
	        }
	        else if (marker >= 240 && marker < 256) {
	            return (0, neo4j_driver_core_1$q.int)(marker - 256);
	        }
	        else if (marker === INT_8) {
	            return (0, neo4j_driver_core_1$q.int)(buffer.readInt8());
	        }
	        else if (marker === INT_16) {
	            return (0, neo4j_driver_core_1$q.int)(buffer.readInt16());
	        }
	        else if (marker === INT_32) {
	            var b = buffer.readInt32();
	            return (0, neo4j_driver_core_1$q.int)(b);
	        }
	        else if (marker === INT_64) {
	            var high = buffer.readInt32();
	            var low = buffer.readInt32();
	            return new neo4j_driver_core_1$q.Integer(low, high);
	        }
	        else {
	            return null;
	        }
	    };
	    Unpacker.prototype._unpackString = function (marker, markerHigh, markerLow, buffer) {
	        if (markerHigh === TINY_STRING) {
	            return channel_1$2.utf8.decode(buffer, markerLow);
	        }
	        else if (marker === STRING_8) {
	            return channel_1$2.utf8.decode(buffer, buffer.readUInt8());
	        }
	        else if (marker === STRING_16) {
	            return channel_1$2.utf8.decode(buffer, buffer.readUInt16());
	        }
	        else if (marker === STRING_32) {
	            return channel_1$2.utf8.decode(buffer, buffer.readUInt32());
	        }
	        else {
	            return null;
	        }
	    };
	    Unpacker.prototype._unpackList = function (marker, markerHigh, markerLow, buffer, hydrateStructure) {
	        if (markerHigh === TINY_LIST) {
	            return this._unpackListWithSize(markerLow, buffer, hydrateStructure);
	        }
	        else if (marker === LIST_8) {
	            return this._unpackListWithSize(buffer.readUInt8(), buffer, hydrateStructure);
	        }
	        else if (marker === LIST_16) {
	            return this._unpackListWithSize(buffer.readUInt16(), buffer, hydrateStructure);
	        }
	        else if (marker === LIST_32) {
	            return this._unpackListWithSize(buffer.readUInt32(), buffer, hydrateStructure);
	        }
	        else {
	            return null;
	        }
	    };
	    Unpacker.prototype._unpackListWithSize = function (size, buffer, hydrateStructure) {
	        var value = [];
	        for (var i = 0; i < size; i++) {
	            value.push(this.unpack(buffer, hydrateStructure));
	        }
	        return value;
	    };
	    Unpacker.prototype._unpackByteArray = function (marker, buffer) {
	        if (marker === BYTES_8) {
	            return this._unpackByteArrayWithSize(buffer.readUInt8(), buffer);
	        }
	        else if (marker === BYTES_16) {
	            return this._unpackByteArrayWithSize(buffer.readUInt16(), buffer);
	        }
	        else if (marker === BYTES_32) {
	            return this._unpackByteArrayWithSize(buffer.readUInt32(), buffer);
	        }
	        else {
	            return null;
	        }
	    };
	    Unpacker.prototype._unpackByteArrayWithSize = function (size, buffer) {
	        var value = new Int8Array(size);
	        for (var i = 0; i < size; i++) {
	            value[i] = buffer.readInt8();
	        }
	        return value;
	    };
	    Unpacker.prototype._unpackMap = function (marker, markerHigh, markerLow, buffer, hydrateStructure) {
	        if (markerHigh === TINY_MAP) {
	            return this._unpackMapWithSize(markerLow, buffer, hydrateStructure);
	        }
	        else if (marker === MAP_8) {
	            return this._unpackMapWithSize(buffer.readUInt8(), buffer, hydrateStructure);
	        }
	        else if (marker === MAP_16) {
	            return this._unpackMapWithSize(buffer.readUInt16(), buffer, hydrateStructure);
	        }
	        else if (marker === MAP_32) {
	            return this._unpackMapWithSize(buffer.readUInt32(), buffer, hydrateStructure);
	        }
	        else {
	            return null;
	        }
	    };
	    Unpacker.prototype._unpackMapWithSize = function (size, buffer, hydrateStructure) {
	        var value = {};
	        for (var i = 0; i < size; i++) {
	            var key = this.unpack(buffer, hydrateStructure);
	            value[key] = this.unpack(buffer, hydrateStructure);
	        }
	        return value;
	    };
	    Unpacker.prototype._unpackStruct = function (marker, markerHigh, markerLow, buffer, hydrateStructure) {
	        if (markerHigh === TINY_STRUCT) {
	            return this._unpackStructWithSize(markerLow, buffer, hydrateStructure);
	        }
	        else if (marker === STRUCT_8) {
	            return this._unpackStructWithSize(buffer.readUInt8(), buffer, hydrateStructure);
	        }
	        else if (marker === STRUCT_16) {
	            return this._unpackStructWithSize(buffer.readUInt16(), buffer, hydrateStructure);
	        }
	        else {
	            return null;
	        }
	    };
	    Unpacker.prototype._unpackStructWithSize = function (structSize, buffer, hydrateStructure) {
	        var signature = buffer.readUInt8();
	        var structure = new structure_1.Structure(signature, []);
	        for (var i = 0; i < structSize; i++) {
	            structure.fields.push(this.unpack(buffer, hydrateStructure));
	        }
	        return hydrateStructure(structure);
	    };
	    return Unpacker;
	}());
	packstreamV1.Unpacker = Unpacker$1;
	function isIterable(obj) {
	    if (obj == null) {
	        return false;
	    }
	    return typeof obj[Symbol.iterator] === 'function';
	}

	var packstreamV2 = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$e = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
	    __setModuleDefault$3(result, mod);
	    return result;
	};
	Object.defineProperty(packstreamV2, "__esModule", { value: true });
	packstreamV2.Unpacker = packstreamV2.Packer = void 0;
	var v1$1 = __importStar$3(packstreamV1);
	var Packer = /** @class */ (function (_super) {
	    __extends$e(Packer, _super);
	    function Packer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Packer.prototype.disableByteArrays = function () {
	        throw new Error('Bolt V2 should always support byte arrays');
	    };
	    return Packer;
	}(v1$1.Packer));
	packstreamV2.Packer = Packer;
	var Unpacker = /** @class */ (function (_super) {
	    __extends$e(Unpacker, _super);
	    /**
	     * @constructor
	     * @param {boolean} disableLosslessIntegers if this unpacker should convert all received integers to native JS numbers.
	     * @param {boolean} useBigInt if this unpacker should convert all received integers to Bigint
	     */
	    function Unpacker(disableLosslessIntegers, useBigInt) {
	        if (disableLosslessIntegers === void 0) { disableLosslessIntegers = false; }
	        if (useBigInt === void 0) { useBigInt = false; }
	        return _super.call(this, disableLosslessIntegers, useBigInt) || this;
	    }
	    return Unpacker;
	}(v1$1.Unpacker));
	packstreamV2.Unpacker = Unpacker;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	    __setModuleDefault$2(result, mod);
	    return result;
	};
	Object.defineProperty(packstream, "__esModule", { value: true });
	packstream.structure = packstream.v2 = packstream.v1 = void 0;
	var v1 = __importStar$2(packstreamV1);
	packstream.v1 = v1;
	var v2 = __importStar$2(packstreamV2);
	packstream.v2 = v2;
	var structure = __importStar$2(structure$1);
	packstream.structure = structure;
	packstream.default = v2;

	var requestMessage = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(requestMessage, "__esModule", { value: true });
	var neo4j_driver_core_1$p = lib$1;
	var _a$8 = neo4j_driver_core_1$p.internal.constants, ACCESS_MODE_READ = _a$8.ACCESS_MODE_READ, FETCH_ALL$2 = _a$8.FETCH_ALL, assertString = neo4j_driver_core_1$p.internal.util.assertString;
	/* eslint-disable no-unused-vars */
	// Signature bytes for each request message type
	var INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>
	var RESET = 0x0f; // 0000 1111 // RESET
	var RUN = 0x10; // 0001 0000 // RUN <query> <parameters>
	var PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL
	var HELLO = 0x01; // 0000 0001 // HELLO <metadata>
	var GOODBYE = 0x02; // 0000 0010 // GOODBYE
	var BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>
	var COMMIT = 0x12; // 0001 0010 // COMMIT
	var ROLLBACK = 0x13; // 0001 0011 // ROLLBACK
	var ROUTE = 0x66; // 0110 0110 // ROUTE
	var DISCARD = 0x2f; // 0010 1111 // DISCARD
	var PULL = 0x3f; // 0011 1111 // PULL
	var READ_MODE = 'r';
	/* eslint-enable no-unused-vars */
	var NO_STATEMENT_ID = -1;
	var RequestMessage = /** @class */ (function () {
	    function RequestMessage(signature, fields, toString) {
	        this.signature = signature;
	        this.fields = fields;
	        this.toString = toString;
	    }
	    /**
	     * Create a new INIT message.
	     * @param {string} clientName the client name.
	     * @param {Object} authToken the authentication token.
	     * @return {RequestMessage} new INIT message.
	     */
	    RequestMessage.init = function (clientName, authToken) {
	        return new RequestMessage(INIT, [clientName, authToken], function () { return "INIT ".concat(clientName, " {...}"); });
	    };
	    /**
	     * Create a new RUN message.
	     * @param {string} query the cypher query.
	     * @param {Object} parameters the query parameters.
	     * @return {RequestMessage} new RUN message.
	     */
	    RequestMessage.run = function (query, parameters) {
	        return new RequestMessage(RUN, [query, parameters], function () { return "RUN ".concat(query, " ").concat(neo4j_driver_core_1$p.json.stringify(parameters)); });
	    };
	    /**
	     * Get a PULL_ALL message.
	     * @return {RequestMessage} the PULL_ALL message.
	     */
	    RequestMessage.pullAll = function () {
	        return PULL_ALL_MESSAGE;
	    };
	    /**
	     * Get a RESET message.
	     * @return {RequestMessage} the RESET message.
	     */
	    RequestMessage.reset = function () {
	        return RESET_MESSAGE;
	    };
	    /**
	     * Create a new HELLO message.
	     * @param {string} userAgent the user agent.
	     * @param {Object} authToken the authentication token.
	     * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)
	     * @return {RequestMessage} new HELLO message.
	     */
	    RequestMessage.hello = function (userAgent, authToken, routing, patchs) {
	        if (routing === void 0) { routing = null; }
	        if (patchs === void 0) { patchs = null; }
	        var metadata = Object.assign({ user_agent: userAgent }, authToken);
	        if (routing) {
	            metadata.routing = routing;
	        }
	        if (patchs) {
	            metadata.patch_bolt = patchs;
	        }
	        return new RequestMessage(HELLO, [metadata], function () { return "HELLO {user_agent: '".concat(userAgent, "', ...}"); });
	    };
	    /**
	     * Create a new BEGIN message.
	     * @param {Bookmarks} bookmarks the bookmarks.
	     * @param {TxConfig} txConfig the configuration.
	     * @param {string} database the database name.
	     * @param {string} mode the access mode.
	     * @param {string} impersonatedUser the impersonated user.
	     * @return {RequestMessage} new BEGIN message.
	     */
	    RequestMessage.begin = function (_a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser;
	        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser);
	        return new RequestMessage(BEGIN, [metadata], function () { return "BEGIN ".concat(neo4j_driver_core_1$p.json.stringify(metadata)); });
	    };
	    /**
	     * Get a COMMIT message.
	     * @return {RequestMessage} the COMMIT message.
	     */
	    RequestMessage.commit = function () {
	        return COMMIT_MESSAGE;
	    };
	    /**
	     * Get a ROLLBACK message.
	     * @return {RequestMessage} the ROLLBACK message.
	     */
	    RequestMessage.rollback = function () {
	        return ROLLBACK_MESSAGE;
	    };
	    /**
	     * Create a new RUN message with additional metadata.
	     * @param {string} query the cypher query.
	     * @param {Object} parameters the query parameters.
	     * @param {Bookmarks} bookmarks the bookmarks.
	     * @param {TxConfig} txConfig the configuration.
	     * @param {string} database the database name.
	     * @param {string} mode the access mode.
	     * @param {string} impersonatedUser the impersonated user.
	     * @return {RequestMessage} new RUN message with additional metadata.
	     */
	    RequestMessage.runWithMetadata = function (query, parameters, _a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser;
	        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser);
	        return new RequestMessage(RUN, [query, parameters, metadata], function () {
	            return "RUN ".concat(query, " ").concat(neo4j_driver_core_1$p.json.stringify(parameters), " ").concat(neo4j_driver_core_1$p.json.stringify(metadata));
	        });
	    };
	    /**
	     * Get a GOODBYE message.
	     * @return {RequestMessage} the GOODBYE message.
	     */
	    RequestMessage.goodbye = function () {
	        return GOODBYE_MESSAGE;
	    };
	    /**
	     * Generates a new PULL message with additional metadata.
	     * @param {Integer|number} stmtId
	     * @param {Integer|number} n
	     * @return {RequestMessage} the PULL message.
	     */
	    RequestMessage.pull = function (_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL$2 : _d;
	        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL$2);
	        return new RequestMessage(PULL, [metadata], function () { return "PULL ".concat(neo4j_driver_core_1$p.json.stringify(metadata)); });
	    };
	    /**
	     * Generates a new DISCARD message with additional metadata.
	     * @param {Integer|number} stmtId
	     * @param {Integer|number} n
	     * @return {RequestMessage} the PULL message.
	     */
	    RequestMessage.discard = function (_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL$2 : _d;
	        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL$2);
	        return new RequestMessage(DISCARD, [metadata], function () { return "DISCARD ".concat(neo4j_driver_core_1$p.json.stringify(metadata)); });
	    };
	    /**
	     * Generate the ROUTE message, this message is used to fetch the routing table from the server
	     *
	     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases
	     * @param {string[]} bookmarks The list of the bookmarks should be used
	     * @param {string} databaseName The name of the database to get the routing table for.
	     * @return {RequestMessage} the ROUTE message.
	     */
	    RequestMessage.route = function (routingContext, bookmarks, databaseName) {
	        if (routingContext === void 0) { routingContext = {}; }
	        if (bookmarks === void 0) { bookmarks = []; }
	        if (databaseName === void 0) { databaseName = null; }
	        return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {
	            return "ROUTE ".concat(neo4j_driver_core_1$p.json.stringify(routingContext), " ").concat(neo4j_driver_core_1$p.json.stringify(bookmarks), " ").concat(databaseName);
	        });
	    };
	    /**
	     * Generate the ROUTE message, this message is used to fetch the routing table from the server
	     *
	     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases
	     * @param {string[]} bookmarks The list of the bookmarks should be used
	     * @param {object} databaseContext The context inforamtion of the database to get the routing table for.
	     * @param {string} databaseContext.databaseName The name of the database to get the routing table.
	     * @param {string} databaseContext.impersonatedUser The name of the user to impersonation when getting the routing table.
	     * @return {RequestMessage} the ROUTE message.
	     */
	    RequestMessage.routeV4x4 = function (routingContext, bookmarks, databaseContext) {
	        if (routingContext === void 0) { routingContext = {}; }
	        if (bookmarks === void 0) { bookmarks = []; }
	        if (databaseContext === void 0) { databaseContext = {}; }
	        var dbContext = {};
	        if (databaseContext.databaseName) {
	            dbContext.db = databaseContext.databaseName;
	        }
	        if (databaseContext.impersonatedUser) {
	            dbContext.imp_user = databaseContext.impersonatedUser;
	        }
	        return new RequestMessage(ROUTE, [routingContext, bookmarks, dbContext], function () {
	            return "ROUTE ".concat(neo4j_driver_core_1$p.json.stringify(routingContext), " ").concat(neo4j_driver_core_1$p.json.stringify(bookmarks), " ").concat(neo4j_driver_core_1$p.json.stringify(dbContext));
	        });
	    };
	    return RequestMessage;
	}());
	requestMessage.default = RequestMessage;
	/**
	 * Create an object that represent transaction metadata.
	 * @param {Bookmarks} bookmarks the bookmarks.
	 * @param {TxConfig} txConfig the configuration.
	 * @param {string} database the database name.
	 * @param {string} mode the access mode.
	 * @param {string} impersonatedUser the impersonated user mode.
	 * @return {Object} a metadata object.
	 */
	function buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser) {
	    var metadata = {};
	    if (!bookmarks.isEmpty()) {
	        metadata.bookmarks = bookmarks.values();
	    }
	    if (txConfig.timeout !== null) {
	        metadata.tx_timeout = txConfig.timeout;
	    }
	    if (txConfig.metadata) {
	        metadata.tx_metadata = txConfig.metadata;
	    }
	    if (database) {
	        metadata.db = assertString(database, 'database');
	    }
	    if (impersonatedUser) {
	        metadata.imp_user = assertString(impersonatedUser, 'impersonatedUser');
	    }
	    if (mode === ACCESS_MODE_READ) {
	        metadata.mode = READ_MODE;
	    }
	    return metadata;
	}
	/**
	 * Create an object that represents streaming metadata.
	 * @param {Integer|number} stmtId The query id to stream its results.
	 * @param {Integer|number} n The number of records to stream.
	 * @returns {Object} a metadata object.
	 */
	function buildStreamMetadata(stmtId, n) {
	    var metadata = { n: (0, neo4j_driver_core_1$p.int)(n) };
	    if (stmtId !== NO_STATEMENT_ID) {
	        metadata.qid = (0, neo4j_driver_core_1$p.int)(stmtId);
	    }
	    return metadata;
	}
	// constants for messages that never change
	var PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () { return 'PULL_ALL'; });
	var RESET_MESSAGE = new RequestMessage(RESET, [], function () { return 'RESET'; });
	var COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () { return 'COMMIT'; });
	var ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () { return 'ROLLBACK'; });
	var GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () { return 'GOODBYE'; });

	var boltProtocolV1_transformer = {};

	var transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(transformer, "__esModule", { value: true });
	transformer.TypeTransformer = void 0;
	var packstream_1$6 = packstream;
	var neo4j_driver_core_1$o = lib$1;
	var objectUtil = neo4j_driver_core_1$o.internal.objectUtil;
	/**
	 * Class responsible for applying the expected {@link TypeTransformer} to
	 * transform the driver types from and to {@link struct.Structure}
	 */
	var Transformer = /** @class */ (function () {
	    /**
	     * Constructor
	     * @param {TypeTransformer[]} transformers The type transformers
	     */
	    function Transformer(transformers) {
	        this._transformers = transformers;
	        this._transformersPerSignature = new Map(transformers.map(function (typeTransformer) { return [typeTransformer.signature, typeTransformer]; }));
	        this.fromStructure = this.fromStructure.bind(this);
	        this.toStructure = this.toStructure.bind(this);
	        Object.freeze(this);
	    }
	    /**
	     * Transform from structure to specific object
	     *
	     * @param {struct.Structure} struct The structure
	     * @returns {<T>|structure.Structure} The driver object or the structure if the transformer was not found.
	     */
	    Transformer.prototype.fromStructure = function (struct) {
	        try {
	            if (struct instanceof packstream_1$6.structure.Structure && this._transformersPerSignature.has(struct.signature)) {
	                var fromStructure = this._transformersPerSignature.get(struct.signature).fromStructure;
	                return fromStructure(struct);
	            }
	            return struct;
	        }
	        catch (error) {
	            return objectUtil.createBrokenObject(error);
	        }
	    };
	    /**
	     * Transform from object to structure
	     * @param {<T>} type The object to be transoformed in structure
	     * @returns {<T>|structure.Structure} The structure or the object, if any transformer was found
	     */
	    Transformer.prototype.toStructure = function (type) {
	        var transformer = this._transformers.find(function (_a) {
	            var isTypeInstance = _a.isTypeInstance;
	            return isTypeInstance(type);
	        });
	        if (transformer !== undefined) {
	            return transformer.toStructure(type);
	        }
	        return type;
	    };
	    return Transformer;
	}());
	transformer.default = Transformer;
	/**
	 * @callback isTypeInstanceFunction
	 * @param {any} object The object
	 * @return {boolean} is instance of
	 */
	/**
	 * @callback toStructureFunction
	 * @param {any} object The object
	 * @return {structure.Structure} The structure
	 */
	/**
	 * @callback fromStructureFunction
	 * @param {structure.Structure} struct The structure
	 * @return {any} The object
	 */
	/**
	 * Class responsible for grouping the properties of a TypeTransformer
	 */
	var TypeTransformer = /** @class */ (function () {
	    /**
	     * @param {Object} param
	     * @param {number} param.signature The signature of the structure
	     * @param {isTypeInstanceFunction} param.isTypeInstance The function which checks if object is
	     *                instance of the type described by the TypeTransformer
	     * @param {toStructureFunction} param.toStructure The function which gets the object and converts to structure
	     * @param {fromStructureFunction} param.fromStructure The function which get the structure and covnverts to object
	     */
	    function TypeTransformer(_a) {
	        var signature = _a.signature, fromStructure = _a.fromStructure, toStructure = _a.toStructure, isTypeInstance = _a.isTypeInstance;
	        this.signature = signature;
	        this.isTypeInstance = isTypeInstance;
	        this.fromStructure = fromStructure;
	        this.toStructure = toStructure;
	        Object.freeze(this);
	    }
	    /**
	     * @param {Object} param
	     * @param {number} [param.signature] The signature of the structure
	     * @param {isTypeInstanceFunction} [param.isTypeInstance] The function which checks if object is
	     *                instance of the type described by the TypeTransformer
	     * @param {toStructureFunction} [param.toStructure] The function which gets the object and converts to structure
	     * @param {fromStructureFunction} pparam.fromStructure] The function which get the structure and covnverts to object
	     * @returns {TypeTransformer} A new type transform extends with new methods
	     */
	    TypeTransformer.prototype.extendsWith = function (_a) {
	        var signature = _a.signature, fromStructure = _a.fromStructure, toStructure = _a.toStructure, isTypeInstance = _a.isTypeInstance;
	        return new TypeTransformer({
	            signature: signature || this.signature,
	            fromStructure: fromStructure || this.fromStructure,
	            toStructure: toStructure || this.toStructure,
	            isTypeInstance: isTypeInstance || this.isTypeInstance
	        });
	    };
	    return TypeTransformer;
	}());
	transformer.TypeTransformer = TypeTransformer;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __read$5 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	Object.defineProperty(boltProtocolV1_transformer, "__esModule", { value: true });
	var neo4j_driver_core_1$n = lib$1;
	var packstream_1$5 = packstream;
	var transformer_1$a = transformer;
	var PROTOCOL_ERROR$2 = neo4j_driver_core_1$n.error.PROTOCOL_ERROR;
	var NODE = 0x4e;
	var NODE_STRUCT_SIZE$1 = 3;
	var RELATIONSHIP = 0x52;
	var RELATIONSHIP_STRUCT_SIZE$1 = 5;
	var UNBOUND_RELATIONSHIP = 0x72;
	var UNBOUND_RELATIONSHIP_STRUCT_SIZE$1 = 3;
	var PATH = 0x50;
	var PATH_STRUCT_SIZE = 3;
	/**
	 * Creates the Node Transformer
	 * @returns {TypeTransformer}
	 */
	function createNodeTransformer$1() {
	    return new transformer_1$a.TypeTransformer({
	        signature: NODE,
	        isTypeInstance: function (object) { return object instanceof neo4j_driver_core_1$n.Node; },
	        toStructure: function (object) {
	            throw (0, neo4j_driver_core_1$n.newError)("It is not allowed to pass nodes in query parameters, given: ".concat(object), PROTOCOL_ERROR$2);
	        },
	        fromStructure: function (struct) {
	            packstream_1$5.structure.verifyStructSize('Node', NODE_STRUCT_SIZE$1, struct.size);
	            var _a = __read$5(struct.fields, 3), identity = _a[0], labels = _a[1], properties = _a[2];
	            return new neo4j_driver_core_1$n.Node(identity, labels, properties);
	        }
	    });
	}
	/**
	 * Creates the Relationship Transformer
	 * @returns {TypeTransformer}
	 */
	function createRelationshipTransformer$1() {
	    return new transformer_1$a.TypeTransformer({
	        signature: RELATIONSHIP,
	        isTypeInstance: function (object) { return object instanceof neo4j_driver_core_1$n.Relationship; },
	        toStructure: function (object) {
	            throw (0, neo4j_driver_core_1$n.newError)("It is not allowed to pass relationships in query parameters, given: ".concat(object), PROTOCOL_ERROR$2);
	        },
	        fromStructure: function (struct) {
	            packstream_1$5.structure.verifyStructSize('Relationship', RELATIONSHIP_STRUCT_SIZE$1, struct.size);
	            var _a = __read$5(struct.fields, 5), identity = _a[0], startNodeIdentity = _a[1], endNodeIdentity = _a[2], type = _a[3], properties = _a[4];
	            return new neo4j_driver_core_1$n.Relationship(identity, startNodeIdentity, endNodeIdentity, type, properties);
	        }
	    });
	}
	/**
	 * Creates the Unbound Relationship Transformer
	 * @returns {TypeTransformer}
	 */
	function createUnboundRelationshipTransformer$1() {
	    return new transformer_1$a.TypeTransformer({
	        signature: UNBOUND_RELATIONSHIP,
	        isTypeInstance: function (object) { return object instanceof neo4j_driver_core_1$n.UnboundRelationship; },
	        toStructure: function (object) {
	            throw (0, neo4j_driver_core_1$n.newError)("It is not allowed to pass unbound relationships in query parameters, given: ".concat(object), PROTOCOL_ERROR$2);
	        },
	        fromStructure: function (struct) {
	            packstream_1$5.structure.verifyStructSize('UnboundRelationship', UNBOUND_RELATIONSHIP_STRUCT_SIZE$1, struct.size);
	            var _a = __read$5(struct.fields, 3), identity = _a[0], type = _a[1], properties = _a[2];
	            return new neo4j_driver_core_1$n.UnboundRelationship(identity, type, properties);
	        }
	    });
	}
	/**
	 * Creates the Path Transformer
	 * @returns {TypeTransformer}
	 */
	function createPathTransformer() {
	    return new transformer_1$a.TypeTransformer({
	        signature: PATH,
	        isTypeInstance: function (object) { return object instanceof neo4j_driver_core_1$n.Path; },
	        toStructure: function (object) {
	            throw (0, neo4j_driver_core_1$n.newError)("It is not allowed to pass paths in query parameters, given: ".concat(object), PROTOCOL_ERROR$2);
	        },
	        fromStructure: function (struct) {
	            packstream_1$5.structure.verifyStructSize('Path', PATH_STRUCT_SIZE, struct.size);
	            var _a = __read$5(struct.fields, 3), nodes = _a[0], rels = _a[1], sequence = _a[2];
	            var segments = [];
	            var prevNode = nodes[0];
	            for (var i = 0; i < sequence.length; i += 2) {
	                var nextNode = nodes[sequence[i + 1]];
	                var relIndex = (0, neo4j_driver_core_1$n.toNumber)(sequence[i]);
	                var rel = void 0;
	                if (relIndex > 0) {
	                    rel = rels[relIndex - 1];
	                    if (rel instanceof neo4j_driver_core_1$n.UnboundRelationship) {
	                        // To avoid duplication, relationships in a path do not contain
	                        // information about their start and end nodes, that's instead
	                        // inferred from the path sequence. This is us inferring (and,
	                        // for performance reasons remembering) the start/end of a rel.
	                        rels[relIndex - 1] = rel = rel.bindTo(prevNode, nextNode);
	                    }
	                }
	                else {
	                    rel = rels[-relIndex - 1];
	                    if (rel instanceof neo4j_driver_core_1$n.UnboundRelationship) {
	                        // See above
	                        rels[-relIndex - 1] = rel = rel.bindTo(nextNode, prevNode);
	                    }
	                }
	                // Done hydrating one path segment.
	                segments.push(new neo4j_driver_core_1$n.PathSegment(prevNode, rel, nextNode));
	                prevNode = nextNode;
	            }
	            return new neo4j_driver_core_1$n.Path(nodes[0], nodes[nodes.length - 1], segments);
	        }
	    });
	}
	boltProtocolV1_transformer.default = {
	    createNodeTransformer: createNodeTransformer$1,
	    createRelationshipTransformer: createRelationshipTransformer$1,
	    createUnboundRelationshipTransformer: createUnboundRelationshipTransformer$1,
	    createPathTransformer: createPathTransformer
	};

	var __importDefault$p = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV1, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_util_1$2 = boltProtocolUtil;
	var packstream_1$4 = packstream;
	var request_message_1$6 = __importDefault$p(requestMessage);
	var stream_observers_1$6 = streamObservers;
	var neo4j_driver_core_1$m = lib$1;
	var bolt_protocol_v1_transformer_1$1 = __importDefault$p(boltProtocolV1_transformer);
	var transformer_1$9 = __importDefault$p(transformer);
	var Bookmarks$3 = neo4j_driver_core_1$m.internal.bookmarks.Bookmarks, _a$7 = neo4j_driver_core_1$m.internal.constants, ACCESS_MODE_WRITE = _a$7.ACCESS_MODE_WRITE, BOLT_PROTOCOL_V1 = _a$7.BOLT_PROTOCOL_V1; neo4j_driver_core_1$m.internal.logger.Logger; var TxConfig$2 = neo4j_driver_core_1$m.internal.txConfig.TxConfig;
	var BoltProtocol$8 = /** @class */ (function () {
	    /**
	     * @callback CreateResponseHandler Creates the response handler
	     * @param {BoltProtocol} protocol The bolt protocol
	     * @returns {ResponseHandler} The response handler
	     */
	    /**
	     * @callback OnProtocolError Handles protocol error
	     * @param {string} error The description
	     */
	    /**
	     * @constructor
	     * @param {Object} server the server informatio.
	     * @param {Chunker} chunker the chunker.
	     * @param {Object} packstreamConfig Packstream configuration
	     * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.
	     * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.
	     * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler
	     * @param {Logger} log the logger
	     * @param {OnProtocolError} onProtocolError handles protocol errors
	     */
	    function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {
	        var _b = _a === void 0 ? {} : _a, disableLosslessIntegers = _b.disableLosslessIntegers, useBigInt = _b.useBigInt;
	        if (createResponseHandler === void 0) { createResponseHandler = function () { return null; }; }
	        this._server = server || {};
	        this._chunker = chunker;
	        this._packer = this._createPacker(chunker);
	        this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);
	        this._responseHandler = createResponseHandler(this);
	        this._log = log;
	        this._onProtocolError = onProtocolError;
	        this._fatalError = null;
	        this._lastMessageSignature = null;
	        this._config = { disableLosslessIntegers: disableLosslessIntegers, useBigInt: useBigInt };
	    }
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$9.default(Object.values(bolt_protocol_v1_transformer_1$1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        /**
	         * Returns the numerical version identifier for this protocol
	         */
	        get: function () {
	            return BOLT_PROTOCOL_V1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Get the packer.
	     * @return {Packer} the protocol's packer.
	     */
	    BoltProtocol.prototype.packer = function () {
	        return this._packer;
	    };
	    /**
	     * Creates a packable function out of the provided value
	     * @param x the value to pack
	     * @returns Function
	     */
	    BoltProtocol.prototype.packable = function (x) {
	        return this._packer.packable(x, this.transformer.toStructure);
	    };
	    /**
	     * Get the unpacker.
	     * @return {Unpacker} the protocol's unpacker.
	     */
	    BoltProtocol.prototype.unpacker = function () {
	        return this._unpacker;
	    };
	    /**
	     * Unpack a buffer
	     * @param {Buffer} buf
	     * @returns {any|null} The unpacked value
	     */
	    BoltProtocol.prototype.unpack = function (buf) {
	        return this._unpacker.unpack(buf, this.transformer.fromStructure);
	    };
	    /**
	     * Transform metadata received in SUCCESS message before it is passed to the handler.
	     * @param {Object} metadata the received metadata.
	     * @return {Object} transformed metadata.
	     */
	    BoltProtocol.prototype.transformMetadata = function (metadata) {
	        return metadata;
	    };
	    /**
	     * Perform initialization and authentication of the underlying connection.
	     * @param {Object} param
	     * @param {string} param.userAgent the user agent.
	     * @param {Object} param.authToken the authentication token.
	     * @param {function(err: Error)} param.onError the callback to invoke on error.
	     * @param {function()} param.onComplete the callback to invoke on completion.
	     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.
	     */
	    BoltProtocol.prototype.initialize = function (_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;
	        var observer = new stream_observers_1$6.LoginObserver({
	            onError: function (error) { return _this._onLoginError(error, onError); },
	            onCompleted: function (metadata) { return _this._onLoginCompleted(metadata, onComplete); }
	        });
	        this.write(request_message_1$6.default.init(userAgent, authToken), observer, true);
	        return observer;
	    };
	    /**
	     * Perform protocol related operations for closing this connection
	     */
	    BoltProtocol.prototype.prepareToClose = function () {
	        // no need to notify the database in this protocol version
	    };
	    /**
	     * Begin an explicit transaction.
	     * @param {Object} param
	     * @param {Bookmarks} param.bookmarks the bookmarks.
	     * @param {TxConfig} param.txConfig the configuration.
	     * @param {string} param.database the target database name.
	     * @param {string} param.mode the access mode.
	     * @param {string} param.impersonatedUser the impersonated user
	     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.
	     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.
	     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.
	     * @param {function()} param.afterComplete the callback to invoke after handling the completion.
	     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.
	     */
	    BoltProtocol.prototype.beginTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        return this.run('BEGIN', bookmarks ? bookmarks.asBeginTransactionParameters() : {}, {
	            bookmarks: bookmarks,
	            txConfig: txConfig,
	            database: database,
	            mode: mode,
	            impersonatedUser: impersonatedUser,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete,
	            flush: false
	        });
	    };
	    /**
	     * Commit the explicit transaction.
	     * @param {Object} param
	     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.
	     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.
	     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.
	     * @param {function()} param.afterComplete the callback to invoke after handling the completion.
	     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.
	     */
	    BoltProtocol.prototype.commitTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        // WRITE access mode is used as a place holder here, it has
	        // no effect on behaviour for Bolt V1 & V2
	        return this.run('COMMIT', {}, {
	            bookmarks: Bookmarks$3.empty(),
	            txConfig: TxConfig$2.empty(),
	            mode: ACCESS_MODE_WRITE,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete
	        });
	    };
	    /**
	     * Rollback the explicit transaction.
	     * @param {Object} param
	     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.
	     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.
	     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.
	     * @param {function()} param.afterComplete the callback to invoke after handling the completion.
	     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.
	     */
	    BoltProtocol.prototype.rollbackTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        // WRITE access mode is used as a place holder here, it has
	        // no effect on behaviour for Bolt V1 & V2
	        return this.run('ROLLBACK', {}, {
	            bookmarks: Bookmarks$3.empty(),
	            txConfig: TxConfig$2.empty(),
	            mode: ACCESS_MODE_WRITE,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete
	        });
	    };
	    /**
	     * Send a Cypher query through the underlying connection.
	     * @param {string} query the cypher query.
	     * @param {Object} parameters the query parameters.
	     * @param {Object} param
	     * @param {Bookmarks} param.bookmarks the bookmarks.
	     * @param {TxConfig} param.txConfig the transaction configuration.
	     * @param {string} param.database the target database name.
	     * @param {string} param.impersonatedUser the impersonated user
	     * @param {string} param.mode the access mode.
	     * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.
	     * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.
	     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.
	     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.
	     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.
	     * @param {function()} param.afterComplete the callback to invoke after handling the completion.
	     * @param {boolean} param.flush whether to flush the buffered messages.
	     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.
	     */
	    BoltProtocol.prototype.run = function (query, parameters, _a) {
	        var _b = _a === void 0 ? {} : _a; _b.bookmarks; var txConfig = _b.txConfig, database = _b.database; _b.mode; var impersonatedUser = _b.impersonatedUser, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.highRecordWatermark, highRecordWatermark = _d === void 0 ? Number.MAX_VALUE : _d, _e = _b.lowRecordWatermark, lowRecordWatermark = _e === void 0 ? Number.MAX_VALUE : _e;
	        var observer = new stream_observers_1$6.ResultStreamObserver({
	            server: this._server,
	            beforeKeys: beforeKeys,
	            afterKeys: afterKeys,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete,
	            highRecordWatermark: highRecordWatermark,
	            lowRecordWatermark: lowRecordWatermark
	        });
	        // bookmarks and mode are ignored in this version of the protocol
	        (0, bolt_protocol_util_1$2.assertTxConfigIsEmpty)(txConfig, this._onProtocolError, observer);
	        // passing in a database name on this protocol version throws an error
	        (0, bolt_protocol_util_1$2.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);
	        // passing impersonated user on this protocol version throws an error
	        (0, bolt_protocol_util_1$2.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
	        this.write(request_message_1$6.default.run(query, parameters), observer, false);
	        this.write(request_message_1$6.default.pullAll(), observer, flush);
	        return observer;
	    };
	    Object.defineProperty(BoltProtocol.prototype, "currentFailure", {
	        get: function () {
	            return this._responseHandler.currentFailure;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Send a RESET through the underlying connection.
	     * @param {Object} param
	     * @param {function(err: Error)} param.onError the callback to invoke on error.
	     * @param {function()} param.onComplete the callback to invoke on completion.
	     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.
	     */
	    BoltProtocol.prototype.reset = function (_a) {
	        var _b = _a === void 0 ? {} : _a, onError = _b.onError, onComplete = _b.onComplete;
	        var observer = new stream_observers_1$6.ResetObserver({
	            onProtocolError: this._onProtocolError,
	            onError: onError,
	            onComplete: onComplete
	        });
	        this.write(request_message_1$6.default.reset(), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype._createPacker = function (chunker) {
	        return new packstream_1$4.v1.Packer(chunker);
	    };
	    BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {
	        return new packstream_1$4.v1.Unpacker(disableLosslessIntegers, useBigInt);
	    };
	    /**
	     * Write a message to the network channel.
	     * @param {RequestMessage} message the message to write.
	     * @param {StreamObserver} observer the response observer.
	     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.
	     */
	    BoltProtocol.prototype.write = function (message, observer, flush) {
	        var queued = this.queueObserverIfProtocolIsNotBroken(observer);
	        if (queued) {
	            if (this._log.isDebugEnabled()) {
	                this._log.debug("C: ".concat(message));
	            }
	            this._lastMessageSignature = message.signature;
	            var messageStruct = new packstream_1$4.structure.Structure(message.signature, message.fields);
	            this.packable(messageStruct)();
	            this._chunker.messageBoundary();
	            if (flush) {
	                this._chunker.flush();
	            }
	        }
	    };
	    BoltProtocol.prototype.isLastMessageLogin = function () {
	        return this._lastMessageSignature === 0x01;
	    };
	    BoltProtocol.prototype.isLastMessageReset = function () {
	        return this._lastMessageSignature === 0x0f;
	    };
	    /**
	     * Notifies faltal erros to the observers and mark the protocol in the fatal error state.
	     * @param {Error} error The error
	     */
	    BoltProtocol.prototype.notifyFatalError = function (error) {
	        this._fatalError = error;
	        return this._responseHandler._notifyErrorToObservers(error);
	    };
	    /**
	     * Updates the the current observer with the next one on the queue.
	     */
	    BoltProtocol.prototype.updateCurrentObserver = function () {
	        return this._responseHandler._updateCurrentObserver();
	    };
	    /**
	     * Checks if exist an ongoing observable requests
	     * @return {boolean}
	     */
	    BoltProtocol.prototype.hasOngoingObservableRequests = function () {
	        return this._responseHandler.hasOngoingObservableRequests();
	    };
	    /**
	     * Enqueue the observer if the protocol is not broken.
	     * In case it's broken, the observer will be notified about the error.
	     *
	     * @param {StreamObserver} observer The observer
	     * @returns {boolean} if it was queued
	     */
	    BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {
	        if (this.isBroken()) {
	            this.notifyFatalErrorToObserver(observer);
	            return false;
	        }
	        return this._responseHandler._queueObserver(observer);
	    };
	    /**
	     * Veritfy the protocol is not broken.
	     * @returns {boolean}
	     */
	    BoltProtocol.prototype.isBroken = function () {
	        return !!this._fatalError;
	    };
	    /**
	     * Notifies the current fatal error to the observer
	     *
	     * @param {StreamObserver} observer The observer
	     */
	    BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {
	        if (observer && observer.onError) {
	            observer.onError(this._fatalError);
	        }
	    };
	    /**
	     * Reset current failure on the observable response handler to null.
	     */
	    BoltProtocol.prototype.resetFailure = function () {
	        this._responseHandler._resetFailure();
	    };
	    BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {
	        if (metadata) {
	            var serverVersion = metadata.server;
	            if (!this._server.version) {
	                this._server.version = serverVersion;
	            }
	        }
	        if (onCompleted) {
	            onCompleted(metadata);
	        }
	    };
	    BoltProtocol.prototype._onLoginError = function (error, onError) {
	        this._onProtocolError(error.message);
	        if (onError) {
	            onError(error);
	        }
	    };
	    return BoltProtocol;
	}());
	boltProtocolV1.default = BoltProtocol$8;

	var boltProtocolV2 = {};

	var boltProtocolV2_transformer = {};

	var temporalFactory = {};

	Object.defineProperty(temporalFactory, "__esModule", { value: true });
	temporalFactory.epochSecondAndNanoToLocalDateTime = temporalFactory.nanoOfDayToLocalTime = temporalFactory.epochDayToDate = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var neo4j_driver_core_1$l = lib$1;
	var _a$6 = neo4j_driver_core_1$l.internal.temporalUtil, DAYS_0000_TO_1970 = _a$6.DAYS_0000_TO_1970, DAYS_PER_400_YEAR_CYCLE = _a$6.DAYS_PER_400_YEAR_CYCLE, NANOS_PER_HOUR = _a$6.NANOS_PER_HOUR, NANOS_PER_MINUTE = _a$6.NANOS_PER_MINUTE, NANOS_PER_SECOND = _a$6.NANOS_PER_SECOND, SECONDS_PER_DAY = _a$6.SECONDS_PER_DAY, floorDiv = _a$6.floorDiv, floorMod = _a$6.floorMod;
	/**
	 * Converts given epoch day to a local date.
	 * @param {Integer|number|string} epochDay the epoch day to convert.
	 * @return {Date} the date representing the epoch day in years, months and days.
	 */
	function epochDayToDate(epochDay) {
	    epochDay = (0, neo4j_driver_core_1$l.int)(epochDay);
	    var zeroDay = epochDay.add(DAYS_0000_TO_1970).subtract(60);
	    var adjust = (0, neo4j_driver_core_1$l.int)(0);
	    if (zeroDay.lessThan(0)) {
	        var adjustCycles = zeroDay
	            .add(1)
	            .div(DAYS_PER_400_YEAR_CYCLE)
	            .subtract(1);
	        adjust = adjustCycles.multiply(400);
	        zeroDay = zeroDay.add(adjustCycles.multiply(-DAYS_PER_400_YEAR_CYCLE));
	    }
	    var year = zeroDay
	        .multiply(400)
	        .add(591)
	        .div(DAYS_PER_400_YEAR_CYCLE);
	    var dayOfYearEst = zeroDay.subtract(year
	        .multiply(365)
	        .add(year.div(4))
	        .subtract(year.div(100))
	        .add(year.div(400)));
	    if (dayOfYearEst.lessThan(0)) {
	        year = year.subtract(1);
	        dayOfYearEst = zeroDay.subtract(year
	            .multiply(365)
	            .add(year.div(4))
	            .subtract(year.div(100))
	            .add(year.div(400)));
	    }
	    year = year.add(adjust);
	    var marchDayOfYear = dayOfYearEst;
	    var marchMonth = marchDayOfYear
	        .multiply(5)
	        .add(2)
	        .div(153);
	    var month = marchMonth
	        .add(2)
	        .modulo(12)
	        .add(1);
	    var day = marchDayOfYear
	        .subtract(marchMonth
	        .multiply(306)
	        .add(5)
	        .div(10))
	        .add(1);
	    year = year.add(marchMonth.div(10));
	    return new neo4j_driver_core_1$l.Date(year, month, day);
	}
	temporalFactory.epochDayToDate = epochDayToDate;
	/**
	 * Converts nanoseconds of the day into local time.
	 * @param {Integer|number|string} nanoOfDay the nanoseconds of the day to convert.
	 * @return {LocalTime} the local time representing given nanoseconds of the day.
	 */
	function nanoOfDayToLocalTime(nanoOfDay) {
	    nanoOfDay = (0, neo4j_driver_core_1$l.int)(nanoOfDay);
	    var hour = nanoOfDay.div(NANOS_PER_HOUR);
	    nanoOfDay = nanoOfDay.subtract(hour.multiply(NANOS_PER_HOUR));
	    var minute = nanoOfDay.div(NANOS_PER_MINUTE);
	    nanoOfDay = nanoOfDay.subtract(minute.multiply(NANOS_PER_MINUTE));
	    var second = nanoOfDay.div(NANOS_PER_SECOND);
	    var nanosecond = nanoOfDay.subtract(second.multiply(NANOS_PER_SECOND));
	    return new neo4j_driver_core_1$l.LocalTime(hour, minute, second, nanosecond);
	}
	temporalFactory.nanoOfDayToLocalTime = nanoOfDayToLocalTime;
	/**
	 * Converts given epoch second and nanosecond adjustment into a local date time object.
	 * @param {Integer|number|string} epochSecond the epoch second to use.
	 * @param {Integer|number|string} nano the nanosecond to use.
	 * @return {LocalDateTime} the local date time representing given epoch second and nano.
	 */
	function epochSecondAndNanoToLocalDateTime(epochSecond, nano) {
	    var epochDay = floorDiv(epochSecond, SECONDS_PER_DAY);
	    var secondsOfDay = floorMod(epochSecond, SECONDS_PER_DAY);
	    var nanoOfDay = secondsOfDay.multiply(NANOS_PER_SECOND).add(nano);
	    var localDate = epochDayToDate(epochDay);
	    var localTime = nanoOfDayToLocalTime(nanoOfDay);
	    return new neo4j_driver_core_1$l.LocalDateTime(localDate.year, localDate.month, localDate.day, localTime.hour, localTime.minute, localTime.second, localTime.nanosecond);
	}
	temporalFactory.epochSecondAndNanoToLocalDateTime = epochSecondAndNanoToLocalDateTime;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$c = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c.apply(this, arguments);
	};
	var __read$4 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __importDefault$o = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV2_transformer, "__esModule", { value: true });
	var neo4j_driver_core_1$k = lib$1;
	var packstream_1$3 = packstream;
	var transformer_1$8 = transformer;
	var temporal_factory_1$1 = temporalFactory;
	var bolt_protocol_v1_transformer_1 = __importDefault$o(boltProtocolV1_transformer);
	var _a$5 = neo4j_driver_core_1$k.internal.temporalUtil, dateToEpochDay = _a$5.dateToEpochDay, localDateTimeToEpochSecond$1 = _a$5.localDateTimeToEpochSecond, localTimeToNanoOfDay = _a$5.localTimeToNanoOfDay;
	var POINT_2D = 0x58;
	var POINT_2D_STRUCT_SIZE = 3;
	var POINT_3D = 0x59;
	var POINT_3D_STRUCT_SIZE = 4;
	var DURATION = 0x45;
	var DURATION_STRUCT_SIZE = 4;
	var LOCAL_TIME = 0x74;
	var LOCAL_TIME_STRUCT_SIZE = 1;
	var TIME = 0x54;
	var TIME_STRUCT_SIZE = 2;
	var DATE = 0x44;
	var DATE_STRUCT_SIZE = 1;
	var LOCAL_DATE_TIME = 0x64;
	var LOCAL_DATE_TIME_STRUCT_SIZE = 2;
	var DATE_TIME_WITH_ZONE_OFFSET$1 = 0x46;
	var DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE$1 = 3;
	var DATE_TIME_WITH_ZONE_ID$1 = 0x66;
	var DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE$1 = 3;
	/**
	 * Creates the Point2D Transformer
	 * @returns {TypeTransformer}
	 */
	function createPoint2DTransformer() {
	    return new transformer_1$8.TypeTransformer({
	        signature: POINT_2D,
	        isTypeInstance: function (point) { return (0, neo4j_driver_core_1$k.isPoint)(point) && (point.z === null || point.z === undefined); },
	        toStructure: function (point) { return new packstream_1$3.structure.Structure(POINT_2D, [
	            (0, neo4j_driver_core_1$k.int)(point.srid),
	            point.x,
	            point.y
	        ]); },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('Point2D', POINT_2D_STRUCT_SIZE, struct.size);
	            var _a = __read$4(struct.fields, 3), srid = _a[0], x = _a[1], y = _a[2];
	            return new neo4j_driver_core_1$k.Point(srid, x, y, undefined // z
	            );
	        }
	    });
	}
	/**
	 * Creates the Point3D Transformer
	 * @returns {TypeTransformer}
	 */
	function createPoint3DTransformer() {
	    return new transformer_1$8.TypeTransformer({
	        signature: POINT_3D,
	        isTypeInstance: function (point) { return (0, neo4j_driver_core_1$k.isPoint)(point) && point.z !== null && point.z !== undefined; },
	        toStructure: function (point) { return new packstream_1$3.structure.Structure(POINT_3D, [
	            (0, neo4j_driver_core_1$k.int)(point.srid),
	            point.x,
	            point.y,
	            point.z
	        ]); },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('Point3D', POINT_3D_STRUCT_SIZE, struct.size);
	            var _a = __read$4(struct.fields, 4), srid = _a[0], x = _a[1], y = _a[2], z = _a[3];
	            return new neo4j_driver_core_1$k.Point(srid, x, y, z);
	        }
	    });
	}
	/**
	 * Creates the Duration Transformer
	 * @returns {TypeTransformer}
	 */
	function createDurationTransformer() {
	    return new transformer_1$8.TypeTransformer({
	        signature: DURATION,
	        isTypeInstance: neo4j_driver_core_1$k.isDuration,
	        toStructure: function (value) {
	            var months = (0, neo4j_driver_core_1$k.int)(value.months);
	            var days = (0, neo4j_driver_core_1$k.int)(value.days);
	            var seconds = (0, neo4j_driver_core_1$k.int)(value.seconds);
	            var nanoseconds = (0, neo4j_driver_core_1$k.int)(value.nanoseconds);
	            return new packstream_1$3.structure.Structure(DURATION, [months, days, seconds, nanoseconds]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('Duration', DURATION_STRUCT_SIZE, struct.size);
	            var _a = __read$4(struct.fields, 4), months = _a[0], days = _a[1], seconds = _a[2], nanoseconds = _a[3];
	            return new neo4j_driver_core_1$k.Duration(months, days, seconds, nanoseconds);
	        }
	    });
	}
	/**
	 * Creates the LocalTime Transformer
	 * @param {Object} param
	 * @param {boolean} param.disableLosslessIntegers Disables lossless integers
	 * @param {boolean} param.useBigInt Uses BigInt instead of number or Integer
	 * @returns {TypeTransformer}
	 */
	function createLocalTimeTransformer(_a) {
	    var disableLosslessIntegers = _a.disableLosslessIntegers, useBigInt = _a.useBigInt;
	    return new transformer_1$8.TypeTransformer({
	        signature: LOCAL_TIME,
	        isTypeInstance: neo4j_driver_core_1$k.isLocalTime,
	        toStructure: function (value) {
	            var nanoOfDay = localTimeToNanoOfDay(value.hour, value.minute, value.second, value.nanosecond);
	            return new packstream_1$3.structure.Structure(LOCAL_TIME, [nanoOfDay]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('LocalTime', LOCAL_TIME_STRUCT_SIZE, struct.size);
	            var _a = __read$4(struct.fields, 1), nanoOfDay = _a[0];
	            var result = (0, temporal_factory_1$1.nanoOfDayToLocalTime)(nanoOfDay);
	            return convertIntegerPropsIfNeeded$1(result, disableLosslessIntegers, useBigInt);
	        }
	    });
	}
	/**
	 * Creates the Time Transformer
	 * @param {Object} param
	 * @param {boolean} param.disableLosslessIntegers Disables lossless integers
	 * @param {boolean} param.useBigInt Uses BigInt instead of number or Integer
	 * @returns {TypeTransformer}
	 */
	function createTimeTransformer(_a) {
	    var disableLosslessIntegers = _a.disableLosslessIntegers, useBigInt = _a.useBigInt;
	    return new transformer_1$8.TypeTransformer({
	        signature: TIME,
	        isTypeInstance: neo4j_driver_core_1$k.isTime,
	        toStructure: function (value) {
	            var nanoOfDay = localTimeToNanoOfDay(value.hour, value.minute, value.second, value.nanosecond);
	            var offsetSeconds = (0, neo4j_driver_core_1$k.int)(value.timeZoneOffsetSeconds);
	            return new packstream_1$3.structure.Structure(TIME, [nanoOfDay, offsetSeconds]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('Time', TIME_STRUCT_SIZE, struct.size);
	            var _a = __read$4(struct.fields, 2), nanoOfDay = _a[0], offsetSeconds = _a[1];
	            var localTime = (0, temporal_factory_1$1.nanoOfDayToLocalTime)(nanoOfDay);
	            var result = new neo4j_driver_core_1$k.Time(localTime.hour, localTime.minute, localTime.second, localTime.nanosecond, offsetSeconds);
	            return convertIntegerPropsIfNeeded$1(result, disableLosslessIntegers, useBigInt);
	        }
	    });
	}
	/**
	 * Creates the Date Transformer
	 * @param {Object} param
	 * @param {boolean} param.disableLosslessIntegers Disables lossless integers
	 * @param {boolean} param.useBigInt Uses BigInt instead of number or Integer
	 * @returns {TypeTransformer}
	 */
	function createDateTransformer(_a) {
	    var disableLosslessIntegers = _a.disableLosslessIntegers, useBigInt = _a.useBigInt;
	    return new transformer_1$8.TypeTransformer({
	        signature: DATE,
	        isTypeInstance: neo4j_driver_core_1$k.isDate,
	        toStructure: function (value) {
	            var epochDay = dateToEpochDay(value.year, value.month, value.day);
	            return new packstream_1$3.structure.Structure(DATE, [epochDay]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('Date', DATE_STRUCT_SIZE, struct.size);
	            var _a = __read$4(struct.fields, 1), epochDay = _a[0];
	            var result = (0, temporal_factory_1$1.epochDayToDate)(epochDay);
	            return convertIntegerPropsIfNeeded$1(result, disableLosslessIntegers, useBigInt);
	        }
	    });
	}
	/**
	 * Creates the LocalDateTime Transformer
	 * @param {Object} param
	 * @param {boolean} param.disableLosslessIntegers Disables lossless integers
	 * @param {boolean} param.useBigInt Uses BigInt instead of number or Integer
	 * @returns {TypeTransformer}
	 */
	function createLocalDateTimeTransformer(_a) {
	    var disableLosslessIntegers = _a.disableLosslessIntegers, useBigInt = _a.useBigInt;
	    return new transformer_1$8.TypeTransformer({
	        signature: LOCAL_DATE_TIME,
	        isTypeInstance: neo4j_driver_core_1$k.isLocalDateTime,
	        toStructure: function (value) {
	            var epochSecond = localDateTimeToEpochSecond$1(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
	            var nano = (0, neo4j_driver_core_1$k.int)(value.nanosecond);
	            return new packstream_1$3.structure.Structure(LOCAL_DATE_TIME, [epochSecond, nano]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('LocalDateTime', LOCAL_DATE_TIME_STRUCT_SIZE, struct.size);
	            var _a = __read$4(struct.fields, 2), epochSecond = _a[0], nano = _a[1];
	            var result = (0, temporal_factory_1$1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
	            return convertIntegerPropsIfNeeded$1(result, disableLosslessIntegers, useBigInt);
	        }
	    });
	}
	/**
	 * Creates the DateTime with ZoneId Transformer
	 * @param {Object} param
	 * @param {boolean} param.disableLosslessIntegers Disables lossless integers
	 * @param {boolean} param.useBigInt Uses BigInt instead of number or Integer
	 * @returns {TypeTransformer}
	 */
	function createDateTimeWithZoneIdTransformer$1(_a) {
	    var disableLosslessIntegers = _a.disableLosslessIntegers, useBigInt = _a.useBigInt;
	    return new transformer_1$8.TypeTransformer({
	        signature: DATE_TIME_WITH_ZONE_ID$1,
	        isTypeInstance: function (object) { return (0, neo4j_driver_core_1$k.isDateTime)(object) && object.timeZoneId != null; },
	        toStructure: function (value) {
	            var epochSecond = localDateTimeToEpochSecond$1(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
	            var nano = (0, neo4j_driver_core_1$k.int)(value.nanosecond);
	            var timeZoneId = value.timeZoneId;
	            return new packstream_1$3.structure.Structure(DATE_TIME_WITH_ZONE_ID$1, [epochSecond, nano, timeZoneId]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('DateTimeWithZoneId', DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE$1, struct.size);
	            var _a = __read$4(struct.fields, 3), epochSecond = _a[0], nano = _a[1], timeZoneId = _a[2];
	            var localDateTime = (0, temporal_factory_1$1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
	            var result = new neo4j_driver_core_1$k.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond, null, timeZoneId);
	            return convertIntegerPropsIfNeeded$1(result, disableLosslessIntegers, useBigInt);
	        }
	    });
	}
	/**
	 * Creates the DateTime with Offset Transformer
	 * @param {Object} param
	 * @param {boolean} param.disableLosslessIntegers Disables lossless integers
	 * @param {boolean} param.useBigInt Uses BigInt instead of number or Integer
	 * @returns {TypeTransformer}
	 */
	function createDateTimeWithOffsetTransformer$1(_a) {
	    var disableLosslessIntegers = _a.disableLosslessIntegers, useBigInt = _a.useBigInt;
	    return new transformer_1$8.TypeTransformer({
	        signature: DATE_TIME_WITH_ZONE_OFFSET$1,
	        isTypeInstance: function (object) { return (0, neo4j_driver_core_1$k.isDateTime)(object) && object.timeZoneId == null; },
	        toStructure: function (value) {
	            var epochSecond = localDateTimeToEpochSecond$1(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
	            var nano = (0, neo4j_driver_core_1$k.int)(value.nanosecond);
	            var timeZoneOffsetSeconds = (0, neo4j_driver_core_1$k.int)(value.timeZoneOffsetSeconds);
	            return new packstream_1$3.structure.Structure(DATE_TIME_WITH_ZONE_OFFSET$1, [epochSecond, nano, timeZoneOffsetSeconds]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$3.structure.verifyStructSize('DateTimeWithZoneOffset', DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE$1, struct.size);
	            var _a = __read$4(struct.fields, 3), epochSecond = _a[0], nano = _a[1], timeZoneOffsetSeconds = _a[2];
	            var localDateTime = (0, temporal_factory_1$1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
	            var result = new neo4j_driver_core_1$k.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond, timeZoneOffsetSeconds, null);
	            return convertIntegerPropsIfNeeded$1(result, disableLosslessIntegers, useBigInt);
	        }
	    });
	}
	function convertIntegerPropsIfNeeded$1(obj, disableLosslessIntegers, useBigInt) {
	    if (!disableLosslessIntegers && !useBigInt) {
	        return obj;
	    }
	    var convert = function (value) {
	        return useBigInt ? value.toBigInt() : value.toNumberOrInfinity();
	    };
	    var clone = Object.create(Object.getPrototypeOf(obj));
	    for (var prop in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, prop) === true) {
	            var value = obj[prop];
	            clone[prop] = (0, neo4j_driver_core_1$k.isInt)(value) ? convert(value) : value;
	        }
	    }
	    Object.freeze(clone);
	    return clone;
	}
	boltProtocolV2_transformer.default = __assign$c(__assign$c({}, bolt_protocol_v1_transformer_1.default), { createPoint2DTransformer: createPoint2DTransformer, createPoint3DTransformer: createPoint3DTransformer, createDurationTransformer: createDurationTransformer, createLocalTimeTransformer: createLocalTimeTransformer, createTimeTransformer: createTimeTransformer, createDateTransformer: createDateTransformer, createLocalDateTimeTransformer: createLocalDateTimeTransformer, createDateTimeWithZoneIdTransformer: createDateTimeWithZoneIdTransformer$1, createDateTimeWithOffsetTransformer: createDateTimeWithOffsetTransformer$1 });

	var __extends$d = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$n = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV2, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v1_1$1 = __importDefault$n(boltProtocolV1);
	var packstream_1$2 = __importDefault$n(packstream);
	var neo4j_driver_core_1$j = lib$1;
	var bolt_protocol_v2_transformer_1$1 = __importDefault$n(boltProtocolV2_transformer);
	var transformer_1$7 = __importDefault$n(transformer);
	var BOLT_PROTOCOL_V2 = neo4j_driver_core_1$j.internal.constants.BOLT_PROTOCOL_V2;
	var BoltProtocol$7 = /** @class */ (function (_super) {
	    __extends$d(BoltProtocol, _super);
	    function BoltProtocol() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BoltProtocol.prototype._createPacker = function (chunker) {
	        return new packstream_1$2.default.Packer(chunker);
	    };
	    BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {
	        return new packstream_1$2.default.Unpacker(disableLosslessIntegers, useBigInt);
	    };
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$7.default(Object.values(bolt_protocol_v2_transformer_1$1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return BoltProtocol;
	}(bolt_protocol_v1_1$1.default));
	boltProtocolV2.default = BoltProtocol$7;

	var boltProtocolV3 = {};

	var boltProtocolV3_transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$b = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b.apply(this, arguments);
	};
	var __importDefault$m = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV3_transformer, "__esModule", { value: true });
	var bolt_protocol_v2_transformer_1 = __importDefault$m(boltProtocolV2_transformer);
	boltProtocolV3_transformer.default = __assign$b({}, bolt_protocol_v2_transformer_1.default);

	var __extends$c = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign$a = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a.apply(this, arguments);
	};
	var __importDefault$l = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV3, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v2_1$1 = __importDefault$l(boltProtocolV2);
	var request_message_1$5 = __importDefault$l(requestMessage);
	var bolt_protocol_util_1$1 = boltProtocolUtil;
	var stream_observers_1$5 = streamObservers;
	var bolt_protocol_v3_transformer_1$1 = __importDefault$l(boltProtocolV3_transformer);
	var transformer_1$6 = __importDefault$l(transformer);
	var neo4j_driver_core_1$i = lib$1;
	neo4j_driver_core_1$i.internal.bookmarks.Bookmarks; var BOLT_PROTOCOL_V3$2 = neo4j_driver_core_1$i.internal.constants.BOLT_PROTOCOL_V3, TxConfig$1 = neo4j_driver_core_1$i.internal.txConfig.TxConfig;
	var CONTEXT$1 = 'context';
	var CALL_GET_ROUTING_TABLE = "CALL dbms.cluster.routing.getRoutingTable($".concat(CONTEXT$1, ")");
	var noOpObserver = new stream_observers_1$5.StreamObserver();
	var BoltProtocol$6 = /** @class */ (function (_super) {
	    __extends$c(BoltProtocol, _super);
	    function BoltProtocol() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V3$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$6.default(Object.values(bolt_protocol_v3_transformer_1$1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BoltProtocol.prototype.transformMetadata = function (metadata) {
	        if ('t_first' in metadata) {
	            // Bolt V3 uses shorter key 't_first' to represent 'result_available_after'
	            // adjust the key to be the same as in Bolt V1 so that ResultSummary can retrieve the value
	            metadata.result_available_after = metadata.t_first;
	            delete metadata.t_first;
	        }
	        if ('t_last' in metadata) {
	            // Bolt V3 uses shorter key 't_last' to represent 'result_consumed_after'
	            // adjust the key to be the same as in Bolt V1 so that ResultSummary can retrieve the value
	            metadata.result_consumed_after = metadata.t_last;
	            delete metadata.t_last;
	        }
	        return metadata;
	    };
	    BoltProtocol.prototype.initialize = function (_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;
	        var observer = new stream_observers_1$5.LoginObserver({
	            onError: function (error) { return _this._onLoginError(error, onError); },
	            onCompleted: function (metadata) { return _this._onLoginCompleted(metadata, onComplete); }
	        });
	        this.write(request_message_1$5.default.hello(userAgent, authToken), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype.prepareToClose = function () {
	        this.write(request_message_1$5.default.goodbye(), noOpObserver, true);
	    };
	    BoltProtocol.prototype.beginTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, mode = _b.mode, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        var observer = new stream_observers_1$5.ResultStreamObserver({
	            server: this._server,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete
	        });
	        observer.prepareToHandleSingleResponse();
	        // passing in a database name on this protocol version throws an error
	        (0, bolt_protocol_util_1$1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);
	        // passing impersonated user on this protocol version throws an error
	        (0, bolt_protocol_util_1$1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
	        this.write(request_message_1$5.default.begin({ bookmarks: bookmarks, txConfig: txConfig, mode: mode }), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype.commitTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        var observer = new stream_observers_1$5.ResultStreamObserver({
	            server: this._server,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete
	        });
	        observer.prepareToHandleSingleResponse();
	        this.write(request_message_1$5.default.commit(), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype.rollbackTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        var observer = new stream_observers_1$5.ResultStreamObserver({
	            server: this._server,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete
	        });
	        observer.prepareToHandleSingleResponse();
	        this.write(request_message_1$5.default.rollback(), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype.run = function (query, parameters, _a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, mode = _b.mode, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.highRecordWatermark, highRecordWatermark = _d === void 0 ? Number.MAX_VALUE : _d, _e = _b.lowRecordWatermark, lowRecordWatermark = _e === void 0 ? Number.MAX_VALUE : _e;
	        var observer = new stream_observers_1$5.ResultStreamObserver({
	            server: this._server,
	            beforeKeys: beforeKeys,
	            afterKeys: afterKeys,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete,
	            highRecordWatermark: highRecordWatermark,
	            lowRecordWatermark: lowRecordWatermark
	        });
	        // passing in a database name on this protocol version throws an error
	        (0, bolt_protocol_util_1$1.assertDatabaseIsEmpty)(database, this._onProtocolError, observer);
	        // passing impersonated user on this protocol version throws an error
	        (0, bolt_protocol_util_1$1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
	        this.write(request_message_1$5.default.runWithMetadata(query, parameters, {
	            bookmarks: bookmarks,
	            txConfig: txConfig,
	            mode: mode
	        }), observer, false);
	        this.write(request_message_1$5.default.pullAll(), observer, flush);
	        return observer;
	    };
	    /**
	     * Request routing information
	     *
	     * @param {Object} param -
	     * @param {object} param.routingContext The routing context used to define the routing table.
	     *  Multi-datacenter deployments is one of its use cases
	     * @param {string} param.databaseName The database name
	     * @param {Bookmarks} params.sessionContext.bookmarks The bookmarks used for requesting the routing table
	     * @param {string} params.sessionContext.mode The session mode
	     * @param {string} params.sessionContext.database The database name used on the session
	     * @param {function()} params.sessionContext.afterComplete The session param used after the session closed
	     * @param {function(err: Error)} param.onError
	     * @param {function(RawRoutingTable)} param.onCompleted
	     * @returns {RouteObserver} the route observer
	     */
	    BoltProtocol.prototype.requestRoutingInformation = function (_a) {
	        var _b;
	        var _c = _a.routingContext, routingContext = _c === void 0 ? {} : _c, _d = _a.sessionContext, sessionContext = _d === void 0 ? {} : _d, onError = _a.onError, onCompleted = _a.onCompleted;
	        var resultObserver = this.run(CALL_GET_ROUTING_TABLE, (_b = {}, _b[CONTEXT$1] = routingContext, _b), __assign$a(__assign$a({}, sessionContext), { txConfig: TxConfig$1.empty() }));
	        return new stream_observers_1$5.ProcedureRouteObserver({
	            resultObserver: resultObserver,
	            onProtocolError: this._onProtocolError,
	            onError: onError,
	            onCompleted: onCompleted
	        });
	    };
	    return BoltProtocol;
	}(bolt_protocol_v2_1$1.default));
	boltProtocolV3.default = BoltProtocol$6;

	var boltProtocolV4x0 = {};

	var boltProtocolV4x0_transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$9 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9.apply(this, arguments);
	};
	var __importDefault$k = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x0_transformer, "__esModule", { value: true });
	var bolt_protocol_v3_transformer_1 = __importDefault$k(boltProtocolV3_transformer);
	boltProtocolV4x0_transformer.default = __assign$9({}, bolt_protocol_v3_transformer_1.default);

	var __extends$b = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign$8 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8.apply(this, arguments);
	};
	var __importDefault$j = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x0, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v3_1$1 = __importDefault$j(boltProtocolV3);
	var request_message_1$4 = __importDefault$j(requestMessage);
	var bolt_protocol_util_1 = boltProtocolUtil;
	var stream_observers_1$4 = streamObservers;
	var bolt_protocol_v4x0_transformer_1$1 = __importDefault$j(boltProtocolV4x0_transformer);
	var transformer_1$5 = __importDefault$j(transformer);
	var neo4j_driver_core_1$h = lib$1;
	neo4j_driver_core_1$h.internal.bookmarks.Bookmarks; var _a$4 = neo4j_driver_core_1$h.internal.constants, BOLT_PROTOCOL_V4_0$2 = _a$4.BOLT_PROTOCOL_V4_0, FETCH_ALL$1 = _a$4.FETCH_ALL, TxConfig = neo4j_driver_core_1$h.internal.txConfig.TxConfig;
	var CONTEXT = 'context';
	var DATABASE = 'database';
	var CALL_GET_ROUTING_TABLE_MULTI_DB = "CALL dbms.routing.getRoutingTable($".concat(CONTEXT, ", $").concat(DATABASE, ")");
	var BoltProtocol$5 = /** @class */ (function (_super) {
	    __extends$b(BoltProtocol, _super);
	    function BoltProtocol() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V4_0$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$5.default(Object.values(bolt_protocol_v4x0_transformer_1$1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BoltProtocol.prototype.beginTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, mode = _b.mode, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        var observer = new stream_observers_1$4.ResultStreamObserver({
	            server: this._server,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete
	        });
	        observer.prepareToHandleSingleResponse();
	        // passing impersonated user on this protocol version throws an error
	        (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
	        this.write(request_message_1$4.default.begin({ bookmarks: bookmarks, txConfig: txConfig, database: database, mode: mode }), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype.run = function (query, parameters, _a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, impersonatedUser = _b.impersonatedUser, mode = _b.mode, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.reactive, reactive = _d === void 0 ? false : _d, _e = _b.fetchSize, fetchSize = _e === void 0 ? FETCH_ALL$1 : _e, _f = _b.highRecordWatermark, highRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, _g = _b.lowRecordWatermark, lowRecordWatermark = _g === void 0 ? Number.MAX_VALUE : _g;
	        var observer = new stream_observers_1$4.ResultStreamObserver({
	            server: this._server,
	            reactive: reactive,
	            fetchSize: fetchSize,
	            moreFunction: this._requestMore.bind(this),
	            discardFunction: this._requestDiscard.bind(this),
	            beforeKeys: beforeKeys,
	            afterKeys: afterKeys,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete,
	            highRecordWatermark: highRecordWatermark,
	            lowRecordWatermark: lowRecordWatermark
	        });
	        // passing impersonated user on this protocol version throws an error
	        (0, bolt_protocol_util_1.assertImpersonatedUserIsEmpty)(impersonatedUser, this._onProtocolError, observer);
	        var flushRun = reactive;
	        this.write(request_message_1$4.default.runWithMetadata(query, parameters, {
	            bookmarks: bookmarks,
	            txConfig: txConfig,
	            database: database,
	            mode: mode
	        }), observer, flushRun && flush);
	        if (!reactive) {
	            this.write(request_message_1$4.default.pull({ n: fetchSize }), observer, flush);
	        }
	        return observer;
	    };
	    BoltProtocol.prototype._requestMore = function (stmtId, n, observer) {
	        this.write(request_message_1$4.default.pull({ stmtId: stmtId, n: n }), observer, true);
	    };
	    BoltProtocol.prototype._requestDiscard = function (stmtId, observer) {
	        this.write(request_message_1$4.default.discard({ stmtId: stmtId }), observer, true);
	    };
	    BoltProtocol.prototype._noOp = function () { };
	    /**
	     * Request routing information
	     *
	     * @param {Object} param -
	     * @param {object} param.routingContext The routing context used to define the routing table.
	     *  Multi-datacenter deployments is one of its use cases
	     * @param {string} param.databaseName The database name
	     * @param {Bookmarks} params.sessionContext.bookmarks The bookmarks used for requesting the routing table
	     * @param {string} params.sessionContext.mode The session mode
	     * @param {string} params.sessionContext.database The database name used on the session
	     * @param {function()} params.sessionContext.afterComplete The session param used after the session closed
	     * @param {function(err: Error)} param.onError
	     * @param {function(RawRoutingTable)} param.onCompleted
	     * @returns {RouteObserver} the route observer
	     */
	    BoltProtocol.prototype.requestRoutingInformation = function (_a) {
	        var _b;
	        var _c = _a.routingContext, routingContext = _c === void 0 ? {} : _c, _d = _a.databaseName, databaseName = _d === void 0 ? null : _d, _e = _a.sessionContext, sessionContext = _e === void 0 ? {} : _e, onError = _a.onError, onCompleted = _a.onCompleted;
	        var resultObserver = this.run(CALL_GET_ROUTING_TABLE_MULTI_DB, (_b = {},
	            _b[CONTEXT] = routingContext,
	            _b[DATABASE] = databaseName,
	            _b), __assign$8(__assign$8({}, sessionContext), { txConfig: TxConfig.empty() }));
	        return new stream_observers_1$4.ProcedureRouteObserver({
	            resultObserver: resultObserver,
	            onProtocolError: this._onProtocolError,
	            onError: onError,
	            onCompleted: onCompleted
	        });
	    };
	    return BoltProtocol;
	}(bolt_protocol_v3_1$1.default));
	boltProtocolV4x0.default = BoltProtocol$5;

	var boltProtocolV4x1 = {};

	var boltProtocolV4x1_transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$7 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7.apply(this, arguments);
	};
	var __importDefault$i = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x1_transformer, "__esModule", { value: true });
	var bolt_protocol_v4x0_transformer_1 = __importDefault$i(boltProtocolV4x0_transformer);
	boltProtocolV4x1_transformer.default = __assign$7({}, bolt_protocol_v4x0_transformer_1.default);

	var __extends$a = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$h = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x1, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v4x0_1$1 = __importDefault$h(boltProtocolV4x0);
	var request_message_1$3 = __importDefault$h(requestMessage);
	var stream_observers_1$3 = streamObservers;
	var neo4j_driver_core_1$g = lib$1;
	var bolt_protocol_v4x1_transformer_1$1 = __importDefault$h(boltProtocolV4x1_transformer);
	var transformer_1$4 = __importDefault$h(transformer);
	var BOLT_PROTOCOL_V4_1 = neo4j_driver_core_1$g.internal.constants.BOLT_PROTOCOL_V4_1;
	var BoltProtocol$4 = /** @class */ (function (_super) {
	    __extends$a(BoltProtocol, _super);
	    /**
	     * @constructor
	     * @param {Object} server the server informatio.
	     * @param {Chunker} chunker the chunker.
	     * @param {Object} packstreamConfig Packstream configuration
	     * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.
	     * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.
	     * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler
	     * @param {Logger} log the logger
	     * @param {Object} serversideRouting
	     *
	     */
	    function BoltProtocol(server, chunker, packstreamConfig, createResponseHandler, log, onProtocolError, serversideRouting) {
	        if (createResponseHandler === void 0) { createResponseHandler = function () { return null; }; }
	        var _this = _super.call(this, server, chunker, packstreamConfig, createResponseHandler, log, onProtocolError) || this;
	        _this._serversideRouting = serversideRouting;
	        return _this;
	    }
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V4_1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$4.default(Object.values(bolt_protocol_v4x1_transformer_1$1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BoltProtocol.prototype.initialize = function (_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;
	        var observer = new stream_observers_1$3.LoginObserver({
	            onError: function (error) { return _this._onLoginError(error, onError); },
	            onCompleted: function (metadata) { return _this._onLoginCompleted(metadata, onComplete); }
	        });
	        this.write(request_message_1$3.default.hello(userAgent, authToken, this._serversideRouting), observer, true);
	        return observer;
	    };
	    return BoltProtocol;
	}(bolt_protocol_v4x0_1$1.default));
	boltProtocolV4x1.default = BoltProtocol$4;

	var boltProtocolV4x2 = {};

	var boltProtocolV4x2_transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$6 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6.apply(this, arguments);
	};
	var __importDefault$g = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x2_transformer, "__esModule", { value: true });
	var bolt_protocol_v4x1_transformer_1 = __importDefault$g(boltProtocolV4x1_transformer);
	boltProtocolV4x2_transformer.default = __assign$6({}, bolt_protocol_v4x1_transformer_1.default);

	var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$f = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x2, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v4x1_1$1 = __importDefault$f(boltProtocolV4x1);
	var neo4j_driver_core_1$f = lib$1;
	var bolt_protocol_v4x2_transformer_1$1 = __importDefault$f(boltProtocolV4x2_transformer);
	var transformer_1$3 = __importDefault$f(transformer);
	var BOLT_PROTOCOL_V4_2 = neo4j_driver_core_1$f.internal.constants.BOLT_PROTOCOL_V4_2;
	var BoltProtocol$3 = /** @class */ (function (_super) {
	    __extends$9(BoltProtocol, _super);
	    function BoltProtocol() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V4_2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$3.default(Object.values(bolt_protocol_v4x2_transformer_1$1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return BoltProtocol;
	}(bolt_protocol_v4x1_1$1.default));
	boltProtocolV4x2.default = BoltProtocol$3;

	var boltProtocolV4x3 = {};

	var boltProtocolV4x3_transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$5 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5.apply(this, arguments);
	};
	var __importDefault$e = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x3_transformer, "__esModule", { value: true });
	var bolt_protocol_v4x2_transformer_1 = __importDefault$e(boltProtocolV4x2_transformer);
	boltProtocolV4x3_transformer.default = __assign$5({}, bolt_protocol_v4x2_transformer_1.default);

	var boltProtocolV5x0_utc_transformer = {};

	var boltProtocolV4x4_transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$4 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4.apply(this, arguments);
	};
	var __importDefault$d = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x4_transformer, "__esModule", { value: true });
	var bolt_protocol_v4x3_transformer_1$1 = __importDefault$d(boltProtocolV4x3_transformer);
	boltProtocolV4x4_transformer.default = __assign$4({}, bolt_protocol_v4x3_transformer_1$1.default);

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __read$3 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __importDefault$c = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV5x0_utc_transformer, "__esModule", { value: true });
	var packstream_1$1 = packstream;
	var neo4j_driver_core_1$e = lib$1;
	var bolt_protocol_v4x4_transformer_1$2 = __importDefault$c(boltProtocolV4x4_transformer);
	var temporal_factory_1 = temporalFactory;
	var functional_1 = functional;
	var localDateTimeToEpochSecond = neo4j_driver_core_1$e.internal.temporalUtil.localDateTimeToEpochSecond;
	var DATE_TIME_WITH_ZONE_OFFSET = 0x49;
	var DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE = 3;
	var DATE_TIME_WITH_ZONE_ID = 0x69;
	var DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE = 3;
	function createDateTimeWithZoneIdTransformer(config, logger) {
	    var disableLosslessIntegers = config.disableLosslessIntegers, useBigInt = config.useBigInt;
	    var dateTimeWithZoneIdTransformer = bolt_protocol_v4x4_transformer_1$2.default.createDateTimeWithZoneIdTransformer(config);
	    return dateTimeWithZoneIdTransformer.extendsWith({
	        signature: DATE_TIME_WITH_ZONE_ID,
	        fromStructure: function (struct) {
	            packstream_1$1.structure.verifyStructSize('DateTimeWithZoneId', DATE_TIME_WITH_ZONE_ID_STRUCT_SIZE, struct.size);
	            var _a = __read$3(struct.fields, 3), epochSecond = _a[0], nano = _a[1], timeZoneId = _a[2];
	            var localDateTime = getTimeInZoneId(timeZoneId, epochSecond, nano);
	            var result = new neo4j_driver_core_1$e.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, (0, neo4j_driver_core_1$e.int)(nano), localDateTime.timeZoneOffsetSeconds, timeZoneId);
	            return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
	        },
	        toStructure: function (value) {
	            var epochSecond = localDateTimeToEpochSecond(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
	            var offset = value.timeZoneOffsetSeconds != null
	                ? value.timeZoneOffsetSeconds
	                : getOffsetFromZoneId(value.timeZoneId, epochSecond, value.nanosecond);
	            if (value.timeZoneOffsetSeconds == null) {
	                logger.warn('DateTime objects without "timeZoneOffsetSeconds" property ' +
	                    'are prune to bugs related to ambiguous times. For instance, ' +
	                    '2022-10-30T2:30:00[Europe/Berlin] could be GMT+1 or GMT+2.');
	            }
	            var utc = epochSecond.subtract(offset);
	            var nano = (0, neo4j_driver_core_1$e.int)(value.nanosecond);
	            var timeZoneId = value.timeZoneId;
	            return new packstream_1$1.structure.Structure(DATE_TIME_WITH_ZONE_ID, [utc, nano, timeZoneId]);
	        }
	    });
	}
	/**
	 * Returns the offset for a given timezone id
	 *
	 * Javascript doesn't have support for direct getting the timezone offset from a given
	 * TimeZoneId and DateTime in the given TimeZoneId. For solving this issue,
	 *
	 * 1. The ZoneId is applied to the timestamp, so we could make the difference between the
	 * given timestamp and the new calculated one. This is the offset for the timezone
	 * in the utc is equal to epoch (some time in the future or past)
	 * 2. The offset is subtracted from the timestamp, so we have an estimated utc timestamp.
	 * 3. The ZoneId is applied to the new timestamp, se we could could make the difference
	 * between the new timestamp and the calculated one. This is the offset for the given timezone.
	 *
	 * Example:
	 *    Input: 2022-3-27 1:59:59 'Europe/Berlin'
	 *    Apply 1, 2022-3-27 1:59:59 => 2022-3-27 3:59:59 'Europe/Berlin' +2:00
	 *    Apply 2, 2022-3-27 1:59:59 - 2:00 => 2022-3-26 23:59:59
	 *    Apply 3, 2022-3-26 23:59:59 => 2022-3-27 00:59:59 'Europe/Berlin' +1:00
	 *  The offset is +1 hour.
	 *
	 * @param {string} timeZoneId The timezone id
	 * @param {Integer} epochSecond The epoch second in the timezone id
	 * @param {Integerable} nanosecond The nanoseconds in the timezone id
	 * @returns The timezone offset
	 */
	function getOffsetFromZoneId(timeZoneId, epochSecond, nanosecond) {
	    var dateTimeWithZoneAppliedTwice = getTimeInZoneId(timeZoneId, epochSecond, nanosecond);
	    // The wallclock form the current date time
	    var epochWithZoneAppliedTwice = localDateTimeToEpochSecond(dateTimeWithZoneAppliedTwice.year, dateTimeWithZoneAppliedTwice.month, dateTimeWithZoneAppliedTwice.day, dateTimeWithZoneAppliedTwice.hour, dateTimeWithZoneAppliedTwice.minute, dateTimeWithZoneAppliedTwice.second, nanosecond);
	    var offsetOfZoneInTheFutureUtc = epochWithZoneAppliedTwice.subtract(epochSecond);
	    var guessedUtc = epochSecond.subtract(offsetOfZoneInTheFutureUtc);
	    var zonedDateTimeFromGuessedUtc = getTimeInZoneId(timeZoneId, guessedUtc, nanosecond);
	    var zonedEpochFromGuessedUtc = localDateTimeToEpochSecond(zonedDateTimeFromGuessedUtc.year, zonedDateTimeFromGuessedUtc.month, zonedDateTimeFromGuessedUtc.day, zonedDateTimeFromGuessedUtc.hour, zonedDateTimeFromGuessedUtc.minute, zonedDateTimeFromGuessedUtc.second, nanosecond);
	    var offset = zonedEpochFromGuessedUtc.subtract(guessedUtc);
	    return offset;
	}
	function getTimeInZoneId(timeZoneId, epochSecond, nano) {
	    var formatter = new Intl.DateTimeFormat('en-US', {
	        timeZone: timeZoneId,
	        year: 'numeric',
	        month: 'numeric',
	        day: 'numeric',
	        hour: 'numeric',
	        minute: 'numeric',
	        second: 'numeric',
	        hour12: false,
	        era: 'narrow'
	    });
	    var utc = (0, neo4j_driver_core_1$e.int)(epochSecond)
	        .multiply(1000)
	        .add((0, neo4j_driver_core_1$e.int)(nano).div(1000000))
	        .toNumber();
	    var formattedUtcParts = formatter.formatToParts(utc);
	    var localDateTime = formattedUtcParts.reduce(function (obj, currentValue) {
	        if (currentValue.type === 'era') {
	            obj.adjustEra =
	                currentValue.value.toUpperCase() === 'B'
	                    ? function (year) { return year.subtract(1).negate(); } // 1BC equals to year 0 in astronomical year numbering
	                    : functional_1.identity;
	        }
	        else if (currentValue.type !== 'literal') {
	            obj[currentValue.type] = (0, neo4j_driver_core_1$e.int)(currentValue.value);
	        }
	        return obj;
	    }, {});
	    localDateTime.year = localDateTime.adjustEra(localDateTime.year);
	    var epochInTimeZone = localDateTimeToEpochSecond(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond);
	    localDateTime.timeZoneOffsetSeconds = epochInTimeZone.subtract(epochSecond);
	    localDateTime.hour = localDateTime.hour.modulo(24);
	    return localDateTime;
	}
	function createDateTimeWithOffsetTransformer(config) {
	    var disableLosslessIntegers = config.disableLosslessIntegers, useBigInt = config.useBigInt;
	    var dateTimeWithOffsetTransformer = bolt_protocol_v4x4_transformer_1$2.default.createDateTimeWithOffsetTransformer(config);
	    return dateTimeWithOffsetTransformer.extendsWith({
	        signature: DATE_TIME_WITH_ZONE_OFFSET,
	        toStructure: function (value) {
	            var epochSecond = localDateTimeToEpochSecond(value.year, value.month, value.day, value.hour, value.minute, value.second, value.nanosecond);
	            var nano = (0, neo4j_driver_core_1$e.int)(value.nanosecond);
	            var timeZoneOffsetSeconds = (0, neo4j_driver_core_1$e.int)(value.timeZoneOffsetSeconds);
	            var utcSecond = epochSecond.subtract(timeZoneOffsetSeconds);
	            return new packstream_1$1.structure.Structure(DATE_TIME_WITH_ZONE_OFFSET, [utcSecond, nano, timeZoneOffsetSeconds]);
	        },
	        fromStructure: function (struct) {
	            packstream_1$1.structure.verifyStructSize('DateTimeWithZoneOffset', DATE_TIME_WITH_ZONE_OFFSET_STRUCT_SIZE, struct.size);
	            var _a = __read$3(struct.fields, 3), utcSecond = _a[0], nano = _a[1], timeZoneOffsetSeconds = _a[2];
	            var epochSecond = (0, neo4j_driver_core_1$e.int)(utcSecond).add(timeZoneOffsetSeconds);
	            var localDateTime = (0, temporal_factory_1.epochSecondAndNanoToLocalDateTime)(epochSecond, nano);
	            var result = new neo4j_driver_core_1$e.DateTime(localDateTime.year, localDateTime.month, localDateTime.day, localDateTime.hour, localDateTime.minute, localDateTime.second, localDateTime.nanosecond, timeZoneOffsetSeconds, null);
	            return convertIntegerPropsIfNeeded(result, disableLosslessIntegers, useBigInt);
	        }
	    });
	}
	function convertIntegerPropsIfNeeded(obj, disableLosslessIntegers, useBigInt) {
	    if (!disableLosslessIntegers && !useBigInt) {
	        return obj;
	    }
	    var convert = function (value) {
	        return useBigInt ? value.toBigInt() : value.toNumberOrInfinity();
	    };
	    var clone = Object.create(Object.getPrototypeOf(obj));
	    for (var prop in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, prop) === true) {
	            var value = obj[prop];
	            clone[prop] = (0, neo4j_driver_core_1$e.isInt)(value) ? convert(value) : value;
	        }
	    }
	    Object.freeze(clone);
	    return clone;
	}
	boltProtocolV5x0_utc_transformer.default = {
	    createDateTimeWithZoneIdTransformer: createDateTimeWithZoneIdTransformer,
	    createDateTimeWithOffsetTransformer: createDateTimeWithOffsetTransformer
	};

	var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign$3 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3.apply(this, arguments);
	};
	var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x3, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v4x2_1$1 = __importDefault$b(boltProtocolV4x2);
	var request_message_1$2 = __importDefault$b(requestMessage);
	var stream_observers_1$2 = streamObservers;
	var bolt_protocol_v4x3_transformer_1 = __importDefault$b(boltProtocolV4x3_transformer);
	var bolt_protocol_v5x0_utc_transformer_1$2 = __importDefault$b(boltProtocolV5x0_utc_transformer);
	var transformer_1$2 = __importDefault$b(transformer);
	var neo4j_driver_core_1$d = lib$1;
	var Bookmarks$2 = neo4j_driver_core_1$d.internal.bookmarks.Bookmarks, BOLT_PROTOCOL_V4_3 = neo4j_driver_core_1$d.internal.constants.BOLT_PROTOCOL_V4_3;
	var BoltProtocol$2 = /** @class */ (function (_super) {
	    __extends$8(BoltProtocol, _super);
	    function BoltProtocol() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V4_3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$2.default(Object.values(bolt_protocol_v4x3_transformer_1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Request routing information
	     *
	     * @param {Object} param -
	     * @param {object} param.routingContext The routing context used to define the routing table.
	     *  Multi-datacenter deployments is one of its use cases
	     * @param {string} param.databaseName The database name
	     * @param {Bookmarks} params.sessionContext.bookmarks The bookmarks used for requesting the routing table
	     * @param {function(err: Error)} param.onError
	     * @param {function(RawRoutingTable)} param.onCompleted
	     * @returns {RouteObserver} the route observer
	     */
	    BoltProtocol.prototype.requestRoutingInformation = function (_a) {
	        var _b = _a.routingContext, routingContext = _b === void 0 ? {} : _b, _c = _a.databaseName, databaseName = _c === void 0 ? null : _c, _d = _a.sessionContext, sessionContext = _d === void 0 ? {} : _d, onError = _a.onError, onCompleted = _a.onCompleted;
	        var observer = new stream_observers_1$2.RouteObserver({
	            onProtocolError: this._onProtocolError,
	            onError: onError,
	            onCompleted: onCompleted
	        });
	        var bookmarks = sessionContext.bookmarks || Bookmarks$2.empty();
	        this.write(request_message_1$2.default.route(routingContext, bookmarks.values(), databaseName), observer, true);
	        return observer;
	    };
	    /**
	     * Initialize a connection with the server
	     *
	     * @param {Object} param0 The params
	     * @param {string} param0.userAgent The user agent
	     * @param {any} param0.authToken The auth token
	     * @param {function(error)} param0.onError On error callback
	     * @param {function(onComplte)} param0.onComplete On complete callback
	     * @returns {LoginObserver} The Login observer
	     */
	    BoltProtocol.prototype.initialize = function (_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;
	        var observer = new stream_observers_1$2.LoginObserver({
	            onError: function (error) { return _this._onLoginError(error, onError); },
	            onCompleted: function (metadata) {
	                if (metadata.patch_bolt !== undefined) {
	                    _this._applyPatches(metadata.patch_bolt);
	                }
	                return _this._onLoginCompleted(metadata, onComplete);
	            }
	        });
	        this.write(request_message_1$2.default.hello(userAgent, authToken, this._serversideRouting, ['utc']), observer, true);
	        return observer;
	    };
	    /**
	     *
	     * @param {string[]} patches Patches to be applied to the protocol
	     */
	    BoltProtocol.prototype._applyPatches = function (patches) {
	        if (patches.includes('utc')) {
	            this._applyUtcPatch();
	        }
	    };
	    BoltProtocol.prototype._applyUtcPatch = function () {
	        var _this = this;
	        this._transformer = new transformer_1$2.default(Object.values(__assign$3(__assign$3({}, bolt_protocol_v4x3_transformer_1.default), bolt_protocol_v5x0_utc_transformer_1$2.default)).map(function (create) { return create(_this._config, _this._log); }));
	    };
	    return BoltProtocol;
	}(bolt_protocol_v4x2_1$1.default));
	boltProtocolV4x3.default = BoltProtocol$2;

	var boltProtocolV4x4 = {};

	var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign$2 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2.apply(this, arguments);
	};
	var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV4x4, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v4x3_1$1 = __importDefault$a(boltProtocolV4x3);
	var neo4j_driver_core_1$c = lib$1;
	var request_message_1$1 = __importDefault$a(requestMessage);
	var stream_observers_1$1 = streamObservers;
	var bolt_protocol_v4x4_transformer_1$1 = __importDefault$a(boltProtocolV4x4_transformer);
	var bolt_protocol_v5x0_utc_transformer_1$1 = __importDefault$a(boltProtocolV5x0_utc_transformer);
	var transformer_1$1 = __importDefault$a(transformer);
	var _a$3 = neo4j_driver_core_1$c.internal.constants, BOLT_PROTOCOL_V4_4$2 = _a$3.BOLT_PROTOCOL_V4_4, FETCH_ALL = _a$3.FETCH_ALL, Bookmarks$1 = neo4j_driver_core_1$c.internal.bookmarks.Bookmarks;
	var BoltProtocol$1 = /** @class */ (function (_super) {
	    __extends$7(BoltProtocol, _super);
	    function BoltProtocol() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V4_4$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1$1.default(Object.values(bolt_protocol_v4x4_transformer_1$1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	    * Request routing information
	    *
	    * @param {Object} param -
	    * @param {object} param.routingContext The routing context used to define the routing table.
	    *  Multi-datacenter deployments is one of its use cases
	    * @param {string} param.databaseName The database name
	    * @param {Bookmarks} params.sessionContext.bookmarks The bookmarks used for requesting the routing table
	    * @param {function(err: Error)} param.onError
	    * @param {function(RawRoutingTable)} param.onCompleted
	    * @returns {RouteObserver} the route observer
	    */
	    BoltProtocol.prototype.requestRoutingInformation = function (_a) {
	        var _b = _a.routingContext, routingContext = _b === void 0 ? {} : _b, _c = _a.databaseName, databaseName = _c === void 0 ? null : _c, _d = _a.impersonatedUser, impersonatedUser = _d === void 0 ? null : _d, _e = _a.sessionContext, sessionContext = _e === void 0 ? {} : _e, onError = _a.onError, onCompleted = _a.onCompleted;
	        var observer = new stream_observers_1$1.RouteObserver({
	            onProtocolError: this._onProtocolError,
	            onError: onError,
	            onCompleted: onCompleted
	        });
	        var bookmarks = sessionContext.bookmarks || Bookmarks$1.empty();
	        this.write(request_message_1$1.default.routeV4x4(routingContext, bookmarks.values(), { databaseName: databaseName, impersonatedUser: impersonatedUser }), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype.run = function (query, parameters, _a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c, _d = _b.reactive, reactive = _d === void 0 ? false : _d, _e = _b.fetchSize, fetchSize = _e === void 0 ? FETCH_ALL : _e, _f = _b.highRecordWatermark, highRecordWatermark = _f === void 0 ? Number.MAX_VALUE : _f, _g = _b.lowRecordWatermark, lowRecordWatermark = _g === void 0 ? Number.MAX_VALUE : _g;
	        var observer = new stream_observers_1$1.ResultStreamObserver({
	            server: this._server,
	            reactive: reactive,
	            fetchSize: fetchSize,
	            moreFunction: this._requestMore.bind(this),
	            discardFunction: this._requestDiscard.bind(this),
	            beforeKeys: beforeKeys,
	            afterKeys: afterKeys,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete,
	            highRecordWatermark: highRecordWatermark,
	            lowRecordWatermark: lowRecordWatermark
	        });
	        var flushRun = reactive;
	        this.write(request_message_1$1.default.runWithMetadata(query, parameters, {
	            bookmarks: bookmarks,
	            txConfig: txConfig,
	            database: database,
	            mode: mode,
	            impersonatedUser: impersonatedUser
	        }), observer, flushRun && flush);
	        if (!reactive) {
	            this.write(request_message_1$1.default.pull({ n: fetchSize }), observer, flush);
	        }
	        return observer;
	    };
	    BoltProtocol.prototype.beginTransaction = function (_a) {
	        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;
	        var observer = new stream_observers_1$1.ResultStreamObserver({
	            server: this._server,
	            beforeError: beforeError,
	            afterError: afterError,
	            beforeComplete: beforeComplete,
	            afterComplete: afterComplete
	        });
	        observer.prepareToHandleSingleResponse();
	        this.write(request_message_1$1.default.begin({ bookmarks: bookmarks, txConfig: txConfig, database: database, mode: mode, impersonatedUser: impersonatedUser }), observer, true);
	        return observer;
	    };
	    BoltProtocol.prototype._applyUtcPatch = function () {
	        var _this = this;
	        this._transformer = new transformer_1$1.default(Object.values(__assign$2(__assign$2({}, bolt_protocol_v4x4_transformer_1$1.default), bolt_protocol_v5x0_utc_transformer_1$1.default)).map(function (create) { return create(_this._config, _this._log); }));
	    };
	    return BoltProtocol;
	}(bolt_protocol_v4x3_1$1.default));
	boltProtocolV4x4.default = BoltProtocol$1;

	var boltProtocolV5x0 = {};

	var boltProtocolV5x0_transformer = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __assign$1 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	var __read$2 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV5x0_transformer, "__esModule", { value: true });
	var packstream_1 = packstream;
	var neo4j_driver_core_1$b = lib$1;
	var bolt_protocol_v4x4_transformer_1 = __importDefault$9(boltProtocolV4x4_transformer);
	var bolt_protocol_v5x0_utc_transformer_1 = __importDefault$9(boltProtocolV5x0_utc_transformer);
	var NODE_STRUCT_SIZE = 4;
	var RELATIONSHIP_STRUCT_SIZE = 8;
	var UNBOUND_RELATIONSHIP_STRUCT_SIZE = 4;
	/**
	 * Create an extend Node transformer with support to elementId
	 * @param {any} config
	 * @returns {TypeTransformer}
	 */
	function createNodeTransformer(config) {
	    var node4x4Transformer = bolt_protocol_v4x4_transformer_1.default.createNodeTransformer(config);
	    return node4x4Transformer.extendsWith({
	        fromStructure: function (struct) {
	            packstream_1.structure.verifyStructSize('Node', NODE_STRUCT_SIZE, struct.size);
	            var _a = __read$2(struct.fields, 4), identity = _a[0], lables = _a[1], properties = _a[2], elementId = _a[3];
	            return new neo4j_driver_core_1$b.Node(identity, lables, properties, elementId);
	        }
	    });
	}
	/**
	 * Create an extend Relationship transformer with support to elementId
	 * @param {any} config
	 * @returns {TypeTransformer}
	 */
	function createRelationshipTransformer(config) {
	    var relationship4x4Transformer = bolt_protocol_v4x4_transformer_1.default.createRelationshipTransformer(config);
	    return relationship4x4Transformer.extendsWith({
	        fromStructure: function (struct) {
	            packstream_1.structure.verifyStructSize('Relationship', RELATIONSHIP_STRUCT_SIZE, struct.size);
	            var _a = __read$2(struct.fields, 8), identity = _a[0], startNodeIdentity = _a[1], endNodeIdentity = _a[2], type = _a[3], properties = _a[4], elementId = _a[5], startNodeElementId = _a[6], endNodeElementId = _a[7];
	            return new neo4j_driver_core_1$b.Relationship(identity, startNodeIdentity, endNodeIdentity, type, properties, elementId, startNodeElementId, endNodeElementId);
	        }
	    });
	}
	/**
	 * Create an extend Unbound Relationship transformer with support to elementId
	 * @param {any} config
	 * @returns {TypeTransformer}
	 */
	function createUnboundRelationshipTransformer(config) {
	    var unboundRelationshipTransformer = bolt_protocol_v4x4_transformer_1.default.createUnboundRelationshipTransformer(config);
	    return unboundRelationshipTransformer.extendsWith({
	        fromStructure: function (struct) {
	            packstream_1.structure.verifyStructSize('UnboundRelationship', UNBOUND_RELATIONSHIP_STRUCT_SIZE, struct.size);
	            var _a = __read$2(struct.fields, 4), identity = _a[0], type = _a[1], properties = _a[2], elementId = _a[3];
	            return new neo4j_driver_core_1$b.UnboundRelationship(identity, type, properties, elementId);
	        }
	    });
	}
	boltProtocolV5x0_transformer.default = __assign$1(__assign$1(__assign$1({}, bolt_protocol_v4x4_transformer_1.default), bolt_protocol_v5x0_utc_transformer_1.default), { createNodeTransformer: createNodeTransformer, createRelationshipTransformer: createRelationshipTransformer, createUnboundRelationshipTransformer: createUnboundRelationshipTransformer });

	var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(boltProtocolV5x0, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var bolt_protocol_v4x4_1$1 = __importDefault$8(boltProtocolV4x4);
	var bolt_protocol_v5x0_transformer_1 = __importDefault$8(boltProtocolV5x0_transformer);
	var transformer_1 = __importDefault$8(transformer);
	var request_message_1 = __importDefault$8(requestMessage);
	var stream_observers_1 = streamObservers;
	var neo4j_driver_core_1$a = lib$1;
	var BOLT_PROTOCOL_V5_0 = neo4j_driver_core_1$a.internal.constants.BOLT_PROTOCOL_V5_0;
	var BoltProtocol = /** @class */ (function (_super) {
	    __extends$6(BoltProtocol, _super);
	    function BoltProtocol() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(BoltProtocol.prototype, "version", {
	        get: function () {
	            return BOLT_PROTOCOL_V5_0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(BoltProtocol.prototype, "transformer", {
	        get: function () {
	            var _this = this;
	            if (this._transformer === undefined) {
	                this._transformer = new transformer_1.default(Object.values(bolt_protocol_v5x0_transformer_1.default).map(function (create) { return create(_this._config, _this._log); }));
	            }
	            return this._transformer;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Initialize a connection with the server
	     *
	     * @param {Object} param0 The params
	     * @param {string} param0.userAgent The user agent
	     * @param {any} param0.authToken The auth token
	     * @param {function(error)} param0.onError On error callback
	     * @param {function(onComplte)} param0.onComplete On complete callback
	     * @returns {LoginObserver} The Login observer
	     */
	    BoltProtocol.prototype.initialize = function (_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;
	        var observer = new stream_observers_1.LoginObserver({
	            onError: function (error) { return _this._onLoginError(error, onError); },
	            onCompleted: function (metadata) { return _this._onLoginCompleted(metadata, onComplete); }
	        });
	        this.write(request_message_1.default.hello(userAgent, authToken, this._serversideRouting), observer, true);
	        return observer;
	    };
	    return BoltProtocol;
	}(bolt_protocol_v4x4_1$1.default));
	boltProtocolV5x0.default = BoltProtocol;

	var responseHandler = {};

	Object.defineProperty(responseHandler, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var neo4j_driver_core_1$9 = lib$1;
	// Signature bytes for each response message type
	var SUCCESS = 0x70; // 0111 0000 // SUCCESS <metadata>
	var RECORD = 0x71; // 0111 0001 // RECORD <value>
	var IGNORED = 0x7e; // 0111 1110 // IGNORED <metadata>
	var FAILURE = 0x7f; // 0111 1111 // FAILURE <metadata>
	function NO_OP() { }
	function NO_OP_IDENTITY(subject) {
	    return subject;
	}
	var NO_OP_OBSERVER = {
	    onNext: NO_OP,
	    onCompleted: NO_OP,
	    onError: NO_OP
	};
	/**
	 * Treat the protocol responses and notify the observers
	 */
	var ResponseHandler = /** @class */ (function () {
	    /**
	     * Called when something went wrong with the connectio
	     * @callback ResponseHandler~Observer~OnErrorApplyTransformation
	     * @param {any} error The error
	     * @returns {any} The new error
	     */
	    /**
	     * Called when something went wrong with the connectio
	     * @callback ResponseHandler~Observer~OnError
	     * @param {any} error The error
	     */
	    /**
	     * Called when something went wrong with the connectio
	     * @callback ResponseHandler~MetadataTransformer
	     * @param {any} metadata The metadata got onSuccess
	     * @returns {any} The transformed metadata
	     */
	    /**
	     * @typedef {Object} ResponseHandler~Observer
	     * @property {ResponseHandler~Observer~OnError} onError Invoke when a connection error occurs
	     * @property {ResponseHandler~Observer~OnError} onFailure Invoke when a protocol failure occurs
	     * @property {ResponseHandler~Observer~OnErrorApplyTransformation} onErrorApplyTransformation Invoke just after the failure occurs,
	     *  before notify to respective observer. This method should transform the failure reason to the approprited one.
	     */
	    /**
	     * Constructor
	     * @param {Object} param The params
	     * @param {ResponseHandler~MetadataTransformer} transformMetadata Transform metadata when the SUCCESS is received.
	     * @param {Channel} channel The channel used to exchange messages
	     * @param {Logger} log The logger
	     * @param {ResponseHandler~Observer} observer Object which will be notified about errors
	     */
	    function ResponseHandler(_a) {
	        var _b = _a === void 0 ? {} : _a, transformMetadata = _b.transformMetadata, log = _b.log, observer = _b.observer;
	        this._pendingObservers = [];
	        this._log = log;
	        this._transformMetadata = transformMetadata || NO_OP_IDENTITY;
	        this._observer = Object.assign({
	            onPendingObserversChange: NO_OP,
	            onError: NO_OP,
	            onFailure: NO_OP,
	            onErrorApplyTransformation: NO_OP_IDENTITY
	        }, observer);
	    }
	    Object.defineProperty(ResponseHandler.prototype, "currentFailure", {
	        get: function () {
	            return this._currentFailure;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    ResponseHandler.prototype.handleResponse = function (msg) {
	        var payload = msg.fields[0];
	        switch (msg.signature) {
	            case RECORD:
	                if (this._log.isDebugEnabled()) {
	                    this._log.debug("S: RECORD ".concat(neo4j_driver_core_1$9.json.stringify(msg)));
	                }
	                this._currentObserver.onNext(payload);
	                break;
	            case SUCCESS:
	                if (this._log.isDebugEnabled()) {
	                    this._log.debug("S: SUCCESS ".concat(neo4j_driver_core_1$9.json.stringify(msg)));
	                }
	                try {
	                    var metadata = this._transformMetadata(payload);
	                    this._currentObserver.onCompleted(metadata);
	                }
	                finally {
	                    this._updateCurrentObserver();
	                }
	                break;
	            case FAILURE:
	                if (this._log.isDebugEnabled()) {
	                    this._log.debug("S: FAILURE ".concat(neo4j_driver_core_1$9.json.stringify(msg)));
	                }
	                try {
	                    var standardizedCode = _standardizeCode(payload.code);
	                    var error = (0, neo4j_driver_core_1$9.newError)(payload.message, standardizedCode);
	                    this._currentFailure = this._observer.onErrorApplyTransformation(error);
	                    this._currentObserver.onError(this._currentFailure);
	                }
	                finally {
	                    this._updateCurrentObserver();
	                    // Things are now broken. Pending observers will get FAILURE messages routed until we are done handling this failure.
	                    this._observer.onFailure(this._currentFailure);
	                }
	                break;
	            case IGNORED:
	                if (this._log.isDebugEnabled()) {
	                    this._log.debug("S: IGNORED ".concat(neo4j_driver_core_1$9.json.stringify(msg)));
	                }
	                try {
	                    if (this._currentFailure && this._currentObserver.onError) {
	                        this._currentObserver.onError(this._currentFailure);
	                    }
	                    else if (this._currentObserver.onError) {
	                        this._currentObserver.onError((0, neo4j_driver_core_1$9.newError)('Ignored either because of an error or RESET'));
	                    }
	                }
	                finally {
	                    this._updateCurrentObserver();
	                }
	                break;
	            default:
	                this._observer.onError((0, neo4j_driver_core_1$9.newError)('Unknown Bolt protocol message: ' + msg));
	        }
	    };
	    /*
	     * Pop next pending observer form the list of observers and make it current observer.
	     * @protected
	     */
	    ResponseHandler.prototype._updateCurrentObserver = function () {
	        this._currentObserver = this._pendingObservers.shift();
	        this._observer.onPendingObserversChange(this._pendingObservers.length);
	    };
	    ResponseHandler.prototype._queueObserver = function (observer) {
	        observer = observer || NO_OP_OBSERVER;
	        observer.onCompleted = observer.onCompleted || NO_OP;
	        observer.onError = observer.onError || NO_OP;
	        observer.onNext = observer.onNext || NO_OP;
	        if (this._currentObserver === undefined) {
	            this._currentObserver = observer;
	        }
	        else {
	            this._pendingObservers.push(observer);
	        }
	        this._observer.onPendingObserversChange(this._pendingObservers.length);
	        return true;
	    };
	    ResponseHandler.prototype._notifyErrorToObservers = function (error) {
	        if (this._currentObserver && this._currentObserver.onError) {
	            this._currentObserver.onError(error);
	        }
	        while (this._pendingObservers.length > 0) {
	            var observer = this._pendingObservers.shift();
	            if (observer && observer.onError) {
	                observer.onError(error);
	            }
	        }
	    };
	    ResponseHandler.prototype.hasOngoingObservableRequests = function () {
	        return this._currentObserver != null || this._pendingObservers.length > 0;
	    };
	    ResponseHandler.prototype._resetFailure = function () {
	        this._currentFailure = null;
	    };
	    return ResponseHandler;
	}());
	responseHandler.default = ResponseHandler;
	/**
	 * Standardize error classification that are different between 5.x and previous versions.
	 *
	 * The transient error were clean-up for being retrieable and because of this
	 * `Terminated` and `LockClientStopped` were reclassified as `ClientError`.
	 *
	 * @param {string} code
	 * @returns {string} the standardized error code
	 */
	function _standardizeCode(code) {
	    if (code === 'Neo.TransientError.Transaction.Terminated') {
	        return 'Neo.ClientError.Transaction.Terminated';
	    }
	    else if (code === 'Neo.TransientError.Transaction.LockClientStopped') {
	        return 'Neo.ClientError.Transaction.LockClientStopped';
	    }
	    return code;
	}

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(create$1, "__esModule", { value: true });
	var neo4j_driver_core_1$8 = lib$1;
	var bolt_protocol_v1_1 = __importDefault$7(boltProtocolV1);
	var bolt_protocol_v2_1 = __importDefault$7(boltProtocolV2);
	var bolt_protocol_v3_1 = __importDefault$7(boltProtocolV3);
	var bolt_protocol_v4x0_1 = __importDefault$7(boltProtocolV4x0);
	var bolt_protocol_v4x1_1 = __importDefault$7(boltProtocolV4x1);
	var bolt_protocol_v4x2_1 = __importDefault$7(boltProtocolV4x2);
	var bolt_protocol_v4x3_1 = __importDefault$7(boltProtocolV4x3);
	var bolt_protocol_v4x4_1 = __importDefault$7(boltProtocolV4x4);
	var bolt_protocol_v5x0_1 = __importDefault$7(boltProtocolV5x0);
	var response_handler_1 = __importDefault$7(responseHandler);
	/**
	 * Creates a protocol with a given version
	 *
	 * @param {object} config
	 * @param {number} config.version The version of the protocol
	 * @param {channel} config.channel The channel
	 * @param {Chunker} config.chunker The chunker
	 * @param {Dechunker} config.dechunker The dechunker
	 * @param {Logger} config.log The logger
	 * @param {ResponseHandler~Observer} config.observer Observer
	 * @param {boolean} config.disableLosslessIntegers Disable the lossless integers
	 * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.
	 * @param {boolean} config.serversideRouting It's using server side routing
	 */
	function create(_a) {
	    var _b = _a === void 0 ? {} : _a, version = _b.version, chunker = _b.chunker, dechunker = _b.dechunker, channel = _b.channel, disableLosslessIntegers = _b.disableLosslessIntegers, useBigInt = _b.useBigInt, serversideRouting = _b.serversideRouting, server = _b.server, // server info
	    log = _b.log, observer = _b.observer;
	    var createResponseHandler = function (protocol) {
	        var responseHandler = new response_handler_1.default({
	            transformMetadata: protocol.transformMetadata.bind(protocol),
	            log: log,
	            observer: observer
	        });
	        // reset the error handler to just handle errors and forget about the handshake promise
	        channel.onerror = observer.onError.bind(observer);
	        // Ok, protocol running. Simply forward all messages to the dechunker
	        channel.onmessage = function (buf) { return dechunker.write(buf); };
	        // setup dechunker to dechunk messages and forward them to the message handler
	        dechunker.onmessage = function (buf) {
	            try {
	                responseHandler.handleResponse(protocol.unpack(buf));
	            }
	            catch (e) {
	                return observer.onError(e);
	            }
	        };
	        return responseHandler;
	    };
	    return createProtocol(version, server, chunker, { disableLosslessIntegers: disableLosslessIntegers, useBigInt: useBigInt }, serversideRouting, createResponseHandler, observer.onProtocolError.bind(observer), log);
	}
	create$1.default = create;
	function createProtocol(version, server, chunker, packingConfig, serversideRouting, createResponseHandler, onProtocolError, log) {
	    switch (version) {
	        case 1:
	            return new bolt_protocol_v1_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
	        case 2:
	            return new bolt_protocol_v2_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
	        case 3:
	            return new bolt_protocol_v3_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
	        case 4.0:
	            return new bolt_protocol_v4x0_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError);
	        case 4.1:
	            return new bolt_protocol_v4x1_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
	        case 4.2:
	            return new bolt_protocol_v4x2_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
	        case 4.3:
	            return new bolt_protocol_v4x3_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
	        case 4.4:
	            return new bolt_protocol_v4x4_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
	        case 5.0:
	            return new bolt_protocol_v5x0_1.default(server, chunker, packingConfig, createResponseHandler, log, onProtocolError, serversideRouting);
	        default:
	            throw (0, neo4j_driver_core_1$8.newError)('Unknown Bolt protocol version: ' + version);
	    }
	}

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.RawRoutingTable = exports.BoltProtocol = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var handshake_1 = __importDefault(handshake$1);
	var create_1 = __importDefault(create$1);
	var bolt_protocol_v4x3_1 = __importDefault(boltProtocolV4x3);
	var routing_table_raw_1 = __importDefault(routingTableRaw);
	__exportStar(streamObservers, exports);
	exports.BoltProtocol = bolt_protocol_v4x3_1.default;
	exports.RawRoutingTable = routing_table_raw_1.default;
	exports.default = {
	    handshake: handshake_1.default,
	    create: create_1.default
	};
	}(bolt));

	var pool$1 = {};

	var poolConfig = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(poolConfig, "__esModule", { value: true });
	poolConfig.DEFAULT_ACQUISITION_TIMEOUT = poolConfig.DEFAULT_MAX_SIZE = void 0;
	var DEFAULT_MAX_SIZE = 100;
	poolConfig.DEFAULT_MAX_SIZE = DEFAULT_MAX_SIZE;
	var DEFAULT_ACQUISITION_TIMEOUT = 60 * 1000; // 60 seconds
	poolConfig.DEFAULT_ACQUISITION_TIMEOUT = DEFAULT_ACQUISITION_TIMEOUT;
	var PoolConfig = /** @class */ (function () {
	    function PoolConfig(maxSize, acquisitionTimeout) {
	        this.maxSize = valueOrDefault(maxSize, DEFAULT_MAX_SIZE);
	        this.acquisitionTimeout = valueOrDefault(acquisitionTimeout, DEFAULT_ACQUISITION_TIMEOUT);
	    }
	    PoolConfig.defaultConfig = function () {
	        return new PoolConfig(DEFAULT_MAX_SIZE, DEFAULT_ACQUISITION_TIMEOUT);
	    };
	    PoolConfig.fromDriverConfig = function (config) {
	        var maxSizeConfigured = isConfigured(config.maxConnectionPoolSize);
	        var maxSize = maxSizeConfigured
	            ? config.maxConnectionPoolSize
	            : DEFAULT_MAX_SIZE;
	        var acquisitionTimeoutConfigured = isConfigured(config.connectionAcquisitionTimeout);
	        var acquisitionTimeout = acquisitionTimeoutConfigured
	            ? config.connectionAcquisitionTimeout
	            : DEFAULT_ACQUISITION_TIMEOUT;
	        return new PoolConfig(maxSize, acquisitionTimeout);
	    };
	    return PoolConfig;
	}());
	poolConfig.default = PoolConfig;
	function valueOrDefault(value, defaultValue) {
	    return value === 0 || value ? value : defaultValue;
	}
	function isConfigured(value) {
	    return value === 0 || value;
	}

	var pool = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __awaiter$4 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$4 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(pool, "__esModule", { value: true });
	var pool_config_1 = __importDefault$6(poolConfig);
	var neo4j_driver_core_1$7 = lib$1;
	var Logger$1 = neo4j_driver_core_1$7.internal.logger.Logger;
	var Pool = /** @class */ (function () {
	    /**
	     * @param {function(address: ServerAddress, function(address: ServerAddress, resource: object): Promise<object>): Promise<object>} create
	     *                an allocation function that creates a promise with a new resource. It's given an address for which to
	     *                allocate the connection and a function that will return the resource to the pool if invoked, which is
	     *                meant to be called on .dispose or .close or whatever mechanism the resource uses to finalize.
	     * @param {function(resource: object): Promise<void>} destroy
	     *                called with the resource when it is evicted from this pool
	     * @param {function(resource: object): boolean} validate
	     *                called at various times (like when an instance is acquired and when it is returned.
	     *                If this returns false, the resource will be evicted
	     * @param {function(resource: object, observer: { onError }): void} installIdleObserver
	     *                called when the resource is released back to pool
	     * @param {function(resource: object): void} removeIdleObserver
	     *                called when the resource is acquired from the pool
	     * @param {PoolConfig} config configuration for the new driver.
	     * @param {Logger} log the driver logger.
	     */
	    function Pool(_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.create, create = _c === void 0 ? function (address, release) { return Promise.resolve(); } : _c, _d = _b.destroy, destroy = _d === void 0 ? function (conn) { return Promise.resolve(); } : _d, _e = _b.validate, validate = _e === void 0 ? function (conn) { return true; } : _e, _f = _b.installIdleObserver, installIdleObserver = _f === void 0 ? function (conn, observer) { } : _f, _g = _b.removeIdleObserver, removeIdleObserver = _g === void 0 ? function (conn) { } : _g, _h = _b.config, config = _h === void 0 ? pool_config_1.default.defaultConfig() : _h, _j = _b.log, log = _j === void 0 ? Logger$1.noOp() : _j;
	        this._create = create;
	        this._destroy = destroy;
	        this._validate = validate;
	        this._installIdleObserver = installIdleObserver;
	        this._removeIdleObserver = removeIdleObserver;
	        this._maxSize = config.maxSize;
	        this._acquisitionTimeout = config.acquisitionTimeout;
	        this._pools = {};
	        this._pendingCreates = {};
	        this._acquireRequests = {};
	        this._activeResourceCounts = {};
	        this._release = this._release.bind(this);
	        this._log = log;
	        this._closed = false;
	    }
	    /**
	     * Acquire and idle resource fom the pool or create a new one.
	     * @param {ServerAddress} address the address for which we're acquiring.
	     * @return {Promise<Object>} resource that is ready to use.
	     */
	    Pool.prototype.acquire = function (address) {
	        var _this = this;
	        var key = address.asKey();
	        // We're out of resources and will try to acquire later on when an existing resource is released.
	        var allRequests = this._acquireRequests;
	        var requests = allRequests[key];
	        if (!requests) {
	            allRequests[key] = [];
	        }
	        return new Promise(function (resolve, reject) {
	            var request = null;
	            var timeoutId = setTimeout(function () {
	                // acquisition timeout fired
	                // remove request from the queue of pending requests, if it's still there
	                // request might've been taken out by the release operation
	                var pendingRequests = allRequests[key];
	                if (pendingRequests) {
	                    allRequests[key] = pendingRequests.filter(function (item) { return item !== request; });
	                }
	                if (request.isCompleted()) ;
	                else {
	                    // request is still pending and needs to be failed
	                    var activeCount = _this.activeResourceCount(address);
	                    var idleCount = _this.has(address) ? _this._pools[key].length : 0;
	                    request.reject((0, neo4j_driver_core_1$7.newError)("Connection acquisition timed out in ".concat(_this._acquisitionTimeout, " ms. Pool status: Active conn count = ").concat(activeCount, ", Idle conn count = ").concat(idleCount, ".")));
	                }
	            }, _this._acquisitionTimeout);
	            request = new PendingRequest(key, resolve, reject, timeoutId, _this._log);
	            allRequests[key].push(request);
	            _this._processPendingAcquireRequests(address);
	        });
	    };
	    /**
	     * Destroy all idle resources for the given address.
	     * @param {ServerAddress} address the address of the server to purge its pool.
	     * @returns {Promise<void>} A promise that is resolved when the resources are purged
	     */
	    Pool.prototype.purge = function (address) {
	        return this._purgeKey(address.asKey());
	    };
	    /**
	     * Destroy all idle resources in this pool.
	     * @returns {Promise<void>} A promise that is resolved when the resources are purged
	     */
	    Pool.prototype.close = function () {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var _this = this;
	            return __generator$4(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        this._closed = true;
	                        return [4 /*yield*/, Promise.all(Object.keys(this._pools).map(function (key) { return _this._purgeKey(key); }))];
	                    case 1: 
	                    /**
	                     * The lack of Promise consuming was making the driver do not close properly in the scenario
	                     * captured at result.test.js:it('should handle missing onCompleted'). The test was timing out
	                     * because while wainting for the driver close.
	                     *
	                     * Consuming the Promise.all or by calling then or by awaiting in the result inside this method solved
	                     * the issue somehow.
	                     *
	                     * PS: the return of this method was already awaited at PooledConnectionProvider.close, but the await bellow
	                     * seems to be need also.
	                     */
	                    return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    /**
	     * Keep the idle resources for the provided addresses and purge the rest.
	     * @returns {Promise<void>} A promise that is resolved when the other resources are purged
	     */
	    Pool.prototype.keepAll = function (addresses) {
	        var _this = this;
	        var keysToKeep = addresses.map(function (a) { return a.asKey(); });
	        var keysPresent = Object.keys(this._pools);
	        var keysToPurge = keysPresent.filter(function (k) { return keysToKeep.indexOf(k) === -1; });
	        return Promise.all(keysToPurge.map(function (key) { return _this._purgeKey(key); }));
	    };
	    /**
	     * Check if this pool contains resources for the given address.
	     * @param {ServerAddress} address the address of the server to check.
	     * @return {boolean} `true` when pool contains entries for the given key, <code>false</code> otherwise.
	     */
	    Pool.prototype.has = function (address) {
	        return address.asKey() in this._pools;
	    };
	    /**
	     * Get count of active (checked out of the pool) resources for the given key.
	     * @param {ServerAddress} address the address of the server to check.
	     * @return {number} count of resources acquired by clients.
	     */
	    Pool.prototype.activeResourceCount = function (address) {
	        return this._activeResourceCounts[address.asKey()] || 0;
	    };
	    Pool.prototype._getOrInitializePoolFor = function (key) {
	        var pool = this._pools[key];
	        if (!pool) {
	            pool = new SingleAddressPool();
	            this._pools[key] = pool;
	            this._pendingCreates[key] = 0;
	        }
	        return pool;
	    };
	    Pool.prototype._acquire = function (address) {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var key, pool, resource_1, numConnections, resource;
	            var _this = this;
	            return __generator$4(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this._closed) {
	                            throw (0, neo4j_driver_core_1$7.newError)('Pool is closed, it is no more able to serve requests.');
	                        }
	                        key = address.asKey();
	                        pool = this._getOrInitializePoolFor(key);
	                        _a.label = 1;
	                    case 1:
	                        if (!pool.length) return [3 /*break*/, 5];
	                        resource_1 = pool.pop();
	                        if (!this._validate(resource_1)) return [3 /*break*/, 2];
	                        if (this._removeIdleObserver) {
	                            this._removeIdleObserver(resource_1);
	                        }
	                        // idle resource is valid and can be acquired
	                        resourceAcquired(key, this._activeResourceCounts);
	                        if (this._log.isDebugEnabled()) {
	                            this._log.debug("".concat(resource_1, " acquired from the pool ").concat(key));
	                        }
	                        return [2 /*return*/, { resource: resource_1, pool: pool }];
	                    case 2: return [4 /*yield*/, this._destroy(resource_1)];
	                    case 3:
	                        _a.sent();
	                        _a.label = 4;
	                    case 4: return [3 /*break*/, 1];
	                    case 5:
	                        // Ensure requested max pool size
	                        if (this._maxSize > 0) {
	                            numConnections = this.activeResourceCount(address) + this._pendingCreates[key];
	                            if (numConnections >= this._maxSize) {
	                                // Will put this request in queue instead since the pool is full
	                                return [2 /*return*/, { resource: null, pool: pool }];
	                            }
	                        }
	                        // there exist no idle valid resources, create a new one for acquisition
	                        // Keep track of how many pending creates there are to avoid making too many connections.
	                        this._pendingCreates[key] = this._pendingCreates[key] + 1;
	                        _a.label = 6;
	                    case 6:
	                        _a.trys.push([6, , 8, 9]);
	                        return [4 /*yield*/, this._create(address, function (address, resource) { return _this._release(address, resource, pool); })];
	                    case 7:
	                        // Invoke callback that creates actual connection
	                        resource = _a.sent();
	                        resourceAcquired(key, this._activeResourceCounts);
	                        if (this._log.isDebugEnabled()) {
	                            this._log.debug("".concat(resource, " created for the pool ").concat(key));
	                        }
	                        return [3 /*break*/, 9];
	                    case 8:
	                        this._pendingCreates[key] = this._pendingCreates[key] - 1;
	                        return [7 /*endfinally*/];
	                    case 9: return [2 /*return*/, { resource: resource, pool: pool }];
	                }
	            });
	        });
	    };
	    Pool.prototype._release = function (address, resource, pool) {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var key;
	            var _this = this;
	            return __generator$4(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        key = address.asKey();
	                        if (!pool.isActive()) return [3 /*break*/, 4];
	                        if (!!this._validate(resource)) return [3 /*break*/, 2];
	                        if (this._log.isDebugEnabled()) {
	                            this._log.debug("".concat(resource, " destroyed and can't be released to the pool ").concat(key, " because it is not functional"));
	                        }
	                        return [4 /*yield*/, this._destroy(resource)];
	                    case 1:
	                        _a.sent();
	                        return [3 /*break*/, 3];
	                    case 2:
	                        if (this._installIdleObserver) {
	                            this._installIdleObserver(resource, {
	                                onError: function (error) {
	                                    _this._log.debug("Idle connection ".concat(resource, " destroyed because of error: ").concat(error));
	                                    var pool = _this._pools[key];
	                                    if (pool) {
	                                        _this._pools[key] = pool.filter(function (r) { return r !== resource; });
	                                    }
	                                    // let's not care about background clean-ups due to errors but just trigger the destroy
	                                    // process for the resource, we especially catch any errors and ignore them to avoid
	                                    // unhandled promise rejection warnings
	                                    _this._destroy(resource).catch(function () { });
	                                }
	                            });
	                        }
	                        pool.push(resource);
	                        if (this._log.isDebugEnabled()) {
	                            this._log.debug("".concat(resource, " released to the pool ").concat(key));
	                        }
	                        _a.label = 3;
	                    case 3: return [3 /*break*/, 6];
	                    case 4:
	                        // key has been purged, don't put it back, just destroy the resource
	                        if (this._log.isDebugEnabled()) {
	                            this._log.debug("".concat(resource, " destroyed and can't be released to the pool ").concat(key, " because pool has been purged"));
	                        }
	                        return [4 /*yield*/, this._destroy(resource)];
	                    case 5:
	                        _a.sent();
	                        _a.label = 6;
	                    case 6:
	                        resourceReleased(key, this._activeResourceCounts);
	                        this._processPendingAcquireRequests(address);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Pool.prototype._purgeKey = function (key) {
	        return __awaiter$4(this, void 0, void 0, function () {
	            var pool, destructionList, resource;
	            return __generator$4(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        pool = this._pools[key];
	                        destructionList = [];
	                        if (!pool) return [3 /*break*/, 2];
	                        while (pool.length) {
	                            resource = pool.pop();
	                            if (this._removeIdleObserver) {
	                                this._removeIdleObserver(resource);
	                            }
	                            destructionList.push(this._destroy(resource));
	                        }
	                        pool.close();
	                        delete this._pools[key];
	                        return [4 /*yield*/, Promise.all(destructionList)];
	                    case 1:
	                        _a.sent();
	                        _a.label = 2;
	                    case 2: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    Pool.prototype._processPendingAcquireRequests = function (address) {
	        var _this = this;
	        var key = address.asKey();
	        var requests = this._acquireRequests[key];
	        if (requests) {
	            var pendingRequest_1 = requests.shift(); // pop a pending acquire request
	            if (pendingRequest_1) {
	                this._acquire(address)
	                    .catch(function (error) {
	                    // failed to acquire/create a new connection to resolve the pending acquire request
	                    // propagate the error by failing the pending request
	                    pendingRequest_1.reject(error);
	                    return { resource: null };
	                })
	                    .then(function (_a) {
	                    var resource = _a.resource, pool = _a.pool;
	                    if (resource) {
	                        // managed to acquire a valid resource from the pool
	                        if (pendingRequest_1.isCompleted()) {
	                            // request has been completed, most likely failed by a timeout
	                            // return the acquired resource back to the pool
	                            _this._release(address, resource, pool);
	                        }
	                        else {
	                            // request is still pending and can be resolved with the newly acquired resource
	                            pendingRequest_1.resolve(resource); // resolve the pending request with the acquired resource
	                        }
	                    }
	                    else {
	                        // failed to acquire a valid resource from the pool
	                        // return the pending request back to the pool
	                        if (!pendingRequest_1.isCompleted()) {
	                            if (!_this._acquireRequests[key]) {
	                                _this._acquireRequests[key] = [];
	                            }
	                            _this._acquireRequests[key].unshift(pendingRequest_1);
	                        }
	                    }
	                });
	            }
	            else {
	                delete this._acquireRequests[key];
	            }
	        }
	    };
	    return Pool;
	}());
	/**
	 * Increment active (checked out of the pool) resource counter.
	 * @param {string} key the resource group identifier (server address for connections).
	 * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.
	 */
	function resourceAcquired(key, activeResourceCounts) {
	    var currentCount = activeResourceCounts[key] || 0;
	    activeResourceCounts[key] = currentCount + 1;
	}
	/**
	 * Decrement active (checked out of the pool) resource counter.
	 * @param {string} key the resource group identifier (server address for connections).
	 * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.
	 */
	function resourceReleased(key, activeResourceCounts) {
	    var currentCount = activeResourceCounts[key] || 0;
	    var nextCount = currentCount - 1;
	    if (nextCount > 0) {
	        activeResourceCounts[key] = nextCount;
	    }
	    else {
	        delete activeResourceCounts[key];
	    }
	}
	var PendingRequest = /** @class */ (function () {
	    function PendingRequest(key, resolve, reject, timeoutId, log) {
	        this._key = key;
	        this._resolve = resolve;
	        this._reject = reject;
	        this._timeoutId = timeoutId;
	        this._log = log;
	        this._completed = false;
	    }
	    PendingRequest.prototype.isCompleted = function () {
	        return this._completed;
	    };
	    PendingRequest.prototype.resolve = function (resource) {
	        if (this._completed) {
	            return;
	        }
	        this._completed = true;
	        clearTimeout(this._timeoutId);
	        if (this._log.isDebugEnabled()) {
	            this._log.debug("".concat(resource, " acquired from the pool ").concat(this._key));
	        }
	        this._resolve(resource);
	    };
	    PendingRequest.prototype.reject = function (error) {
	        if (this._completed) {
	            return;
	        }
	        this._completed = true;
	        clearTimeout(this._timeoutId);
	        this._reject(error);
	    };
	    return PendingRequest;
	}());
	var SingleAddressPool = /** @class */ (function () {
	    function SingleAddressPool() {
	        this._active = true;
	        this._elements = [];
	    }
	    SingleAddressPool.prototype.isActive = function () {
	        return this._active;
	    };
	    SingleAddressPool.prototype.close = function () {
	        this._active = false;
	    };
	    SingleAddressPool.prototype.filter = function (predicate) {
	        this._elements = this._elements.filter(predicate);
	        return this;
	    };
	    Object.defineProperty(SingleAddressPool.prototype, "length", {
	        get: function () {
	            return this._elements.length;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    SingleAddressPool.prototype.pop = function () {
	        return this._elements.pop();
	    };
	    SingleAddressPool.prototype.push = function (element) {
	        return this._elements.push(element);
	    };
	    return SingleAddressPool;
	}());
	pool.default = Pool;

	(function (exports) {
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DEFAULT_MAX_SIZE = exports.DEFAULT_ACQUISITION_TIMEOUT = exports.PoolConfig = exports.Pool = void 0;
	var pool_config_1 = __importStar(poolConfig);
	exports.PoolConfig = pool_config_1.default;
	Object.defineProperty(exports, "DEFAULT_ACQUISITION_TIMEOUT", { enumerable: true, get: function () { return pool_config_1.DEFAULT_ACQUISITION_TIMEOUT; } });
	Object.defineProperty(exports, "DEFAULT_MAX_SIZE", { enumerable: true, get: function () { return pool_config_1.DEFAULT_MAX_SIZE; } });
	var pool_1 = __importDefault(pool);
	exports.Pool = pool_1.default;
	exports.default = pool_1.default;
	}(pool$1));

	var connectionProvider = {};

	var connectionProviderSingle = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(connectionProviderSingle, "__esModule", { value: true });
	var neo4j_driver_core_1$6 = lib$1;
	var SingleConnectionProvider = /** @class */ (function (_super) {
	    __extends$5(SingleConnectionProvider, _super);
	    function SingleConnectionProvider(connection) {
	        var _this = _super.call(this) || this;
	        _this._connection = connection;
	        return _this;
	    }
	    /**
	     * See {@link ConnectionProvider} for more information about this method and
	     * its arguments.
	     */
	    SingleConnectionProvider.prototype.acquireConnection = function (_a) {
	        var _b = _a === void 0 ? {} : _a; _b.accessMode; _b.database; _b.bookmarks;
	        var connection = this._connection;
	        this._connection = null;
	        return Promise.resolve(connection);
	    };
	    return SingleConnectionProvider;
	}(neo4j_driver_core_1$6.ConnectionProvider));
	connectionProviderSingle.default = SingleConnectionProvider;

	var connectionProviderPooled = {};

	var connection$1 = {};

	var connection = {};

	Object.defineProperty(connection, "__esModule", { value: true });
	var Connection = /** @class */ (function () {
	    /**
	     * @param {ConnectionErrorHandler} errorHandler the error handler
	     */
	    function Connection(errorHandler) {
	        this._errorHandler = errorHandler;
	    }
	    Object.defineProperty(Connection.prototype, "id", {
	        get: function () {
	            throw new Error('not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Connection.prototype, "databaseId", {
	        get: function () {
	            throw new Error('not implemented');
	        },
	        set: function (value) {
	            throw new Error('not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @returns {boolean} whether this connection is in a working condition
	     */
	    Connection.prototype.isOpen = function () {
	        throw new Error('not implemented');
	    };
	    /**
	     * @returns {BoltProtocol} the underlying bolt protocol assigned to this connection
	     */
	    Connection.prototype.protocol = function () {
	        throw new Error('not implemented');
	    };
	    Object.defineProperty(Connection.prototype, "address", {
	        /**
	         * @returns {ServerAddress} the server address this connection is opened against
	         */
	        get: function () {
	            throw new Error('not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Connection.prototype, "version", {
	        /**
	         * @returns {ServerVersion} the version of the server this connection is connected to
	         */
	        get: function () {
	            throw new Error('not implemented');
	        },
	        set: function (value) {
	            throw new Error('not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(Connection.prototype, "server", {
	        get: function () {
	            throw new Error('not implemented');
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Connect to the target address, negotiate Bolt protocol and send initialization message.
	     * @param {string} userAgent the user agent for this driver.
	     * @param {Object} authToken the object containing auth information.
	     * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.
	     */
	    Connection.prototype.connect = function (userAgent, authToken) {
	        throw new Error('not implemented');
	    };
	    /**
	     * Write a message to the network channel.
	     * @param {RequestMessage} message the message to write.
	     * @param {ResultStreamObserver} observer the response observer.
	     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.
	     */
	    Connection.prototype.write = function (message, observer, flush) {
	        throw new Error('not implemented');
	    };
	    /**
	     * Send a RESET-message to the database. Message is immediately flushed to the network.
	     * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.
	     */
	    Connection.prototype.resetAndFlush = function () {
	        throw new Error('not implemented');
	    };
	    Connection.prototype.hasOngoingObservableRequests = function () {
	        throw new Error('not implemented');
	    };
	    /**
	     * Call close on the channel.
	     * @returns {Promise<void>} - A promise that will be resolved when the connection is closed.
	     *
	     */
	    Connection.prototype.close = function () {
	        throw new Error('not implemented');
	    };
	    /**
	     *
	     * @param error
	     * @param address
	     * @returns {Neo4jError|*}
	     */
	    Connection.prototype.handleAndTransformError = function (error, address) {
	        if (this._errorHandler) {
	            return this._errorHandler.handleAndTransformError(error, address);
	        }
	        return error;
	    };
	    return Connection;
	}());
	connection.default = Connection;

	var connectionChannel = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$3 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$3 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(connectionChannel, "__esModule", { value: true });
	connectionChannel.createChannelConnection = void 0;
	var channel_1$1 = channel;
	var neo4j_driver_core_1$5 = lib$1;
	var connection_1$4 = __importDefault$5(connection);
	var bolt_1 = __importDefault$5(bolt);
	var PROTOCOL_ERROR$1 = neo4j_driver_core_1$5.error.PROTOCOL_ERROR;
	var Logger = neo4j_driver_core_1$5.internal.logger.Logger;
	var idGenerator = 0;
	/**
	 * Crete new connection to the provided address. Returned connection is not connected.
	 * @param {ServerAddress} address - the Bolt endpoint to connect to.
	 * @param {Object} config - the driver configuration.
	 * @param {ConnectionErrorHandler} errorHandler - the error handler for connection errors.
	 * @param {Logger} log - configured logger.
	 * @return {Connection} - new connection.
	 */
	function createChannelConnection(address, config, errorHandler, log, serversideRouting, createChannel) {
	    if (serversideRouting === void 0) { serversideRouting = null; }
	    if (createChannel === void 0) { createChannel = function (channelConfig) { return new channel_1$1.Channel(channelConfig); }; }
	    var channelConfig = new channel_1$1.ChannelConfig(address, config, errorHandler.errorCode());
	    var channel = createChannel(channelConfig);
	    return bolt_1.default.handshake(channel)
	        .then(function (_a) {
	        var version = _a.protocolVersion, consumeRemainingBuffer = _a.consumeRemainingBuffer;
	        var chunker = new channel_1$1.Chunker(channel);
	        var dechunker = new channel_1$1.Dechunker();
	        var createProtocol = function (conn) {
	            return bolt_1.default.create({
	                version: version,
	                channel: channel,
	                chunker: chunker,
	                dechunker: dechunker,
	                disableLosslessIntegers: config.disableLosslessIntegers,
	                useBigInt: config.useBigInt,
	                serversideRouting: serversideRouting,
	                server: conn.server,
	                log: conn.logger,
	                observer: {
	                    onPendingObserversChange: conn._handleOngoingRequestsNumberChange.bind(conn),
	                    onError: conn._handleFatalError.bind(conn),
	                    onFailure: conn._resetOnFailure.bind(conn),
	                    onProtocolError: conn._handleProtocolError.bind(conn),
	                    onErrorApplyTransformation: function (error) {
	                        return conn.handleAndTransformError(error, conn._address);
	                    }
	                }
	            });
	        };
	        var connection = new ChannelConnection(channel, errorHandler, address, log, config.disableLosslessIntegers, serversideRouting, chunker, createProtocol);
	        // forward all pending bytes to the dechunker
	        consumeRemainingBuffer(function (buffer) { return dechunker.write(buffer); });
	        return connection;
	    })
	        .catch(function (reason) {
	        return channel.close().then(function () {
	            throw reason;
	        });
	    });
	}
	connectionChannel.createChannelConnection = createChannelConnection;
	var ChannelConnection = /** @class */ (function (_super) {
	    __extends$4(ChannelConnection, _super);
	    /**
	     * @constructor
	     * @param {Channel} channel - channel with a 'write' function and a 'onmessage' callback property.
	     * @param {ConnectionErrorHandler} errorHandler the error handler.
	     * @param {ServerAddress} address - the server address to connect to.
	     * @param {Logger} log - the configured logger.
	     * @param {boolean} disableLosslessIntegers if this connection should convert all received integers to native JS numbers.
	     * @param {Chunker} chunker the chunker
	     * @param protocolSupplier Bolt protocol supplier
	     */
	    function ChannelConnection(channel, errorHandler, address, log, disableLosslessIntegers, serversideRouting, chunker, // to be removed,
	    protocolSupplier) {
	        if (disableLosslessIntegers === void 0) { disableLosslessIntegers = false; }
	        if (serversideRouting === void 0) { serversideRouting = null; }
	        var _this = _super.call(this, errorHandler) || this;
	        _this._reseting = false;
	        _this._resetObservers = [];
	        _this._id = idGenerator++;
	        _this._address = address;
	        _this._server = { address: address.asHostPort() };
	        _this.creationTimestamp = Date.now();
	        _this._disableLosslessIntegers = disableLosslessIntegers;
	        _this._ch = channel;
	        _this._chunker = chunker;
	        _this._log = createConnectionLogger(_this, log);
	        _this._serversideRouting = serversideRouting;
	        // connection from the database, returned in response for HELLO message and might not be available
	        _this._dbConnectionId = null;
	        // bolt protocol is initially not initialized
	        /**
	         * @private
	         * @type {BoltProtocol}
	         */
	        _this._protocol = protocolSupplier(_this);
	        // Set to true on fatal errors, to get this out of connection pool.
	        _this._isBroken = false;
	        if (_this._log.isDebugEnabled()) {
	            _this._log.debug("created towards ".concat(address));
	        }
	        return _this;
	    }
	    Object.defineProperty(ChannelConnection.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChannelConnection.prototype, "databaseId", {
	        get: function () {
	            return this._dbConnectionId;
	        },
	        set: function (value) {
	            this._dbConnectionId = value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Send initialization message.
	     * @param {string} userAgent the user agent for this driver.
	     * @param {Object} authToken the object containing auth information.
	     * @return {Promise<Connection>} promise resolved with the current connection if connection is successful. Rejected promise otherwise.
	     */
	    ChannelConnection.prototype.connect = function (userAgent, authToken) {
	        return this._initialize(userAgent, authToken);
	    };
	    /**
	     * Perform protocol-specific initialization which includes authentication.
	     * @param {string} userAgent the user agent for this driver.
	     * @param {Object} authToken the object containing auth information.
	     * @return {Promise<Connection>} promise resolved with the current connection if initialization is successful. Rejected promise otherwise.
	     */
	    ChannelConnection.prototype._initialize = function (userAgent, authToken) {
	        var _this = this;
	        var self = this;
	        return new Promise(function (resolve, reject) {
	            _this._protocol.initialize({
	                userAgent: userAgent,
	                authToken: authToken,
	                onError: function (err) { return reject(err); },
	                onComplete: function (metadata) {
	                    if (metadata) {
	                        // read server version from the response metadata, if it is available
	                        var serverVersion = metadata.server;
	                        if (!_this.version || serverVersion) {
	                            _this.version = serverVersion;
	                        }
	                        // read database connection id from the response metadata, if it is available
	                        var dbConnectionId = metadata.connection_id;
	                        if (!_this.databaseId) {
	                            _this.databaseId = dbConnectionId;
	                        }
	                        if (metadata.hints) {
	                            var receiveTimeoutRaw = metadata.hints['connection.recv_timeout_seconds'];
	                            if (receiveTimeoutRaw !== null &&
	                                receiveTimeoutRaw !== undefined) {
	                                var receiveTimeoutInSeconds = (0, neo4j_driver_core_1$5.toNumber)(receiveTimeoutRaw);
	                                if (Number.isInteger(receiveTimeoutInSeconds) &&
	                                    receiveTimeoutInSeconds > 0) {
	                                    _this._ch.setupReceiveTimeout(receiveTimeoutInSeconds * 1000);
	                                }
	                                else {
	                                    _this._log.info("Server located at ".concat(_this._address, " supplied an invalid connection receive timeout value (").concat(receiveTimeoutInSeconds, "). ") +
	                                        'Please, verify the server configuration and status because this can be the symptom of a bigger issue.');
	                                }
	                            }
	                        }
	                    }
	                    resolve(self);
	                }
	            });
	        });
	    };
	    /**
	     * Get the Bolt protocol for the connection.
	     * @return {BoltProtocol} the protocol.
	     */
	    ChannelConnection.prototype.protocol = function () {
	        return this._protocol;
	    };
	    Object.defineProperty(ChannelConnection.prototype, "address", {
	        get: function () {
	            return this._address;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChannelConnection.prototype, "version", {
	        /**
	         * Get the version of the connected server.
	         * Available only after initialization
	         *
	         * @returns {ServerVersion} version
	         */
	        get: function () {
	            return this._server.version;
	        },
	        set: function (value) {
	            this._server.version = value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChannelConnection.prototype, "server", {
	        get: function () {
	            return this._server;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(ChannelConnection.prototype, "logger", {
	        get: function () {
	            return this._log;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * "Fatal" means the connection is dead. Only call this if something
	     * happens that cannot be recovered from. This will lead to all subscribers
	     * failing, and the connection getting ejected from the session pool.
	     *
	     * @param error an error object, forwarded to all current and future subscribers
	     */
	    ChannelConnection.prototype._handleFatalError = function (error) {
	        this._isBroken = true;
	        this._error = this.handleAndTransformError(this._protocol.currentFailure || error, this._address);
	        if (this._log.isErrorEnabled()) {
	            this._log.error("experienced a fatal error caused by ".concat(this._error, " (").concat(neo4j_driver_core_1$5.json.stringify(this._error), ")"));
	        }
	        this._protocol.notifyFatalError(this._error);
	    };
	    /**
	     * This method still here because it's used by the {@link PooledConnectionProvider}
	     *
	     * @param {any} observer
	     */
	    ChannelConnection.prototype._queueObserver = function (observer) {
	        return this._protocol.queueObserverIfProtocolIsNotBroken(observer);
	    };
	    ChannelConnection.prototype.hasOngoingObservableRequests = function () {
	        return this._protocol.hasOngoingObservableRequests();
	    };
	    /**
	     * Send a RESET-message to the database. Message is immediately flushed to the network.
	     * @return {Promise<void>} promise resolved when SUCCESS-message response arrives, or failed when other response messages arrives.
	     */
	    ChannelConnection.prototype.resetAndFlush = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this._reset({
	                onError: function (error) {
	                    if (_this._isBroken) {
	                        // handling a fatal error, no need to raise a protocol violation
	                        reject(error);
	                    }
	                    else {
	                        var neo4jError = _this._handleProtocolError('Received FAILURE as a response for RESET: ' + error);
	                        reject(neo4jError);
	                    }
	                },
	                onComplete: function () {
	                    resolve();
	                }
	            });
	        });
	    };
	    ChannelConnection.prototype._resetOnFailure = function () {
	        var _this = this;
	        if (!this.isOpen()) {
	            return;
	        }
	        this._reset({
	            onError: function () {
	                _this._protocol.resetFailure();
	            },
	            onComplete: function () {
	                _this._protocol.resetFailure();
	            }
	        });
	    };
	    ChannelConnection.prototype._reset = function (observer) {
	        var _this = this;
	        if (this._reseting) {
	            if (!this._protocol.isLastMessageReset()) {
	                this._protocol.reset({
	                    onError: function (error) {
	                        observer.onError(error);
	                    },
	                    onComplete: function () {
	                        observer.onComplete();
	                    }
	                });
	            }
	            else {
	                this._resetObservers.push(observer);
	            }
	            return;
	        }
	        this._resetObservers.push(observer);
	        this._reseting = true;
	        var notifyFinish = function (notify) {
	            _this._reseting = false;
	            var observers = _this._resetObservers;
	            _this._resetObservers = [];
	            observers.forEach(notify);
	        };
	        this._protocol.reset({
	            onError: function (error) {
	                notifyFinish(function (obs) { return obs.onError(error); });
	            },
	            onComplete: function () {
	                notifyFinish(function (obs) { return obs.onComplete(); });
	            }
	        });
	    };
	    /*
	     * Pop next pending observer form the list of observers and make it current observer.
	     * @protected
	     */
	    ChannelConnection.prototype._updateCurrentObserver = function () {
	        this._protocol.updateCurrentObserver();
	    };
	    /** Check if this connection is in working condition */
	    ChannelConnection.prototype.isOpen = function () {
	        return !this._isBroken && this._ch._open;
	    };
	    /**
	     * Starts and stops the receive timeout timer.
	     * @param {number} requestsNumber Ongoing requests number
	     */
	    ChannelConnection.prototype._handleOngoingRequestsNumberChange = function (requestsNumber) {
	        if (requestsNumber === 0) {
	            this._ch.stopReceiveTimeout();
	        }
	        else {
	            this._ch.startReceiveTimeout();
	        }
	    };
	    /**
	     * Call close on the channel.
	     * @returns {Promise<void>} - A promise that will be resolved when the underlying channel is closed.
	     */
	    ChannelConnection.prototype.close = function () {
	        return __awaiter$3(this, void 0, void 0, function () {
	            return __generator$3(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this._log.isDebugEnabled()) {
	                            this._log.debug('closing');
	                        }
	                        if (this._protocol && this.isOpen()) {
	                            // protocol has been initialized and this connection is healthy
	                            // notify the database about the upcoming close of the connection
	                            this._protocol.prepareToClose();
	                        }
	                        return [4 /*yield*/, this._ch.close()];
	                    case 1:
	                        _a.sent();
	                        if (this._log.isDebugEnabled()) {
	                            this._log.debug('closed');
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    ChannelConnection.prototype.toString = function () {
	        return "Connection [".concat(this.id, "][").concat(this.databaseId || '', "]");
	    };
	    ChannelConnection.prototype._handleProtocolError = function (message) {
	        this._protocol.resetFailure();
	        this._updateCurrentObserver();
	        var error = (0, neo4j_driver_core_1$5.newError)(message, PROTOCOL_ERROR$1);
	        this._handleFatalError(error);
	        return error;
	    };
	    return ChannelConnection;
	}(connection_1$4.default));
	connectionChannel.default = ChannelConnection;
	/**
	 * Creates a log with the connection info as prefix
	 * @param {Connection} connection The connection
	 * @param {Logger} logger The logger
	 * @returns {Logger} The new logger with enriched messages
	 */
	function createConnectionLogger(connection, logger) {
	    return new Logger(logger._level, function (level, message) {
	        return logger._loggerFunction(level, "".concat(connection, " ").concat(message));
	    });
	}

	var connectionDelegate = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(connectionDelegate, "__esModule", { value: true });
	var connection_1$3 = __importDefault$4(connection);
	var DelegateConnection = /** @class */ (function (_super) {
	    __extends$3(DelegateConnection, _super);
	    /**
	     * @param delegate {Connection} the delegated connection
	     * @param errorHandler {ConnectionErrorHandler} the error handler
	     */
	    function DelegateConnection(delegate, errorHandler) {
	        var _this = _super.call(this, errorHandler) || this;
	        if (errorHandler) {
	            _this._originalErrorHandler = delegate._errorHandler;
	            delegate._errorHandler = _this._errorHandler;
	        }
	        _this._delegate = delegate;
	        return _this;
	    }
	    Object.defineProperty(DelegateConnection.prototype, "id", {
	        get: function () {
	            return this._delegate.id;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(DelegateConnection.prototype, "databaseId", {
	        get: function () {
	            return this._delegate.databaseId;
	        },
	        set: function (value) {
	            this._delegate.databaseId = value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(DelegateConnection.prototype, "server", {
	        get: function () {
	            return this._delegate.server;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(DelegateConnection.prototype, "address", {
	        get: function () {
	            return this._delegate.address;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(DelegateConnection.prototype, "version", {
	        get: function () {
	            return this._delegate.version;
	        },
	        set: function (value) {
	            this._delegate.version = value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    DelegateConnection.prototype.isOpen = function () {
	        return this._delegate.isOpen();
	    };
	    DelegateConnection.prototype.protocol = function () {
	        return this._delegate.protocol();
	    };
	    DelegateConnection.prototype.connect = function (userAgent, authToken) {
	        return this._delegate.connect(userAgent, authToken);
	    };
	    DelegateConnection.prototype.write = function (message, observer, flush) {
	        return this._delegate.write(message, observer, flush);
	    };
	    DelegateConnection.prototype.resetAndFlush = function () {
	        return this._delegate.resetAndFlush();
	    };
	    DelegateConnection.prototype.hasOngoingObservableRequests = function () {
	        return this._delegate.hasOngoingObservableRequests();
	    };
	    DelegateConnection.prototype.close = function () {
	        return this._delegate.close();
	    };
	    DelegateConnection.prototype._release = function () {
	        if (this._originalErrorHandler) {
	            this._delegate._errorHandler = this._originalErrorHandler;
	        }
	        return this._delegate._release();
	    };
	    return DelegateConnection;
	}(connection_1$3.default));
	connectionDelegate.default = DelegateConnection;

	var connectionErrorHandler = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(connectionErrorHandler, "__esModule", { value: true });
	var neo4j_driver_core_1$4 = lib$1;
	var SERVICE_UNAVAILABLE$3 = neo4j_driver_core_1$4.error.SERVICE_UNAVAILABLE, SESSION_EXPIRED$1 = neo4j_driver_core_1$4.error.SESSION_EXPIRED;
	var ConnectionErrorHandler = /** @class */ (function () {
	    function ConnectionErrorHandler(errorCode, handleUnavailability, handleWriteFailure, handleAuthorizationExpired) {
	        this._errorCode = errorCode;
	        this._handleUnavailability = handleUnavailability || noOpHandler;
	        this._handleWriteFailure = handleWriteFailure || noOpHandler;
	        this._handleAuthorizationExpired = handleAuthorizationExpired || noOpHandler;
	    }
	    ConnectionErrorHandler.create = function (_a) {
	        var errorCode = _a.errorCode, handleUnavailability = _a.handleUnavailability, handleWriteFailure = _a.handleWriteFailure, handleAuthorizationExpired = _a.handleAuthorizationExpired;
	        return new ConnectionErrorHandler(errorCode, handleUnavailability, handleWriteFailure, handleAuthorizationExpired);
	    };
	    /**
	     * Error code to use for network errors.
	     * @return {string} the error code.
	     */
	    ConnectionErrorHandler.prototype.errorCode = function () {
	        return this._errorCode;
	    };
	    /**
	     * Handle and transform the error.
	     * @param {Neo4jError} error the original error.
	     * @param {ServerAddress} address the address of the connection where the error happened.
	     * @return {Neo4jError} new error that should be propagated to the user.
	     */
	    ConnectionErrorHandler.prototype.handleAndTransformError = function (error, address) {
	        if (isAutorizationExpiredError(error)) {
	            return this._handleAuthorizationExpired(error, address);
	        }
	        if (isAvailabilityError(error)) {
	            return this._handleUnavailability(error, address);
	        }
	        if (isFailureToWrite(error)) {
	            return this._handleWriteFailure(error, address);
	        }
	        return error;
	    };
	    return ConnectionErrorHandler;
	}());
	connectionErrorHandler.default = ConnectionErrorHandler;
	function isAutorizationExpiredError(error) {
	    return error && (error.code === 'Neo.ClientError.Security.AuthorizationExpired' ||
	        error.code === 'Neo.ClientError.Security.TokenExpired');
	}
	function isAvailabilityError(error) {
	    if (error) {
	        return (error.code === SESSION_EXPIRED$1 ||
	            error.code === SERVICE_UNAVAILABLE$3 ||
	            error.code === 'Neo.TransientError.General.DatabaseUnavailable');
	    }
	    return false;
	}
	function isFailureToWrite(error) {
	    if (error) {
	        return (error.code === 'Neo.ClientError.Cluster.NotALeader' ||
	            error.code === 'Neo.ClientError.General.ForbiddenOnReadOnlyDatabase');
	    }
	    return false;
	}
	function noOpHandler(error) {
	    return error;
	}

	(function (exports) {
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createChannelConnection = exports.ConnectionErrorHandler = exports.DelegateConnection = exports.ChannelConnection = exports.Connection = void 0;
	var connection_1 = __importDefault(connection);
	exports.Connection = connection_1.default;
	var connection_channel_1 = __importStar(connectionChannel);
	exports.ChannelConnection = connection_channel_1.default;
	Object.defineProperty(exports, "createChannelConnection", { enumerable: true, get: function () { return connection_channel_1.createChannelConnection; } });
	var connection_delegate_1 = __importDefault(connectionDelegate);
	exports.DelegateConnection = connection_delegate_1.default;
	var connection_error_handler_1 = __importDefault(connectionErrorHandler);
	exports.ConnectionErrorHandler = connection_error_handler_1.default;
	exports.default = connection_1.default;
	}(connection$1));

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	    __setModuleDefault$1(result, mod);
	    return result;
	};
	var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$2 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(connectionProviderPooled, "__esModule", { value: true });
	var connection_1$2 = connection$1;
	var pool_1 = __importStar$1(pool$1);
	var neo4j_driver_core_1$3 = lib$1;
	var SERVICE_UNAVAILABLE$2 = neo4j_driver_core_1$3.error.SERVICE_UNAVAILABLE;
	var PooledConnectionProvider = /** @class */ (function (_super) {
	    __extends$2(PooledConnectionProvider, _super);
	    function PooledConnectionProvider(_a, createChannelConnectionHook) {
	        var id = _a.id, config = _a.config, log = _a.log, userAgent = _a.userAgent, authToken = _a.authToken;
	        if (createChannelConnectionHook === void 0) { createChannelConnectionHook = null; }
	        var _this = _super.call(this) || this;
	        _this._id = id;
	        _this._config = config;
	        _this._log = log;
	        _this._userAgent = userAgent;
	        _this._authToken = authToken;
	        _this._createChannelConnection =
	            createChannelConnectionHook ||
	                (function (address) {
	                    return (0, connection_1$2.createChannelConnection)(address, _this._config, _this._createConnectionErrorHandler(), _this._log);
	                });
	        _this._connectionPool = new pool_1.default({
	            create: _this._createConnection.bind(_this),
	            destroy: _this._destroyConnection.bind(_this),
	            validate: _this._validateConnection.bind(_this),
	            installIdleObserver: PooledConnectionProvider._installIdleObserverOnConnection.bind(_this),
	            removeIdleObserver: PooledConnectionProvider._removeIdleObserverOnConnection.bind(_this),
	            config: pool_1.PoolConfig.fromDriverConfig(config),
	            log: _this._log
	        });
	        _this._openConnections = {};
	        return _this;
	    }
	    PooledConnectionProvider.prototype._createConnectionErrorHandler = function () {
	        return new connection_1$2.ConnectionErrorHandler(SERVICE_UNAVAILABLE$2);
	    };
	    /**
	     * Create a new connection and initialize it.
	     * @return {Promise<Connection>} promise resolved with a new connection or rejected when failed to connect.
	     * @access private
	     */
	    PooledConnectionProvider.prototype._createConnection = function (address, release) {
	        var _this = this;
	        return this._createChannelConnection(address).then(function (connection) {
	            connection._release = function () {
	                return release(address, connection);
	            };
	            _this._openConnections[connection.id] = connection;
	            return connection
	                .connect(_this._userAgent, _this._authToken)
	                .catch(function (error) {
	                // let's destroy this connection
	                _this._destroyConnection(connection);
	                // propagate the error because connection failed to connect / initialize
	                throw error;
	            });
	        });
	    };
	    /**
	     * Check that a connection is usable
	     * @return {boolean} true if the connection is open
	     * @access private
	     **/
	    PooledConnectionProvider.prototype._validateConnection = function (conn) {
	        if (!conn.isOpen()) {
	            return false;
	        }
	        var maxConnectionLifetime = this._config.maxConnectionLifetime;
	        var lifetime = Date.now() - conn.creationTimestamp;
	        return lifetime <= maxConnectionLifetime;
	    };
	    /**
	     * Dispose of a connection.
	     * @return {Connection} the connection to dispose.
	     * @access private
	     */
	    PooledConnectionProvider.prototype._destroyConnection = function (conn) {
	        delete this._openConnections[conn.id];
	        return conn.close();
	    };
	    /**
	     * Acquire a connection from the pool and return it ServerInfo
	     * @param {object} param
	     * @param {string} param.address the server address
	     * @return {Promise<ServerInfo>} the server info
	     */
	    PooledConnectionProvider.prototype._verifyConnectivityAndGetServerVersion = function (_a) {
	        var address = _a.address;
	        return __awaiter$2(this, void 0, void 0, function () {
	            var connection, serverInfo;
	            return __generator$2(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this._connectionPool.acquire(address)];
	                    case 1:
	                        connection = _b.sent();
	                        serverInfo = new neo4j_driver_core_1$3.ServerInfo(connection.server, connection.protocol().version);
	                        _b.label = 2;
	                    case 2:
	                        _b.trys.push([2, , 5, 7]);
	                        if (!!connection.protocol().isLastMessageLogin()) return [3 /*break*/, 4];
	                        return [4 /*yield*/, connection.resetAndFlush()];
	                    case 3:
	                        _b.sent();
	                        _b.label = 4;
	                    case 4: return [3 /*break*/, 7];
	                    case 5: return [4 /*yield*/, connection._release()];
	                    case 6:
	                        _b.sent();
	                        return [7 /*endfinally*/];
	                    case 7: return [2 /*return*/, serverInfo];
	                }
	            });
	        });
	    };
	    PooledConnectionProvider.prototype.close = function () {
	        return __awaiter$2(this, void 0, void 0, function () {
	            return __generator$2(this, function (_a) {
	                switch (_a.label) {
	                    case 0: 
	                    // purge all idle connections in the connection pool
	                    return [4 /*yield*/, this._connectionPool.close()
	                        // then close all connections driver has ever created
	                        // it is needed to close connections that are active right now and are acquired from the pool
	                    ];
	                    case 1:
	                        // purge all idle connections in the connection pool
	                        _a.sent();
	                        // then close all connections driver has ever created
	                        // it is needed to close connections that are active right now and are acquired from the pool
	                        return [4 /*yield*/, Promise.all(Object.values(this._openConnections).map(function (c) { return c.close(); }))];
	                    case 2:
	                        // then close all connections driver has ever created
	                        // it is needed to close connections that are active right now and are acquired from the pool
	                        _a.sent();
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    PooledConnectionProvider._installIdleObserverOnConnection = function (conn, observer) {
	        conn._queueObserver(observer);
	    };
	    PooledConnectionProvider._removeIdleObserverOnConnection = function (conn) {
	        conn._updateCurrentObserver();
	    };
	    return PooledConnectionProvider;
	}(neo4j_driver_core_1$3.ConnectionProvider));
	connectionProviderPooled.default = PooledConnectionProvider;

	var connectionProviderDirect = {};

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator$1 = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(connectionProviderDirect, "__esModule", { value: true });
	var connection_provider_pooled_1$1 = __importDefault$3(connectionProviderPooled);
	var connection_1$1 = connection$1;
	var neo4j_driver_core_1$2 = lib$1;
	var _a$2 = neo4j_driver_core_1$2.internal.constants, BOLT_PROTOCOL_V3$1 = _a$2.BOLT_PROTOCOL_V3, BOLT_PROTOCOL_V4_0$1 = _a$2.BOLT_PROTOCOL_V4_0, BOLT_PROTOCOL_V4_4$1 = _a$2.BOLT_PROTOCOL_V4_4;
	var SERVICE_UNAVAILABLE$1 = neo4j_driver_core_1$2.error.SERVICE_UNAVAILABLE;
	var DirectConnectionProvider = /** @class */ (function (_super) {
	    __extends$1(DirectConnectionProvider, _super);
	    function DirectConnectionProvider(_a) {
	        var id = _a.id, config = _a.config, log = _a.log, address = _a.address, userAgent = _a.userAgent, authToken = _a.authToken;
	        var _this = _super.call(this, { id: id, config: config, log: log, userAgent: userAgent, authToken: authToken }) || this;
	        _this._address = address;
	        return _this;
	    }
	    /**
	     * See {@link ConnectionProvider} for more information about this method and
	     * its arguments.
	     */
	    DirectConnectionProvider.prototype.acquireConnection = function (_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a; _b.accessMode; var database = _b.database; _b.bookmarks;
	        var databaseSpecificErrorHandler = connection_1$1.ConnectionErrorHandler.create({
	            errorCode: SERVICE_UNAVAILABLE$1,
	            handleAuthorizationExpired: function (error, address) {
	                return _this._handleAuthorizationExpired(error, address, database);
	            }
	        });
	        return this._connectionPool
	            .acquire(this._address)
	            .then(function (connection) {
	            return new connection_1$1.DelegateConnection(connection, databaseSpecificErrorHandler);
	        });
	    };
	    DirectConnectionProvider.prototype._handleAuthorizationExpired = function (error, address, database) {
	        this._log.warn("Direct driver ".concat(this._id, " will close connection to ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
	        this._connectionPool.purge(address).catch(function () { });
	        return error;
	    };
	    DirectConnectionProvider.prototype._hasProtocolVersion = function (versionPredicate) {
	        return __awaiter$1(this, void 0, void 0, function () {
	            var connection, protocolVersion;
	            return __generator$1(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, (0, connection_1$1.createChannelConnection)(this._address, this._config, this._createConnectionErrorHandler(), this._log)];
	                    case 1:
	                        connection = _a.sent();
	                        protocolVersion = connection.protocol()
	                            ? connection.protocol().version
	                            : null;
	                        return [4 /*yield*/, connection.close()];
	                    case 2:
	                        _a.sent();
	                        if (protocolVersion) {
	                            return [2 /*return*/, versionPredicate(protocolVersion)];
	                        }
	                        return [2 /*return*/, false];
	                }
	            });
	        });
	    };
	    DirectConnectionProvider.prototype.supportsMultiDb = function () {
	        return __awaiter$1(this, void 0, void 0, function () {
	            return __generator$1(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V4_0$1; })];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    DirectConnectionProvider.prototype.getNegotiatedProtocolVersion = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this._hasProtocolVersion(resolve)
	                .catch(reject);
	        });
	    };
	    DirectConnectionProvider.prototype.supportsTransactionConfig = function () {
	        return __awaiter$1(this, void 0, void 0, function () {
	            return __generator$1(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V3$1; })];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    DirectConnectionProvider.prototype.supportsUserImpersonation = function () {
	        return __awaiter$1(this, void 0, void 0, function () {
	            return __generator$1(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V4_4$1; })];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    DirectConnectionProvider.prototype.verifyConnectivityAndGetServerInfo = function () {
	        return __awaiter$1(this, void 0, void 0, function () {
	            return __generator$1(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._verifyConnectivityAndGetServerVersion({ address: this._address })];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    return DirectConnectionProvider;
	}(connection_provider_pooled_1$1.default));
	connectionProviderDirect.default = DirectConnectionProvider;

	var connectionProviderRouting = {};

	var rediscovery$1 = {};

	var rediscovery = {};

	var routingTable = {};

	var __read$1 = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	};
	Object.defineProperty(routingTable, "__esModule", { value: true });
	routingTable.createValidRoutingTable = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var neo4j_driver_core_1$1 = lib$1;
	var _a$1 = neo4j_driver_core_1$1.internal.constants, WRITE$1 = _a$1.ACCESS_MODE_WRITE, READ$1 = _a$1.ACCESS_MODE_READ, ServerAddress = neo4j_driver_core_1$1.internal.serverAddress.ServerAddress;
	var PROTOCOL_ERROR = neo4j_driver_core_1$1.error.PROTOCOL_ERROR;
	var MIN_ROUTERS = 1;
	/**
	 * The routing table object used to determine the role of the servers in the driver.
	 */
	var RoutingTable = /** @class */ (function () {
	    function RoutingTable(_a) {
	        var _b = _a === void 0 ? {} : _a, database = _b.database, routers = _b.routers, readers = _b.readers, writers = _b.writers, expirationTime = _b.expirationTime, ttl = _b.ttl;
	        this.database = database || null;
	        this.databaseName = database || 'default database';
	        this.routers = routers || [];
	        this.readers = readers || [];
	        this.writers = writers || [];
	        this.expirationTime = expirationTime || (0, neo4j_driver_core_1$1.int)(0);
	        this.ttl = ttl;
	    }
	    /**
	     * Create a valid routing table from a raw object
	     *
	     * @param {string} database the database name. It is used for logging purposes
	     * @param {ServerAddress} routerAddress The router address, it is used for loggin purposes
	     * @param {RawRoutingTable} rawRoutingTable Method used to get the raw routing table to be processed
	     * @param {RoutingTable} The valid Routing Table
	     */
	    RoutingTable.fromRawRoutingTable = function (database, routerAddress, rawRoutingTable) {
	        return createValidRoutingTable(database, routerAddress, rawRoutingTable);
	    };
	    RoutingTable.prototype.forget = function (address) {
	        // Don't remove it from the set of routers, since that might mean we lose our ability to re-discover,
	        // just remove it from the set of readers and writers, so that we don't use it for actual work without
	        // performing discovery first.
	        this.readers = removeFromArray(this.readers, address);
	        this.writers = removeFromArray(this.writers, address);
	    };
	    RoutingTable.prototype.forgetRouter = function (address) {
	        this.routers = removeFromArray(this.routers, address);
	    };
	    RoutingTable.prototype.forgetWriter = function (address) {
	        this.writers = removeFromArray(this.writers, address);
	    };
	    /**
	     * Check if this routing table is fresh to perform the required operation.
	     * @param {string} accessMode the type of operation. Allowed values are {@link READ} and {@link WRITE}.
	     * @return {boolean} `true` when this table contains servers to serve the required operation, `false` otherwise.
	     */
	    RoutingTable.prototype.isStaleFor = function (accessMode) {
	        return (this.expirationTime.lessThan(Date.now()) ||
	            this.routers.length < MIN_ROUTERS ||
	            (accessMode === READ$1 && this.readers.length === 0) ||
	            (accessMode === WRITE$1 && this.writers.length === 0));
	    };
	    /**
	     * Check if this routing table is expired for specified amount of duration
	     *
	     * @param {Integer} duration amount of duration in milliseconds to check for expiration
	     * @returns {boolean}
	     */
	    RoutingTable.prototype.isExpiredFor = function (duration) {
	        return this.expirationTime.add(duration).lessThan(Date.now());
	    };
	    RoutingTable.prototype.allServers = function () {
	        return __spreadArray(__spreadArray(__spreadArray([], __read$1(this.routers), false), __read$1(this.readers), false), __read$1(this.writers), false);
	    };
	    RoutingTable.prototype.toString = function () {
	        return ('RoutingTable[' +
	            "database=".concat(this.databaseName, ", ") +
	            "expirationTime=".concat(this.expirationTime, ", ") +
	            "currentTime=".concat(Date.now(), ", ") +
	            "routers=[".concat(this.routers, "], ") +
	            "readers=[".concat(this.readers, "], ") +
	            "writers=[".concat(this.writers, "]]"));
	    };
	    return RoutingTable;
	}());
	routingTable.default = RoutingTable;
	/**
	 * Remove all occurrences of the element in the array.
	 * @param {Array} array the array to filter.
	 * @param {Object} element the element to remove.
	 * @return {Array} new filtered array.
	 */
	function removeFromArray(array, element) {
	    return array.filter(function (item) { return item.asKey() !== element.asKey(); });
	}
	/**
	 * Create a valid routing table from a raw object
	 *
	 * @param {string} db the database name. It is used for logging purposes
	 * @param {ServerAddress} routerAddress The router address, it is used for loggin purposes
	 * @param {RawRoutingTable} rawRoutingTable Method used to get the raw routing table to be processed
	 * @param {RoutingTable} The valid Routing Table
	 */
	function createValidRoutingTable(database, routerAddress, rawRoutingTable) {
	    var ttl = rawRoutingTable.ttl;
	    var expirationTime = calculateExpirationTime(rawRoutingTable, routerAddress);
	    var _a = parseServers(rawRoutingTable, routerAddress), routers = _a.routers, readers = _a.readers, writers = _a.writers;
	    assertNonEmpty(routers, 'routers', routerAddress);
	    assertNonEmpty(readers, 'readers', routerAddress);
	    return new RoutingTable({
	        database: database || rawRoutingTable.db,
	        routers: routers,
	        readers: readers,
	        writers: writers,
	        expirationTime: expirationTime,
	        ttl: ttl
	    });
	}
	routingTable.createValidRoutingTable = createValidRoutingTable;
	/**
	 * Parse server from the RawRoutingTable.
	 *
	 * @param {RawRoutingTable} rawRoutingTable the raw routing table
	 * @param {string} routerAddress the router address
	 * @returns {Object} The object with the list of routers, readers and writers
	 */
	function parseServers(rawRoutingTable, routerAddress) {
	    try {
	        var routers_1 = [];
	        var readers_1 = [];
	        var writers_1 = [];
	        rawRoutingTable.servers.forEach(function (server) {
	            var role = server.role;
	            var addresses = server.addresses;
	            if (role === 'ROUTE') {
	                routers_1 = parseArray(addresses).map(function (address) {
	                    return ServerAddress.fromUrl(address);
	                });
	            }
	            else if (role === 'WRITE') {
	                writers_1 = parseArray(addresses).map(function (address) {
	                    return ServerAddress.fromUrl(address);
	                });
	            }
	            else if (role === 'READ') {
	                readers_1 = parseArray(addresses).map(function (address) {
	                    return ServerAddress.fromUrl(address);
	                });
	            }
	        });
	        return {
	            routers: routers_1,
	            readers: readers_1,
	            writers: writers_1
	        };
	    }
	    catch (error) {
	        throw (0, neo4j_driver_core_1$1.newError)("Unable to parse servers entry from router ".concat(routerAddress, " from addresses:\n").concat(neo4j_driver_core_1$1.json.stringify(rawRoutingTable.servers), "\nError message: ").concat(error.message), PROTOCOL_ERROR);
	    }
	}
	/**
	 * Call the expiration time using the ttls from the raw routing table and return it
	 *
	 * @param {RawRoutingTable} rawRoutingTable the routing table
	 * @param {string} routerAddress the router address
	 * @returns {number} the ttl
	 */
	function calculateExpirationTime(rawRoutingTable, routerAddress) {
	    try {
	        var now = (0, neo4j_driver_core_1$1.int)(Date.now());
	        var expires = (0, neo4j_driver_core_1$1.int)(rawRoutingTable.ttl)
	            .multiply(1000)
	            .add(now);
	        // if the server uses a really big expire time like Long.MAX_VALUE this may have overflowed
	        if (expires.lessThan(now)) {
	            return neo4j_driver_core_1$1.Integer.MAX_VALUE;
	        }
	        return expires;
	    }
	    catch (error) {
	        throw (0, neo4j_driver_core_1$1.newError)("Unable to parse TTL entry from router ".concat(routerAddress, " from raw routing table:\n").concat(neo4j_driver_core_1$1.json.stringify(rawRoutingTable), "\nError message: ").concat(error.message), PROTOCOL_ERROR);
	    }
	}
	/**
	 * Assert if serverAddressesArray is not empty, throws and PROTOCOL_ERROR otherwise
	 *
	 * @param {string[]} serverAddressesArray array of addresses
	 * @param {string} serversName the server name
	 * @param {string} routerAddress the router address
	 */
	function assertNonEmpty(serverAddressesArray, serversName, routerAddress) {
	    if (serverAddressesArray.length === 0) {
	        throw (0, neo4j_driver_core_1$1.newError)('Received no ' + serversName + ' from router ' + routerAddress, PROTOCOL_ERROR);
	    }
	}
	function parseArray(addresses) {
	    if (!Array.isArray(addresses)) {
	        throw new TypeError('Array expected but got: ' + addresses);
	    }
	    return Array.from(addresses);
	}

	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(rediscovery, "__esModule", { value: true });
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var routing_table_1$1 = __importDefault$2(routingTable);
	var Rediscovery = /** @class */ (function () {
	    /**
	     * @constructor
	     * @param {object} routingContext
	     */
	    function Rediscovery(routingContext) {
	        this._routingContext = routingContext;
	    }
	    /**
	     * Try to fetch new routing table from the given router.
	     * @param {Session} session the session to use.
	     * @param {string} database the database for which to lookup routing table.
	     * @param {ServerAddress} routerAddress the URL of the router.
	     * @param {string} impersonatedUser The impersonated user
	     * @return {Promise<RoutingTable>} promise resolved with new routing table or null when connection error happened.
	     */
	    Rediscovery.prototype.lookupRoutingTableOnRouter = function (session, database, routerAddress, impersonatedUser) {
	        var _this = this;
	        return session._acquireConnection(function (connection) {
	            return _this._requestRawRoutingTable(connection, session, database, routerAddress, impersonatedUser).then(function (rawRoutingTable) {
	                if (rawRoutingTable.isNull) {
	                    return null;
	                }
	                return routing_table_1$1.default.fromRawRoutingTable(database, routerAddress, rawRoutingTable);
	            });
	        });
	    };
	    Rediscovery.prototype._requestRawRoutingTable = function (connection, session, database, routerAddress, impersonatedUser) {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            connection.protocol().requestRoutingInformation({
	                routingContext: _this._routingContext,
	                databaseName: database,
	                impersonatedUser: impersonatedUser,
	                sessionContext: {
	                    bookmarks: session._lastBookmarks,
	                    mode: session._mode,
	                    database: session._database,
	                    afterComplete: session._onComplete
	                },
	                onCompleted: resolve,
	                onError: reject
	            });
	        });
	    };
	    return Rediscovery;
	}());
	rediscovery.default = Rediscovery;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(rediscovery$1, "__esModule", { value: true });
	rediscovery$1.RoutingTable = rediscovery$1.Rediscovery = void 0;
	var rediscovery_1$1 = __importDefault$1(rediscovery);
	rediscovery$1.Rediscovery = rediscovery_1$1.default;
	var routing_table_1 = __importDefault$1(routingTable);
	rediscovery$1.RoutingTable = routing_table_1.default;
	rediscovery$1.default = rediscovery_1$1.default;

	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __values = (commonjsGlobal && commonjsGlobal.__values) || function(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	};
	var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(connectionProviderRouting, "__esModule", { value: true });
	var neo4j_driver_core_1 = lib$1;
	var rediscovery_1 = __importStar(rediscovery$1);
	var channel_1 = channel;
	var connection_provider_single_1 = __importDefault(connectionProviderSingle);
	var connection_provider_pooled_1 = __importDefault(connectionProviderPooled);
	var load_balancing_1 = loadBalancing;
	var connection_1 = connection$1;
	var SERVICE_UNAVAILABLE = neo4j_driver_core_1.error.SERVICE_UNAVAILABLE, SESSION_EXPIRED = neo4j_driver_core_1.error.SESSION_EXPIRED;
	var Bookmarks = neo4j_driver_core_1.internal.bookmarks.Bookmarks, _a = neo4j_driver_core_1.internal.constants, READ = _a.ACCESS_MODE_READ, WRITE = _a.ACCESS_MODE_WRITE, BOLT_PROTOCOL_V3 = _a.BOLT_PROTOCOL_V3, BOLT_PROTOCOL_V4_0 = _a.BOLT_PROTOCOL_V4_0, BOLT_PROTOCOL_V4_4 = _a.BOLT_PROTOCOL_V4_4;
	var PROCEDURE_NOT_FOUND_CODE = 'Neo.ClientError.Procedure.ProcedureNotFound';
	var DATABASE_NOT_FOUND_CODE = 'Neo.ClientError.Database.DatabaseNotFound';
	var INVALID_BOOKMARK_CODE = 'Neo.ClientError.Transaction.InvalidBookmark';
	var INVALID_BOOKMARK_MIXTURE_CODE = 'Neo.ClientError.Transaction.InvalidBookmarkMixture';
	var AUTHORIZATION_EXPIRED_CODE = 'Neo.ClientError.Security.AuthorizationExpired';
	var INVALID_ARGUMENT_ERROR = 'Neo.ClientError.Statement.ArgumentError';
	var INVALID_REQUEST_ERROR = 'Neo.ClientError.Request.Invalid';
	var STATEMENT_TYPE_ERROR = 'Neo.ClientError.Statement.TypeError';
	var SYSTEM_DB_NAME = 'system';
	var DEFAULT_DB_NAME = null;
	var DEFAULT_ROUTING_TABLE_PURGE_DELAY = (0, neo4j_driver_core_1.int)(30000);
	var RoutingConnectionProvider = /** @class */ (function (_super) {
	    __extends(RoutingConnectionProvider, _super);
	    function RoutingConnectionProvider(_a) {
	        var id = _a.id, address = _a.address, routingContext = _a.routingContext, hostNameResolver = _a.hostNameResolver, config = _a.config, log = _a.log, userAgent = _a.userAgent, authToken = _a.authToken, routingTablePurgeDelay = _a.routingTablePurgeDelay;
	        var _this = _super.call(this, { id: id, config: config, log: log, userAgent: userAgent, authToken: authToken }, function (address) {
	            return (0, connection_1.createChannelConnection)(address, _this._config, _this._createConnectionErrorHandler(), _this._log, _this._routingContext);
	        }) || this;
	        _this._routingContext = __assign(__assign({}, routingContext), { address: address.toString() });
	        _this._seedRouter = address;
	        _this._rediscovery = new rediscovery_1.default(_this._routingContext);
	        _this._loadBalancingStrategy = new load_balancing_1.LeastConnectedLoadBalancingStrategy(_this._connectionPool);
	        _this._hostNameResolver = hostNameResolver;
	        _this._dnsResolver = new channel_1.HostNameResolver();
	        _this._log = log;
	        _this._useSeedRouter = true;
	        _this._routingTableRegistry = new RoutingTableRegistry(routingTablePurgeDelay
	            ? (0, neo4j_driver_core_1.int)(routingTablePurgeDelay)
	            : DEFAULT_ROUTING_TABLE_PURGE_DELAY);
	        return _this;
	    }
	    RoutingConnectionProvider.prototype._createConnectionErrorHandler = function () {
	        // connection errors mean SERVICE_UNAVAILABLE for direct driver but for routing driver they should only
	        // result in SESSION_EXPIRED because there might still exist other servers capable of serving the request
	        return new connection_1.ConnectionErrorHandler(SESSION_EXPIRED);
	    };
	    RoutingConnectionProvider.prototype._handleUnavailability = function (error, address, database) {
	        this._log.warn("Routing driver ".concat(this._id, " will forget ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
	        this.forget(address, database || DEFAULT_DB_NAME);
	        return error;
	    };
	    RoutingConnectionProvider.prototype._handleAuthorizationExpired = function (error, address, database) {
	        this._log.warn("Routing driver ".concat(this._id, " will close connections to ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
	        this._connectionPool.purge(address).catch(function () { });
	        return error;
	    };
	    RoutingConnectionProvider.prototype._handleWriteFailure = function (error, address, database) {
	        this._log.warn("Routing driver ".concat(this._id, " will forget writer ").concat(address, " for database '").concat(database, "' because of an error ").concat(error.code, " '").concat(error.message, "'"));
	        this.forgetWriter(address, database || DEFAULT_DB_NAME);
	        return (0, neo4j_driver_core_1.newError)('No longer possible to write to server at ' + address, SESSION_EXPIRED, error);
	    };
	    /**
	     * See {@link ConnectionProvider} for more information about this method and
	     * its arguments.
	     */
	    RoutingConnectionProvider.prototype.acquireConnection = function (_a) {
	        var _b = _a === void 0 ? {} : _a, accessMode = _b.accessMode, database = _b.database, bookmarks = _b.bookmarks, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved;
	        return __awaiter(this, void 0, void 0, function () {
	            var name, address, context, databaseSpecificErrorHandler, routingTable, connection, error_1, transformed;
	            var _this = this;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        context = { database: database || DEFAULT_DB_NAME };
	                        databaseSpecificErrorHandler = new connection_1.ConnectionErrorHandler(SESSION_EXPIRED, function (error, address) { return _this._handleUnavailability(error, address, context.database); }, function (error, address) { return _this._handleWriteFailure(error, address, context.database); }, function (error, address) {
	                            return _this._handleAuthorizationExpired(error, address, context.database);
	                        });
	                        return [4 /*yield*/, this._freshRoutingTable({
	                                accessMode: accessMode,
	                                database: context.database,
	                                bookmarks: bookmarks,
	                                impersonatedUser: impersonatedUser,
	                                onDatabaseNameResolved: function (databaseName) {
	                                    context.database = context.database || databaseName;
	                                    if (onDatabaseNameResolved) {
	                                        onDatabaseNameResolved(databaseName);
	                                    }
	                                }
	                            })
	                            // select a target server based on specified access mode
	                        ];
	                    case 1:
	                        routingTable = _c.sent();
	                        // select a target server based on specified access mode
	                        if (accessMode === READ) {
	                            address = this._loadBalancingStrategy.selectReader(routingTable.readers);
	                            name = 'read';
	                        }
	                        else if (accessMode === WRITE) {
	                            address = this._loadBalancingStrategy.selectWriter(routingTable.writers);
	                            name = 'write';
	                        }
	                        else {
	                            throw (0, neo4j_driver_core_1.newError)('Illegal mode ' + accessMode);
	                        }
	                        // we couldn't select a target server
	                        if (!address) {
	                            throw (0, neo4j_driver_core_1.newError)("Failed to obtain connection towards ".concat(name, " server. Known routing table is: ").concat(routingTable), SESSION_EXPIRED);
	                        }
	                        _c.label = 2;
	                    case 2:
	                        _c.trys.push([2, 4, , 5]);
	                        return [4 /*yield*/, this._acquireConnectionToServer(address, name, routingTable)];
	                    case 3:
	                        connection = _c.sent();
	                        return [2 /*return*/, new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler)];
	                    case 4:
	                        error_1 = _c.sent();
	                        transformed = databaseSpecificErrorHandler.handleAndTransformError(error_1, address);
	                        throw transformed;
	                    case 5: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._hasProtocolVersion = function (versionPredicate) {
	        return __awaiter(this, void 0, void 0, function () {
	            var addresses, lastError, i, connection, protocolVersion, error_2;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._resolveSeedRouter(this._seedRouter)];
	                    case 1:
	                        addresses = _a.sent();
	                        i = 0;
	                        _a.label = 2;
	                    case 2:
	                        if (!(i < addresses.length)) return [3 /*break*/, 8];
	                        _a.label = 3;
	                    case 3:
	                        _a.trys.push([3, 6, , 7]);
	                        return [4 /*yield*/, (0, connection_1.createChannelConnection)(addresses[i], this._config, this._createConnectionErrorHandler(), this._log)];
	                    case 4:
	                        connection = _a.sent();
	                        protocolVersion = connection.protocol()
	                            ? connection.protocol().version
	                            : null;
	                        return [4 /*yield*/, connection.close()];
	                    case 5:
	                        _a.sent();
	                        if (protocolVersion) {
	                            return [2 /*return*/, versionPredicate(protocolVersion)];
	                        }
	                        return [2 /*return*/, false];
	                    case 6:
	                        error_2 = _a.sent();
	                        lastError = error_2;
	                        return [3 /*break*/, 7];
	                    case 7:
	                        i++;
	                        return [3 /*break*/, 2];
	                    case 8:
	                        if (lastError) {
	                            throw lastError;
	                        }
	                        return [2 /*return*/, false];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype.supportsMultiDb = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V4_0; })];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype.supportsTransactionConfig = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V3; })];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype.supportsUserImpersonation = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._hasProtocolVersion(function (version) { return version >= BOLT_PROTOCOL_V4_4; })];
	                    case 1: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype.getNegotiatedProtocolVersion = function () {
	        var _this = this;
	        return new Promise(function (resolve, reject) {
	            _this._hasProtocolVersion(resolve)
	                .catch(reject);
	        });
	    };
	    RoutingConnectionProvider.prototype.verifyConnectivityAndGetServerInfo = function (_a) {
	        var database = _a.database, accessMode = _a.accessMode;
	        return __awaiter(this, void 0, void 0, function () {
	            var context, routingTable, servers, error, servers_1, servers_1_1, address, serverInfo, e_1, e_2_1;
	            var e_2, _b;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        context = { database: database || DEFAULT_DB_NAME };
	                        return [4 /*yield*/, this._freshRoutingTable({
	                                accessMode: accessMode,
	                                database: context.database,
	                                onDatabaseNameResolved: function (databaseName) {
	                                    context.database = context.database || databaseName;
	                                }
	                            })];
	                    case 1:
	                        routingTable = _c.sent();
	                        servers = accessMode === WRITE ? routingTable.writers : routingTable.readers;
	                        error = (0, neo4j_driver_core_1.newError)("No servers available for database '".concat(context.database, "' with access mode '").concat(accessMode, "'"), SERVICE_UNAVAILABLE);
	                        _c.label = 2;
	                    case 2:
	                        _c.trys.push([2, 9, 10, 11]);
	                        servers_1 = __values(servers), servers_1_1 = servers_1.next();
	                        _c.label = 3;
	                    case 3:
	                        if (!!servers_1_1.done) return [3 /*break*/, 8];
	                        address = servers_1_1.value;
	                        _c.label = 4;
	                    case 4:
	                        _c.trys.push([4, 6, , 7]);
	                        return [4 /*yield*/, this._verifyConnectivityAndGetServerVersion({ address: address })];
	                    case 5:
	                        serverInfo = _c.sent();
	                        return [2 /*return*/, serverInfo];
	                    case 6:
	                        e_1 = _c.sent();
	                        error = e_1;
	                        return [3 /*break*/, 7];
	                    case 7:
	                        servers_1_1 = servers_1.next();
	                        return [3 /*break*/, 3];
	                    case 8: return [3 /*break*/, 11];
	                    case 9:
	                        e_2_1 = _c.sent();
	                        e_2 = { error: e_2_1 };
	                        return [3 /*break*/, 11];
	                    case 10:
	                        try {
	                            if (servers_1_1 && !servers_1_1.done && (_b = servers_1.return)) _b.call(servers_1);
	                        }
	                        finally { if (e_2) throw e_2.error; }
	                        return [7 /*endfinally*/];
	                    case 11: throw error;
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype.forget = function (address, database) {
	        this._routingTableRegistry.apply(database, {
	            applyWhenExists: function (routingTable) { return routingTable.forget(address); }
	        });
	        // We're firing and forgetting this operation explicitly and listening for any
	        // errors to avoid unhandled promise rejection
	        this._connectionPool.purge(address).catch(function () { });
	    };
	    RoutingConnectionProvider.prototype.forgetWriter = function (address, database) {
	        this._routingTableRegistry.apply(database, {
	            applyWhenExists: function (routingTable) { return routingTable.forgetWriter(address); }
	        });
	    };
	    RoutingConnectionProvider.prototype._acquireConnectionToServer = function (address, serverName, routingTable) {
	        return this._connectionPool.acquire(address);
	    };
	    RoutingConnectionProvider.prototype._freshRoutingTable = function (_a) {
	        var _b = _a === void 0 ? {} : _a, accessMode = _b.accessMode, database = _b.database, bookmarks = _b.bookmarks, impersonatedUser = _b.impersonatedUser, onDatabaseNameResolved = _b.onDatabaseNameResolved;
	        var currentRoutingTable = this._routingTableRegistry.get(database, function () { return new rediscovery_1.RoutingTable({ database: database }); });
	        if (!currentRoutingTable.isStaleFor(accessMode)) {
	            return currentRoutingTable;
	        }
	        this._log.info("Routing table is stale for database: \"".concat(database, "\" and access mode: \"").concat(accessMode, "\": ").concat(currentRoutingTable));
	        return this._refreshRoutingTable(currentRoutingTable, bookmarks, impersonatedUser, onDatabaseNameResolved);
	    };
	    RoutingConnectionProvider.prototype._refreshRoutingTable = function (currentRoutingTable, bookmarks, impersonatedUser, onDatabaseNameResolved) {
	        var knownRouters = currentRoutingTable.routers;
	        if (this._useSeedRouter) {
	            return this._fetchRoutingTableFromSeedRouterFallbackToKnownRouters(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, onDatabaseNameResolved);
	        }
	        return this._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter(knownRouters, currentRoutingTable, bookmarks, impersonatedUser, onDatabaseNameResolved);
	    };
	    RoutingConnectionProvider.prototype._fetchRoutingTableFromSeedRouterFallbackToKnownRouters = function (knownRouters, currentRoutingTable, bookmarks, impersonatedUser, onDatabaseNameResolved) {
	        return __awaiter(this, void 0, void 0, function () {
	            var seenRouters, _a, newRoutingTable, error, _b, newRoutingTable2, error2;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0:
	                        seenRouters = [];
	                        return [4 /*yield*/, this._fetchRoutingTableUsingSeedRouter(seenRouters, this._seedRouter, currentRoutingTable, bookmarks, impersonatedUser)];
	                    case 1:
	                        _a = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable = _a[0], error = _a[1];
	                        if (!newRoutingTable) return [3 /*break*/, 2];
	                        this._useSeedRouter = false;
	                        return [3 /*break*/, 4];
	                    case 2: return [4 /*yield*/, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmarks, impersonatedUser)];
	                    case 3:
	                        _b = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable2 = _b[0], error2 = _b[1];
	                        newRoutingTable = newRoutingTable2;
	                        error = error2 || error;
	                        _c.label = 4;
	                    case 4: return [4 /*yield*/, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved, error)];
	                    case 5: return [2 /*return*/, _c.sent()];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._fetchRoutingTableFromKnownRoutersFallbackToSeedRouter = function (knownRouters, currentRoutingTable, bookmarks, impersonatedUser, onDatabaseNameResolved) {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a, newRoutingTable, error;
	            var _b;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, this._fetchRoutingTableUsingKnownRouters(knownRouters, currentRoutingTable, bookmarks, impersonatedUser)];
	                    case 1:
	                        _a = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable = _a[0], error = _a[1];
	                        if (!!newRoutingTable) return [3 /*break*/, 3];
	                        return [4 /*yield*/, this._fetchRoutingTableUsingSeedRouter(knownRouters, this._seedRouter, currentRoutingTable, bookmarks, impersonatedUser)];
	                    case 2:
	                        // none of the known routers returned a valid routing table - try to use seed router address for rediscovery
	                        _b = __read.apply(void 0, [_c.sent(), 2]), newRoutingTable = _b[0], error = _b[1];
	                        _c.label = 3;
	                    case 3: return [4 /*yield*/, this._applyRoutingTableIfPossible(currentRoutingTable, newRoutingTable, onDatabaseNameResolved, error)];
	                    case 4: return [2 /*return*/, _c.sent()];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._fetchRoutingTableUsingKnownRouters = function (knownRouters, currentRoutingTable, bookmarks, impersonatedUser) {
	        return __awaiter(this, void 0, void 0, function () {
	            var _a, newRoutingTable, error, lastRouterIndex;
	            return __generator(this, function (_b) {
	                switch (_b.label) {
	                    case 0: return [4 /*yield*/, this._fetchRoutingTable(knownRouters, currentRoutingTable, bookmarks, impersonatedUser)];
	                    case 1:
	                        _a = __read.apply(void 0, [_b.sent(), 2]), newRoutingTable = _a[0], error = _a[1];
	                        if (newRoutingTable) {
	                            // one of the known routers returned a valid routing table - use it
	                            return [2 /*return*/, [newRoutingTable, null]];
	                        }
	                        lastRouterIndex = knownRouters.length - 1;
	                        RoutingConnectionProvider._forgetRouter(currentRoutingTable, knownRouters, lastRouterIndex);
	                        return [2 /*return*/, [null, error]];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._fetchRoutingTableUsingSeedRouter = function (seenRouters, seedRouter, routingTable, bookmarks, impersonatedUser) {
	        return __awaiter(this, void 0, void 0, function () {
	            var resolvedAddresses, newAddresses;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._resolveSeedRouter(seedRouter)
	                        // filter out all addresses that we've already tried
	                    ];
	                    case 1:
	                        resolvedAddresses = _a.sent();
	                        newAddresses = resolvedAddresses.filter(function (address) { return seenRouters.indexOf(address) < 0; });
	                        return [4 /*yield*/, this._fetchRoutingTable(newAddresses, routingTable, bookmarks, impersonatedUser)];
	                    case 2: return [2 /*return*/, _a.sent()];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._resolveSeedRouter = function (seedRouter) {
	        return __awaiter(this, void 0, void 0, function () {
	            var resolvedAddresses, dnsResolvedAddresses;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this._hostNameResolver.resolve(seedRouter)];
	                    case 1:
	                        resolvedAddresses = _a.sent();
	                        return [4 /*yield*/, Promise.all(resolvedAddresses.map(function (address) { return _this._dnsResolver.resolve(address); }))];
	                    case 2:
	                        dnsResolvedAddresses = _a.sent();
	                        return [2 /*return*/, [].concat.apply([], dnsResolvedAddresses)];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._fetchRoutingTable = function (routerAddresses, routingTable, bookmarks, impersonatedUser) {
	        return __awaiter(this, void 0, void 0, function () {
	            var _this = this;
	            return __generator(this, function (_a) {
	                return [2 /*return*/, routerAddresses.reduce(function (refreshedTablePromise, currentRouter, currentIndex) { return __awaiter(_this, void 0, void 0, function () {
	                        var _a, newRoutingTable, previousRouterIndex, _b, session, error, error_3;
	                        return __generator(this, function (_c) {
	                            switch (_c.label) {
	                                case 0: return [4 /*yield*/, refreshedTablePromise];
	                                case 1:
	                                    _a = __read.apply(void 0, [_c.sent(), 1]), newRoutingTable = _a[0];
	                                    if (newRoutingTable) {
	                                        // valid routing table was fetched - just return it, try next router otherwise
	                                        return [2 /*return*/, [newRoutingTable, null]];
	                                    }
	                                    else {
	                                        previousRouterIndex = currentIndex - 1;
	                                        RoutingConnectionProvider._forgetRouter(routingTable, routerAddresses, previousRouterIndex);
	                                    }
	                                    return [4 /*yield*/, this._createSessionForRediscovery(currentRouter, bookmarks, impersonatedUser)];
	                                case 2:
	                                    _b = __read.apply(void 0, [_c.sent(), 2]), session = _b[0], error = _b[1];
	                                    if (!session) return [3 /*break*/, 8];
	                                    _c.label = 3;
	                                case 3:
	                                    _c.trys.push([3, 5, 6, 7]);
	                                    return [4 /*yield*/, this._rediscovery.lookupRoutingTableOnRouter(session, routingTable.database, currentRouter, impersonatedUser)];
	                                case 4: return [2 /*return*/, [_c.sent(), null]];
	                                case 5:
	                                    error_3 = _c.sent();
	                                    return [2 /*return*/, this._handleRediscoveryError(error_3, currentRouter)];
	                                case 6:
	                                    session.close();
	                                    return [7 /*endfinally*/];
	                                case 7: return [3 /*break*/, 9];
	                                case 8: 
	                                // unable to acquire connection and create session towards the current router
	                                // return null to signal that the next router should be tried
	                                return [2 /*return*/, [null, error]];
	                                case 9: return [2 /*return*/];
	                            }
	                        });
	                    }); }, Promise.resolve([null, null]))];
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._createSessionForRediscovery = function (routerAddress, bookmarks, impersonatedUser) {
	        return __awaiter(this, void 0, void 0, function () {
	            var connection, databaseSpecificErrorHandler, connectionProvider, protocolVersion, error_4;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        _a.trys.push([0, 2, , 3]);
	                        return [4 /*yield*/, this._connectionPool.acquire(routerAddress)];
	                    case 1:
	                        connection = _a.sent();
	                        databaseSpecificErrorHandler = connection_1.ConnectionErrorHandler.create({
	                            errorCode: SESSION_EXPIRED,
	                            handleAuthorizationExpired: function (error, address) { return _this._handleAuthorizationExpired(error, address); }
	                        });
	                        connectionProvider = new connection_provider_single_1.default(new connection_1.DelegateConnection(connection, databaseSpecificErrorHandler));
	                        protocolVersion = connection.protocol().version;
	                        if (protocolVersion < 4.0) {
	                            return [2 /*return*/, [new neo4j_driver_core_1.Session({
	                                        mode: WRITE,
	                                        bookmarks: Bookmarks.empty(),
	                                        connectionProvider: connectionProvider
	                                    }), null]];
	                        }
	                        return [2 /*return*/, [new neo4j_driver_core_1.Session({
	                                    mode: READ,
	                                    database: SYSTEM_DB_NAME,
	                                    bookmarks: bookmarks,
	                                    connectionProvider: connectionProvider,
	                                    impersonatedUser: impersonatedUser
	                                }), null]];
	                    case 2:
	                        error_4 = _a.sent();
	                        return [2 /*return*/, this._handleRediscoveryError(error_4, routerAddress)];
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._handleRediscoveryError = function (error, routerAddress) {
	        if (_isFailFastError(error) || _isFailFastSecurityError(error)) {
	            throw error;
	        }
	        else if (error.code === PROCEDURE_NOT_FOUND_CODE) {
	            // throw when getServers procedure not found because this is clearly a configuration issue
	            throw (0, neo4j_driver_core_1.newError)("Server at ".concat(routerAddress.asHostPort(), " can't perform routing. Make sure you are connecting to a causal cluster"), SERVICE_UNAVAILABLE, error);
	        }
	        this._log.warn("unable to fetch routing table because of an error ".concat(error));
	        return [null, error];
	    };
	    RoutingConnectionProvider.prototype._applyRoutingTableIfPossible = function (currentRoutingTable, newRoutingTable, onDatabaseNameResolved, error) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!newRoutingTable) {
	                            // none of routing servers returned valid routing table, throw exception
	                            throw (0, neo4j_driver_core_1.newError)("Could not perform discovery. No routing servers available. Known routing table: ".concat(currentRoutingTable), SERVICE_UNAVAILABLE, error);
	                        }
	                        if (newRoutingTable.writers.length === 0) {
	                            // use seed router next time. this is important when cluster is partitioned. it tries to make sure driver
	                            // does not always get routing table without writers because it talks exclusively to a minority partition
	                            this._useSeedRouter = true;
	                        }
	                        return [4 /*yield*/, this._updateRoutingTable(newRoutingTable, onDatabaseNameResolved)];
	                    case 1:
	                        _a.sent();
	                        return [2 /*return*/, newRoutingTable];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider.prototype._updateRoutingTable = function (newRoutingTable, onDatabaseNameResolved) {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: 
	                    // close old connections to servers not present in the new routing table
	                    return [4 /*yield*/, this._connectionPool.keepAll(newRoutingTable.allServers())];
	                    case 1:
	                        // close old connections to servers not present in the new routing table
	                        _a.sent();
	                        this._routingTableRegistry.removeExpired();
	                        this._routingTableRegistry.register(newRoutingTable);
	                        onDatabaseNameResolved(newRoutingTable.database);
	                        this._log.info("Updated routing table ".concat(newRoutingTable));
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    RoutingConnectionProvider._forgetRouter = function (routingTable, routersArray, routerIndex) {
	        var address = routersArray[routerIndex];
	        if (routingTable && address) {
	            routingTable.forgetRouter(address);
	        }
	    };
	    return RoutingConnectionProvider;
	}(connection_provider_pooled_1.default));
	connectionProviderRouting.default = RoutingConnectionProvider;
	/**
	 * Responsible for keeping track of the existing routing tables
	 */
	var RoutingTableRegistry = /** @class */ (function () {
	    /**
	     * Constructor
	     * @param {int} routingTablePurgeDelay The routing table purge delay
	     */
	    function RoutingTableRegistry(routingTablePurgeDelay) {
	        this._tables = new Map();
	        this._routingTablePurgeDelay = routingTablePurgeDelay;
	    }
	    /**
	     * Put a routing table in the registry
	     *
	     * @param {RoutingTable} table The routing table
	     * @returns {RoutingTableRegistry} this
	     */
	    RoutingTableRegistry.prototype.register = function (table) {
	        this._tables.set(table.database, table);
	        return this;
	    };
	    /**
	     * Apply function in the routing table for an specific database. If the database name is not defined, the function will
	     * be applied for each element
	     *
	     * @param {string} database The database name
	     * @param {object} callbacks The actions
	     * @param {function (RoutingTable)} callbacks.applyWhenExists Call when the db exists or when the database property is not informed
	     * @param {function ()} callbacks.applyWhenDontExists Call when the database doesn't have the routing table registred
	     * @returns {RoutingTableRegistry} this
	     */
	    RoutingTableRegistry.prototype.apply = function (database, _a) {
	        var _b = _a === void 0 ? {} : _a, applyWhenExists = _b.applyWhenExists, _c = _b.applyWhenDontExists, applyWhenDontExists = _c === void 0 ? function () { } : _c;
	        if (this._tables.has(database)) {
	            applyWhenExists(this._tables.get(database));
	        }
	        else if (typeof database === 'string' || database === null) {
	            applyWhenDontExists();
	        }
	        else {
	            this._forEach(applyWhenExists);
	        }
	        return this;
	    };
	    /**
	     * Retrieves a routing table from a given database name
	     *
	     * @param {string|impersonatedUser} impersonatedUser The impersonated User
	     * @param {string} database The database name
	     * @param {function()|RoutingTable} defaultSupplier The routing table supplier, if it's not a function or not exists, it will return itself as default value
	     * @returns {RoutingTable} The routing table for the respective database
	     */
	    RoutingTableRegistry.prototype.get = function (database, defaultSupplier) {
	        if (this._tables.has(database)) {
	            return this._tables.get(database);
	        }
	        return typeof defaultSupplier === 'function'
	            ? defaultSupplier()
	            : defaultSupplier;
	    };
	    /**
	     * Remove the routing table which is already expired
	     * @returns {RoutingTableRegistry} this
	     */
	    RoutingTableRegistry.prototype.removeExpired = function () {
	        var _this = this;
	        return this._removeIf(function (value) {
	            return value.isExpiredFor(_this._routingTablePurgeDelay);
	        });
	    };
	    RoutingTableRegistry.prototype._forEach = function (apply) {
	        var e_3, _a;
	        try {
	            for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read(_c.value, 2), value = _d[1];
	                apply(value);
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        return this;
	    };
	    RoutingTableRegistry.prototype._remove = function (key) {
	        this._tables.delete(key);
	        return this;
	    };
	    RoutingTableRegistry.prototype._removeIf = function (predicate) {
	        var e_4, _a;
	        try {
	            for (var _b = __values(this._tables), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
	                if (predicate(value)) {
	                    this._remove(key);
	                }
	            }
	        }
	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_4) throw e_4.error; }
	        }
	        return this;
	    };
	    return RoutingTableRegistry;
	}());
	function _isFailFastError(error) {
	    return [
	        DATABASE_NOT_FOUND_CODE,
	        INVALID_BOOKMARK_CODE,
	        INVALID_BOOKMARK_MIXTURE_CODE,
	        INVALID_ARGUMENT_ERROR,
	        INVALID_REQUEST_ERROR,
	        STATEMENT_TYPE_ERROR
	    ].includes(error.code);
	}
	function _isFailFastSecurityError(error) {
	    return error.code.startsWith('Neo.ClientError.Security.') &&
	        ![
	            AUTHORIZATION_EXPIRED_CODE
	        ].includes(error.code);
	}

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.RoutingConnectionProvider = exports.DirectConnectionProvider = exports.PooledConnectionProvider = exports.SingleConnectionProvider = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var connection_provider_single_1 = connectionProviderSingle;
	Object.defineProperty(exports, "SingleConnectionProvider", { enumerable: true, get: function () { return __importDefault(connection_provider_single_1).default; } });
	var connection_provider_pooled_1 = connectionProviderPooled;
	Object.defineProperty(exports, "PooledConnectionProvider", { enumerable: true, get: function () { return __importDefault(connection_provider_pooled_1).default; } });
	var connection_provider_direct_1 = connectionProviderDirect;
	Object.defineProperty(exports, "DirectConnectionProvider", { enumerable: true, get: function () { return __importDefault(connection_provider_direct_1).default; } });
	var connection_provider_routing_1 = connectionProviderRouting;
	Object.defineProperty(exports, "RoutingConnectionProvider", { enumerable: true, get: function () { return __importDefault(connection_provider_routing_1).default; } });
	}(connectionProvider));

	(function (exports) {
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.pool = exports.packstream = exports.channel = exports.buf = exports.bolt = exports.loadBalancing = void 0;
	exports.loadBalancing = __importStar(loadBalancing);
	exports.bolt = __importStar(bolt);
	exports.buf = __importStar(buf);
	exports.channel = __importStar(channel);
	exports.packstream = __importStar(packstream);
	exports.pool = __importStar(pool$1);
	__exportStar(connectionProvider, exports);
	}(lib));

	(function (exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (g && (g = 0, op[0] && (_ = 0)), _) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Time = exports.LocalTime = exports.Duration = exports.Point = exports.TransactionPromise = exports.ManagedTransaction = exports.Transaction = exports.Session = exports.ServerInfo = exports.Notification = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Integer = exports.Path = exports.PathSegment = exports.UnboundRelationship = exports.Relationship = exports.Node = exports.ResultSummary = exports.Record = exports.Result = exports.Driver = exports.temporal = exports.spatial = exports.graph = exports.error = exports.session = exports.types = exports.logging = exports.auth = exports.isRetriableError = exports.Neo4jError = exports.integer = exports.isUnboundRelationship = exports.isRelationship = exports.isPathSegment = exports.isPath = exports.isNode = exports.isDateTime = exports.isLocalDateTime = exports.isDate = exports.isTime = exports.isLocalTime = exports.isDuration = exports.isPoint = exports.isInt = exports.int = exports.hasReachableServer = exports.driver = void 0;
	exports.bookmarkManager = exports.Connection = exports.ConnectionProvider = exports.DateTime = exports.LocalDateTime = exports.Date = void 0;
	/**
	 * Copyright (c) "Neo4j"
	 * Neo4j Sweden AB [http://neo4j.com]
	 *
	 * This file is part of Neo4j.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var version_1 = __importDefault(version$1);
	var logging_1 = logging;
	Object.defineProperty(exports, "logging", { enumerable: true, get: function () { return logging_1.logging; } });
	var neo4j_driver_core_1 = lib$1;
	Object.defineProperty(exports, "Neo4jError", { enumerable: true, get: function () { return neo4j_driver_core_1.Neo4jError; } });
	Object.defineProperty(exports, "isRetriableError", { enumerable: true, get: function () { return neo4j_driver_core_1.isRetriableError; } });
	Object.defineProperty(exports, "error", { enumerable: true, get: function () { return neo4j_driver_core_1.error; } });
	Object.defineProperty(exports, "Integer", { enumerable: true, get: function () { return neo4j_driver_core_1.Integer; } });
	Object.defineProperty(exports, "int", { enumerable: true, get: function () { return neo4j_driver_core_1.int; } });
	Object.defineProperty(exports, "isInt", { enumerable: true, get: function () { return neo4j_driver_core_1.isInt; } });
	Object.defineProperty(exports, "isPoint", { enumerable: true, get: function () { return neo4j_driver_core_1.isPoint; } });
	Object.defineProperty(exports, "Point", { enumerable: true, get: function () { return neo4j_driver_core_1.Point; } });
	Object.defineProperty(exports, "Date", { enumerable: true, get: function () { return neo4j_driver_core_1.Date; } });
	Object.defineProperty(exports, "DateTime", { enumerable: true, get: function () { return neo4j_driver_core_1.DateTime; } });
	Object.defineProperty(exports, "Duration", { enumerable: true, get: function () { return neo4j_driver_core_1.Duration; } });
	Object.defineProperty(exports, "isDate", { enumerable: true, get: function () { return neo4j_driver_core_1.isDate; } });
	Object.defineProperty(exports, "isDateTime", { enumerable: true, get: function () { return neo4j_driver_core_1.isDateTime; } });
	Object.defineProperty(exports, "isDuration", { enumerable: true, get: function () { return neo4j_driver_core_1.isDuration; } });
	Object.defineProperty(exports, "isLocalDateTime", { enumerable: true, get: function () { return neo4j_driver_core_1.isLocalDateTime; } });
	Object.defineProperty(exports, "isLocalTime", { enumerable: true, get: function () { return neo4j_driver_core_1.isLocalTime; } });
	Object.defineProperty(exports, "isNode", { enumerable: true, get: function () { return neo4j_driver_core_1.isNode; } });
	Object.defineProperty(exports, "isPath", { enumerable: true, get: function () { return neo4j_driver_core_1.isPath; } });
	Object.defineProperty(exports, "isPathSegment", { enumerable: true, get: function () { return neo4j_driver_core_1.isPathSegment; } });
	Object.defineProperty(exports, "isRelationship", { enumerable: true, get: function () { return neo4j_driver_core_1.isRelationship; } });
	Object.defineProperty(exports, "isTime", { enumerable: true, get: function () { return neo4j_driver_core_1.isTime; } });
	Object.defineProperty(exports, "isUnboundRelationship", { enumerable: true, get: function () { return neo4j_driver_core_1.isUnboundRelationship; } });
	Object.defineProperty(exports, "LocalDateTime", { enumerable: true, get: function () { return neo4j_driver_core_1.LocalDateTime; } });
	Object.defineProperty(exports, "LocalTime", { enumerable: true, get: function () { return neo4j_driver_core_1.LocalTime; } });
	Object.defineProperty(exports, "Time", { enumerable: true, get: function () { return neo4j_driver_core_1.Time; } });
	Object.defineProperty(exports, "Node", { enumerable: true, get: function () { return neo4j_driver_core_1.Node; } });
	Object.defineProperty(exports, "Path", { enumerable: true, get: function () { return neo4j_driver_core_1.Path; } });
	Object.defineProperty(exports, "PathSegment", { enumerable: true, get: function () { return neo4j_driver_core_1.PathSegment; } });
	Object.defineProperty(exports, "Relationship", { enumerable: true, get: function () { return neo4j_driver_core_1.Relationship; } });
	Object.defineProperty(exports, "UnboundRelationship", { enumerable: true, get: function () { return neo4j_driver_core_1.UnboundRelationship; } });
	Object.defineProperty(exports, "Record", { enumerable: true, get: function () { return neo4j_driver_core_1.Record; } });
	Object.defineProperty(exports, "ResultSummary", { enumerable: true, get: function () { return neo4j_driver_core_1.ResultSummary; } });
	Object.defineProperty(exports, "Result", { enumerable: true, get: function () { return neo4j_driver_core_1.Result; } });
	Object.defineProperty(exports, "ConnectionProvider", { enumerable: true, get: function () { return neo4j_driver_core_1.ConnectionProvider; } });
	Object.defineProperty(exports, "Driver", { enumerable: true, get: function () { return neo4j_driver_core_1.Driver; } });
	Object.defineProperty(exports, "Plan", { enumerable: true, get: function () { return neo4j_driver_core_1.Plan; } });
	Object.defineProperty(exports, "ProfiledPlan", { enumerable: true, get: function () { return neo4j_driver_core_1.ProfiledPlan; } });
	Object.defineProperty(exports, "QueryStatistics", { enumerable: true, get: function () { return neo4j_driver_core_1.QueryStatistics; } });
	Object.defineProperty(exports, "Notification", { enumerable: true, get: function () { return neo4j_driver_core_1.Notification; } });
	Object.defineProperty(exports, "Session", { enumerable: true, get: function () { return neo4j_driver_core_1.Session; } });
	Object.defineProperty(exports, "Transaction", { enumerable: true, get: function () { return neo4j_driver_core_1.Transaction; } });
	Object.defineProperty(exports, "ManagedTransaction", { enumerable: true, get: function () { return neo4j_driver_core_1.ManagedTransaction; } });
	Object.defineProperty(exports, "TransactionPromise", { enumerable: true, get: function () { return neo4j_driver_core_1.TransactionPromise; } });
	Object.defineProperty(exports, "ServerInfo", { enumerable: true, get: function () { return neo4j_driver_core_1.ServerInfo; } });
	Object.defineProperty(exports, "Connection", { enumerable: true, get: function () { return neo4j_driver_core_1.Connection; } });
	Object.defineProperty(exports, "auth", { enumerable: true, get: function () { return neo4j_driver_core_1.auth; } });
	Object.defineProperty(exports, "bookmarkManager", { enumerable: true, get: function () { return neo4j_driver_core_1.bookmarkManager; } });
	var neo4j_driver_bolt_connection_1 = lib;
	var READ = neo4j_driver_core_1.driver.READ, WRITE = neo4j_driver_core_1.driver.WRITE;
	var _a = neo4j_driver_core_1.internal.util, ENCRYPTION_ON = _a.ENCRYPTION_ON, assertString = _a.assertString, isEmptyObjectOrNull = _a.isEmptyObjectOrNull, ServerAddress = neo4j_driver_core_1.internal.serverAddress.ServerAddress, urlUtil = neo4j_driver_core_1.internal.urlUtil;
	/**
	 * Construct a new Neo4j Driver. This is your main entry point for this
	 * library.
	 *
	 * ## Configuration
	 *
	 * This function optionally takes a configuration argument. Available configuration
	 * options are as follows:
	 *
	 *     {
	 *       // Encryption level: ENCRYPTION_ON or ENCRYPTION_OFF.
	 *       encrypted: ENCRYPTION_ON|ENCRYPTION_OFF
	 *
	 *       // Trust strategy to use if encryption is enabled. There is no mode to disable
	 *       // trust other than disabling encryption altogether. The reason for
	 *       // this is that if you don't know who you are talking to, it is easy for an
	 *       // attacker to hijack your encrypted connection, rendering encryption pointless.
	 *       //
	 *       // TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this
	 *       // means that you trust whatever certificates are in the default trusted certificate
	 *       // store of the underlying system. For Browser environments, the trusted certificate
	 *       // store is usually managed by the browser. Refer to your system or browser documentation
	 *       // if you want to explicitly add a certificate as trusted.
	 *       //
	 *       // TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -
	 *       // whenever we establish an encrypted connection, we ensure the host is using
	 *       // an encryption certificate that is in, or is signed by, a certificate given
	 *       // as trusted through configuration. This option is only available for NodeJS environments.
	 *       //
	 *       // TRUST_ALL_CERTIFICATES means that you trust everything without any verifications
	 *       // steps carried out.  This option is only available for NodeJS environments and should not
	 *       // be used on production systems.
	 *       trust: "TRUST_SYSTEM_CA_SIGNED_CERTIFICATES" | "TRUST_CUSTOM_CA_SIGNED_CERTIFICATES" |
	 *       "TRUST_ALL_CERTIFICATES",
	 *
	 *       // List of one or more paths to trusted encryption certificates. This only
	 *       // works in the NodeJS bundle, and only matters if you use "TRUST_CUSTOM_CA_SIGNED_CERTIFICATES".
	 *       // The certificate files should be in regular X.509 PEM format.
	 *       // For instance, ['./trusted.pem']
	 *       trustedCertificates: [],
	 *
	 *       // The maximum total number of connections allowed to be managed by the connection pool, per host.
	 *       // This includes both in-use and idle connections. No maximum connection pool size is imposed
	 *       // by default.
	 *       maxConnectionPoolSize: 100,
	 *
	 *       // The maximum allowed lifetime for a pooled connection in milliseconds. Pooled connections older than this
	 *       // threshold will be closed and removed from the pool. Such discarding happens during connection acquisition
	 *       // so that new session is never backed by an old connection. Setting this option to a low value will cause
	 *       // a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime
	 *       // to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,
	 *       // etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero
	 *       // and negative values result in lifetime not being checked.
	 *       maxConnectionLifetime: 60 * 60 * 1000, // 1 hour
	 *
	 *       // The maximum amount of time to wait to acquire a connection from the pool (to either create a new
	 *       // connection or borrow an existing one.
	 *       connectionAcquisitionTimeout: 60000, // 1 minute
	 *
	 *       // Specify the maximum time in milliseconds transactions are allowed to retry via
	 *       // `Session#executeRead()` and `Session#executeWrite()` functions.
	 *       // These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient
	 *       // errors with exponential backoff using initial delay of 1 second.
	 *       // Default value is 30000 which is 30 seconds.
	 *       maxTransactionRetryTime: 30000, // 30 seconds
	 *
	 *       // Specify socket connection timeout in milliseconds. Numeric values are expected. Negative and zero values
	 *       // result in no timeout being applied. Connection establishment will be then bound by the timeout configured
	 *       // on the operating system level. Default value is 30000, which is 30 seconds.
	 *       connectionTimeout: 30000, // 30 seconds
	 *
	 *       // Make this driver always return native JavaScript numbers for integer values, instead of the
	 *       // dedicated {@link Integer} class. Values that do not fit in native number bit range will be represented as
	 *       // `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.
	 *       // **Warning:** ResultSummary It is not always safe to enable this setting when JavaScript applications are not the only ones
	 *       // interacting with the database. Stored numbers might in such case be not representable by native
	 *       // {@link Number} type and thus driver will return lossy values. This might also happen when data was
	 *       // initially imported using neo4j import tool and contained numbers larger than
	 *       // `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.
	 *       // Default value for this option is `false` because native JavaScript numbers might result
	 *       // in loss of precision in the general case.
	 *       disableLosslessIntegers: false,
	 *
	 *       // Make this driver always return native Javascript {@link BigInt} for integer values, instead of the dedicated {@link Integer} class or {@link Number}.
	 *       //
	 *       // Default value for this option is `false` for backwards compatibility.
	 *       //
	 *       // **Warning:** `BigInt` doesn't implement the method `toJSON`. In maner of serialize it as `json`, It's needed to add a custom implementation of the `toJSON` on the
	 *       // `BigInt.prototype` {@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json}
	 *       useBigInt: false,
	 *
	 *       // Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.
	 *       //
	 *       // Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and
	 *       // its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all
	 *       // levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.
	 *       //
	 *       // Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should
	 *       // take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations
	 *       // because it is often executed on a hot path.
	 *       //
	 *       // No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.
	 *       logging: {
	 *         level: 'info',
	 *         logger: (level, message) => console.log(level + ' ' + message)
	 *       },
	 *
	 *       // Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.
	 *       // Such resolution happens:
	 *       //  * during the very first rediscovery when driver is created
	 *       //  * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address
	 *       //
	 *       // In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.
	 *       // In browser environment driver uses the initial address as-is.
	 *       // Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.
	 *       // Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses
	 *       // or array of addresses directly.
	 *       resolver: function(address) {
	 *         return ['127.0.0.1:8888', 'fallback.db.com:7687'];
	 *       },
	 *
	 *      // Optionally override the default user agent name.
	 *       userAgent: USER_AGENT
	 *     }
	 *
	 * @param {string} url The URL for the Neo4j database, for instance "neo4j://localhost" and/or "bolt://localhost"
	 * @param {Map<string,string>} authToken Authentication credentials. See {@link auth} for helpers.
	 * @param {Object} config Configuration object. See the configuration section above for details.
	 * @returns {Driver}
	 */
	function driver(url, authToken, config) {
	    var _a, _b, _c;
	    if (config === void 0) { config = {}; }
	    assertString(url, 'Bolt URL');
	    var parsedUrl = urlUtil.parseDatabaseUrl(url);
	    // Determine entryption/trust options from the URL.
	    var routing = false;
	    var encrypted = false;
	    var trust;
	    switch (parsedUrl.scheme) {
	        case 'bolt':
	            break;
	        case 'bolt+s':
	            encrypted = true;
	            trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';
	            break;
	        case 'bolt+ssc':
	            encrypted = true;
	            trust = 'TRUST_ALL_CERTIFICATES';
	            break;
	        case 'neo4j':
	            routing = true;
	            break;
	        case 'neo4j+s':
	            encrypted = true;
	            trust = 'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES';
	            routing = true;
	            break;
	        case 'neo4j+ssc':
	            encrypted = true;
	            trust = 'TRUST_ALL_CERTIFICATES';
	            routing = true;
	            break;
	        default:
	            throw new Error("Unknown scheme: ".concat((_a = parsedUrl.scheme) !== null && _a !== void 0 ? _a : 'null'));
	    }
	    // Encryption enabled on URL, propagate trust to the config.
	    if (encrypted) {
	        // Check for configuration conflict between URL and config.
	        if ('encrypted' in config || 'trust' in config) {
	            throw new Error('Encryption/trust can only be configured either through URL or config, not both');
	        }
	        config.encrypted = ENCRYPTION_ON;
	        config.trust = trust;
	    }
	    // Sanitize authority token. Nicer error from server when a scheme is set.
	    authToken = authToken !== null && authToken !== void 0 ? authToken : {};
	    authToken.scheme = (_b = authToken.scheme) !== null && _b !== void 0 ? _b : 'none';
	    // Use default user agent or user agent specified by user.
	    config.userAgent = (_c = config.userAgent) !== null && _c !== void 0 ? _c : USER_AGENT;
	    var address = ServerAddress.fromUrl(parsedUrl.hostAndPort);
	    var meta = {
	        address: address,
	        typename: routing ? 'Routing' : 'Direct',
	        routing: routing
	    };
	    return new neo4j_driver_core_1.Driver(meta, config, createConnectionProviderFunction());
	    function createConnectionProviderFunction() {
	        if (routing) {
	            return function (id, config, log, hostNameResolver) {
	                return new neo4j_driver_bolt_connection_1.RoutingConnectionProvider({
	                    id: id,
	                    config: config,
	                    log: log,
	                    hostNameResolver: hostNameResolver,
	                    authToken: authToken,
	                    address: address,
	                    userAgent: config.userAgent,
	                    routingContext: parsedUrl.query
	                });
	            };
	        }
	        else {
	            if (!isEmptyObjectOrNull(parsedUrl.query)) {
	                throw new Error("Parameters are not supported with none routed scheme. Given URL: '".concat(url, "'"));
	            }
	            return function (id, config, log) {
	                return new neo4j_driver_bolt_connection_1.DirectConnectionProvider({
	                    id: id,
	                    config: config,
	                    log: log,
	                    authToken: authToken,
	                    address: address,
	                    userAgent: config.userAgent
	                });
	            };
	        }
	    }
	}
	exports.driver = driver;
	/**
	 * Verifies if the driver can reach a server at the given url.
	 *
	 * @experimental
	 * @since 5.0.0
	 * @param {string} url The URL for the Neo4j database, for instance "neo4j://localhost" and/or "bolt://localhost"
	 * @param {Pick<Config, 'logging'>} config Configuration object. See the {@link driver}
	 * @returns {true} When the server is reachable
	 * @throws {Error} When the server is not reachable or the url is invalid
	 */
	function hasReachableServer(url, config) {
	    return __awaiter(this, void 0, void 0, function () {
	        var nonLoggedDriver;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    nonLoggedDriver = driver(url, { scheme: 'none', principal: '', credentials: '' }, config);
	                    _a.label = 1;
	                case 1:
	                    _a.trys.push([1, , 3, 5]);
	                    return [4 /*yield*/, nonLoggedDriver.getNegotiatedProtocolVersion()];
	                case 2:
	                    _a.sent();
	                    return [2 /*return*/, true];
	                case 3: return [4 /*yield*/, nonLoggedDriver.close()];
	                case 4:
	                    _a.sent();
	                    return [7 /*endfinally*/];
	                case 5: return [2 /*return*/];
	            }
	        });
	    });
	}
	exports.hasReachableServer = hasReachableServer;
	var USER_AGENT = 'neo4j-javascript/' + version_1.default;
	/**
	 * Object containing constructors for all neo4j types.
	 */
	var types = {
	    Node: neo4j_driver_core_1.Node,
	    Relationship: neo4j_driver_core_1.Relationship,
	    UnboundRelationship: neo4j_driver_core_1.UnboundRelationship,
	    PathSegment: neo4j_driver_core_1.PathSegment,
	    Path: neo4j_driver_core_1.Path,
	    Result: neo4j_driver_core_1.Result,
	    ResultSummary: neo4j_driver_core_1.ResultSummary,
	    Record: neo4j_driver_core_1.Record,
	    Point: neo4j_driver_core_1.Point,
	    Date: neo4j_driver_core_1.Date,
	    DateTime: neo4j_driver_core_1.DateTime,
	    Duration: neo4j_driver_core_1.Duration,
	    LocalDateTime: neo4j_driver_core_1.LocalDateTime,
	    LocalTime: neo4j_driver_core_1.LocalTime,
	    Time: neo4j_driver_core_1.Time,
	    Integer: neo4j_driver_core_1.Integer
	};
	exports.types = types;
	/**
	 * Object containing string constants representing session access modes.
	 */
	var session = {
	    READ: READ,
	    WRITE: WRITE
	};
	exports.session = session;
	/**
	 * Object containing functions to work with {@link Integer} objects.
	 */
	var integer = {
	    toNumber: neo4j_driver_core_1.toNumber,
	    toString: neo4j_driver_core_1.toString,
	    inSafeRange: neo4j_driver_core_1.inSafeRange
	};
	exports.integer = integer;
	/**
	 * Object containing functions to work with spatial types, like {@link Point}.
	 */
	var spatial = {
	    isPoint: neo4j_driver_core_1.isPoint
	};
	exports.spatial = spatial;
	/**
	 * Object containing functions to work with temporal types, like {@link Time} or {@link Duration}.
	 */
	var temporal = {
	    isDuration: neo4j_driver_core_1.isDuration,
	    isLocalTime: neo4j_driver_core_1.isLocalTime,
	    isTime: neo4j_driver_core_1.isTime,
	    isDate: neo4j_driver_core_1.isDate,
	    isLocalDateTime: neo4j_driver_core_1.isLocalDateTime,
	    isDateTime: neo4j_driver_core_1.isDateTime
	};
	exports.temporal = temporal;
	/**
	 * Object containing functions to work with graph types, like {@link Node} or {@link Relationship}.
	 */
	var graph = {
	    isNode: neo4j_driver_core_1.isNode,
	    isPath: neo4j_driver_core_1.isPath,
	    isPathSegment: neo4j_driver_core_1.isPathSegment,
	    isRelationship: neo4j_driver_core_1.isRelationship,
	    isUnboundRelationship: neo4j_driver_core_1.isUnboundRelationship
	};
	exports.graph = graph;
	/**
	 * @private
	 */
	var forExport = {
	    driver: driver,
	    hasReachableServer: hasReachableServer,
	    int: neo4j_driver_core_1.int,
	    isInt: neo4j_driver_core_1.isInt,
	    isPoint: neo4j_driver_core_1.isPoint,
	    isDuration: neo4j_driver_core_1.isDuration,
	    isLocalTime: neo4j_driver_core_1.isLocalTime,
	    isTime: neo4j_driver_core_1.isTime,
	    isDate: neo4j_driver_core_1.isDate,
	    isLocalDateTime: neo4j_driver_core_1.isLocalDateTime,
	    isDateTime: neo4j_driver_core_1.isDateTime,
	    isNode: neo4j_driver_core_1.isNode,
	    isPath: neo4j_driver_core_1.isPath,
	    isPathSegment: neo4j_driver_core_1.isPathSegment,
	    isRelationship: neo4j_driver_core_1.isRelationship,
	    isUnboundRelationship: neo4j_driver_core_1.isUnboundRelationship,
	    integer: integer,
	    Neo4jError: neo4j_driver_core_1.Neo4jError,
	    isRetriableError: neo4j_driver_core_1.isRetriableError,
	    auth: neo4j_driver_core_1.auth,
	    logging: logging_1.logging,
	    types: types,
	    session: session,
	    error: neo4j_driver_core_1.error,
	    graph: graph,
	    spatial: spatial,
	    temporal: temporal,
	    Driver: neo4j_driver_core_1.Driver,
	    Result: neo4j_driver_core_1.Result,
	    Record: neo4j_driver_core_1.Record,
	    ResultSummary: neo4j_driver_core_1.ResultSummary,
	    Node: neo4j_driver_core_1.Node,
	    Relationship: neo4j_driver_core_1.Relationship,
	    UnboundRelationship: neo4j_driver_core_1.UnboundRelationship,
	    PathSegment: neo4j_driver_core_1.PathSegment,
	    Path: neo4j_driver_core_1.Path,
	    Integer: neo4j_driver_core_1.Integer,
	    Plan: neo4j_driver_core_1.Plan,
	    ProfiledPlan: neo4j_driver_core_1.ProfiledPlan,
	    QueryStatistics: neo4j_driver_core_1.QueryStatistics,
	    Notification: neo4j_driver_core_1.Notification,
	    ServerInfo: neo4j_driver_core_1.ServerInfo,
	    Session: neo4j_driver_core_1.Session,
	    Transaction: neo4j_driver_core_1.Transaction,
	    ManagedTransaction: neo4j_driver_core_1.ManagedTransaction,
	    TransactionPromise: neo4j_driver_core_1.TransactionPromise,
	    Point: neo4j_driver_core_1.Point,
	    Duration: neo4j_driver_core_1.Duration,
	    LocalTime: neo4j_driver_core_1.LocalTime,
	    Time: neo4j_driver_core_1.Time,
	    Date: neo4j_driver_core_1.Date,
	    LocalDateTime: neo4j_driver_core_1.LocalDateTime,
	    DateTime: neo4j_driver_core_1.DateTime,
	    ConnectionProvider: neo4j_driver_core_1.ConnectionProvider,
	    Connection: neo4j_driver_core_1.Connection,
	    bookmarkManager: neo4j_driver_core_1.bookmarkManager
	};
	exports.default = forExport;
	}(lib$2));

	var index = /*@__PURE__*/getDefaultExportFromCjs(lib$2);

	return index;

}));
